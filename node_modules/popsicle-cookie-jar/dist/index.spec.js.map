{"version":3,"file":"index.spec.js","sourceRoot":"","sources":["../src/index.spec.ts"],"names":[],"mappings":";;AAAA,mCAA8C;AAC9C,2CAAqD;AACrD,mCAA6C;AAE7C,IAAA,iBAAQ,EAAC,qBAAqB,EAAE,GAAG,EAAE;IACnC,MAAM,GAAG,GAAG,IAAI,cAAO,CAAC,qBAAqB,CAAC,CAAC;IAC/C,MAAM,EAAE,GAAG,IAAI,eAAQ,CAAC,IAAI,EAAE,EAAE,MAAM,EAAE,GAAG,EAAE,CAAC,CAAC;IAE/C,MAAM,QAAQ,GAAG,IAAI,eAAQ,CAAC,IAAI,EAAE;QAClC,MAAM,EAAE,GAAG;QACX,OAAO,EAAE;YACP,QAAQ,EAAE,OAAO;YACjB,YAAY,EACV,4DAA4D;SAC/D;KACF,CAAC,CAAC;IAEH,IAAA,WAAE,EAAC,sCAAsC,EAAE,KAAK,IAAI,EAAE;QACpD,MAAM,UAAU,GAAG,IAAA,eAAO,GAAE,CAAC;QAC7B,MAAM,IAAI,GAAG,MAAM,UAAU,CAAC,GAAG,CAAC,KAAK,EAAE,EAAE,KAAK,IAAI,EAAE,CAAC,QAAQ,CAAC,KAAK,EAAE,CAAC,CAAC;QAEzE,IAAA,eAAM,EAAC,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,YAAY,CAAC,CAAC,CAAC,GAAG,CAAC,QAAQ,EAAE,CAAC;QAEtD,MAAM,IAAI,GAAG,GAAG,CAAC,KAAK,EAAE,CAAC;QACzB,MAAM,IAAI,GAAG,MAAM,UAAU,CAAC,IAAI,EAAE,KAAK,IAAI,EAAE;YAC7C,IAAA,eAAM,EAAC,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC,CAAC,OAAO,CAAC,aAAa,CAAC,CAAC;YAE1D,OAAO,EAAE,CAAC,KAAK,EAAE,CAAC;QACpB,CAAC,CAAC,CAAC;QAEH,IAAA,eAAM,EAAC,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,YAAY,CAAC,CAAC,CAAC,QAAQ,EAAE,CAAC;QAElD,eAAM,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC;IACvB,CAAC,CAAC,CAAC;IAEH,IAAA,WAAE,EAAC,iCAAiC,EAAE,KAAK,IAAI,EAAE;QAC/C,MAAM,GAAG,GAAG,IAAI,iBAAS,EAAE,CAAC;QAC5B,MAAM,UAAU,GAAG,IAAA,eAAO,EAAC,GAAG,CAAC,CAAC;QAEhC,GAAG,CAAC,aAAa,CAAC,WAAW,EAAE,GAAG,CAAC,GAAG,CAAC,CAAC;QAExC,MAAM,IAAI,GAAG,GAAG,CAAC,KAAK,EAAE,CAAC;QACzB,MAAM,IAAI,GAAG,MAAM,UAAU,CAAC,IAAI,EAAE,KAAK,IAAI,EAAE;YAC7C,IAAA,eAAM,EAAC,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC,CAAC,OAAO,CAAC,WAAW,CAAC,CAAC;YAExD,OAAO,EAAE,CAAC,KAAK,EAAE,CAAC;QACpB,CAAC,CAAC,CAAC;QAEH,IAAA,eAAM,EAAC,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,YAAY,CAAC,CAAC,CAAC,QAAQ,EAAE,CAAC;IACpD,CAAC,CAAC,CAAC;IAEH,IAAA,WAAE,EAAC,4CAA4C,EAAE,KAAK,IAAI,EAAE;QAC1D,MAAM,GAAG,GAAG,IAAI,iBAAS,EAAE,CAAC;QAC5B,MAAM,UAAU,GAAG,IAAA,eAAO,EAAC,GAAG,CAAC,CAAC;QAEhC,GAAG,CAAC,aAAa,CAAC,WAAW,EAAE,GAAG,CAAC,GAAG,CAAC,CAAC;QAExC,MAAM,IAAI,GAAG,GAAG,CAAC,KAAK,EAAE,CAAC;QACzB,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,QAAQ,EAAE,aAAa,CAAC,CAAC;QAE1C,MAAM,IAAI,GAAG,MAAM,UAAU,CAAC,IAAI,EAAE,KAAK,IAAI,EAAE;YAC7C,IAAA,eAAM,EAAC,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC,CAAC,OAAO,CAAC,wBAAwB,CAAC,CAAC;YAErE,OAAO,EAAE,CAAC,KAAK,EAAE,CAAC;QACpB,CAAC,CAAC,CAAC;QAEH,IAAA,eAAM,EAAC,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,YAAY,CAAC,CAAC,CAAC,QAAQ,EAAE,CAAC;IACpD,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","sourcesContent":["import { describe, expect, it } from \"vitest\";\nimport { Request, Response } from \"servie/dist/node\";\nimport { cookies, CookieJar } from \"./index\";\n\ndescribe(\"popsicle cookie jar\", () => {\n  const req = new Request(\"http://example.com/\");\n  const ok = new Response(null, { status: 200 });\n\n  const redirect = new Response(null, {\n    status: 302,\n    headers: {\n      Location: \"/test\",\n      \"Set-Cookie\":\n        \"hello=world; expires=Wed, 01 Jan 3000 00:00:00 GMT; path=/\",\n    },\n  });\n\n  it(\"should use cookie store for requests\", async () => {\n    const middleware = cookies();\n    const res1 = await middleware(req.clone(), async () => redirect.clone());\n\n    expect(res1.headers.get(\"set-cookie\")).not.toBeNull();\n\n    const req2 = req.clone();\n    const res2 = await middleware(req2, async () => {\n      expect(req2.headers.get(\"cookie\")).toEqual(\"hello=world\");\n\n      return ok.clone();\n    });\n\n    expect(res2.headers.get(\"set-cookie\")).toBeNull();\n\n    expect.assertions(3);\n  });\n\n  it(\"should allow custom cookie jars\", async () => {\n    const jar = new CookieJar();\n    const middleware = cookies(jar);\n\n    jar.setCookieSync(\"test=true\", req.url);\n\n    const req1 = req.clone();\n    const res2 = await middleware(req1, async () => {\n      expect(req1.headers.get(\"cookie\")).toEqual(\"test=true\");\n\n      return ok.clone();\n    });\n\n    expect(res2.headers.get(\"set-cookie\")).toBeNull();\n  });\n\n  it(\"should merge cookies with existing cookies\", async () => {\n    const jar = new CookieJar();\n    const middleware = cookies(jar);\n\n    jar.setCookieSync(\"test=true\", req.url);\n\n    const req1 = req.clone();\n    req1.headers.set(\"cookie\", \"manual=true\");\n\n    const res2 = await middleware(req1, async () => {\n      expect(req1.headers.get(\"cookie\")).toEqual(\"manual=true; test=true\");\n\n      return ok.clone();\n    });\n\n    expect(res2.headers.get(\"set-cookie\")).toBeNull();\n  });\n});\n"]}