{"version":3,"file":"xhr.js","sources":["../../../src/instrument/xhr.ts"],"sourcesContent":["// TODO(v8): Move everything in this file into the browser package. Nothing here is generic and we run risk of leaking browser types into non-browser packages.\n\n/* eslint-disable @typescript-eslint/no-explicit-any */\n/* eslint-disable @typescript-eslint/ban-types */\nimport type { HandlerDataXhr, SentryWrappedXMLHttpRequest, WrappedFunction } from '@sentry/types';\n\nimport { isString } from '../is';\nimport { fill } from '../object';\nimport { GLOBAL_OBJ } from '../worldwide';\nimport { addHandler, maybeInstrument, triggerHandlers } from './_handlers';\n\nconst WINDOW = GLOBAL_OBJ as unknown as Window;\n\nexport const SENTRY_XHR_DATA_KEY = '__sentry_xhr_v3__';\n\n/**\n * Add an instrumentation handler for when an XHR request happens.\n * The handler function is called once when the request starts and once when it ends,\n * which can be identified by checking if it has an `endTimestamp`.\n *\n * Use at your own risk, this might break without changelog notice, only used internally.\n * @hidden\n */\nexport function addXhrInstrumentationHandler(handler: (data: HandlerDataXhr) => void): void {\n  const type = 'xhr';\n  addHandler(type, handler);\n  maybeInstrument(type, instrumentXHR);\n}\n\n/** Exported only for tests. */\nexport function instrumentXHR(): void {\n  // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n  if (!(WINDOW as any).XMLHttpRequest) {\n    return;\n  }\n\n  const xhrproto = XMLHttpRequest.prototype;\n\n  fill(xhrproto, 'open', function (originalOpen: () => void): () => void {\n    return function (this: XMLHttpRequest & SentryWrappedXMLHttpRequest, ...args: any[]): void {\n      const startTimestamp = Date.now();\n\n      // open() should always be called with two or more arguments\n      // But to be on the safe side, we actually validate this and bail out if we don't have a method & url\n      const method = isString(args[0]) ? args[0].toUpperCase() : undefined;\n      const url = parseUrl(args[1]);\n\n      if (!method || !url) {\n        return originalOpen.apply(this, args);\n      }\n\n      this[SENTRY_XHR_DATA_KEY] = {\n        method,\n        url,\n        request_headers: {},\n      };\n\n      // if Sentry key appears in URL, don't capture it as a request\n      if (method === 'POST' && url.match(/sentry_key/)) {\n        this.__sentry_own_request__ = true;\n      }\n\n      const onreadystatechangeHandler: () => void = () => {\n        // For whatever reason, this is not the same instance here as from the outer method\n        const xhrInfo = this[SENTRY_XHR_DATA_KEY];\n\n        if (!xhrInfo) {\n          return;\n        }\n\n        if (this.readyState === 4) {\n          try {\n            // touching statusCode in some platforms throws\n            // an exception\n            xhrInfo.status_code = this.status;\n          } catch (e) {\n            /* do nothing */\n          }\n\n          const handlerData: HandlerDataXhr = {\n            args: [method, url],\n            endTimestamp: Date.now(),\n            startTimestamp,\n            xhr: this,\n          };\n          triggerHandlers('xhr', handlerData);\n        }\n      };\n\n      if ('onreadystatechange' in this && typeof this.onreadystatechange === 'function') {\n        fill(this, 'onreadystatechange', function (original: WrappedFunction): Function {\n          return function (this: SentryWrappedXMLHttpRequest, ...readyStateArgs: any[]): void {\n            onreadystatechangeHandler();\n            return original.apply(this, readyStateArgs);\n          };\n        });\n      } else {\n        this.addEventListener('readystatechange', onreadystatechangeHandler);\n      }\n\n      // Intercepting `setRequestHeader` to access the request headers of XHR instance.\n      // This will only work for user/library defined headers, not for the default/browser-assigned headers.\n      // Request cookies are also unavailable for XHR, as `Cookie` header can't be defined by `setRequestHeader`.\n      fill(this, 'setRequestHeader', function (original: WrappedFunction): Function {\n        return function (this: SentryWrappedXMLHttpRequest, ...setRequestHeaderArgs: unknown[]): void {\n          const [header, value] = setRequestHeaderArgs;\n\n          const xhrInfo = this[SENTRY_XHR_DATA_KEY];\n\n          if (xhrInfo && isString(header) && isString(value)) {\n            xhrInfo.request_headers[header.toLowerCase()] = value;\n          }\n\n          return original.apply(this, setRequestHeaderArgs);\n        };\n      });\n\n      return originalOpen.apply(this, args);\n    };\n  });\n\n  fill(xhrproto, 'send', function (originalSend: () => void): () => void {\n    return function (this: XMLHttpRequest & SentryWrappedXMLHttpRequest, ...args: any[]): void {\n      const sentryXhrData = this[SENTRY_XHR_DATA_KEY];\n\n      if (!sentryXhrData) {\n        return originalSend.apply(this, args);\n      }\n\n      if (args[0] !== undefined) {\n        sentryXhrData.body = args[0];\n      }\n\n      const handlerData: HandlerDataXhr = {\n        args: [sentryXhrData.method, sentryXhrData.url],\n        startTimestamp: Date.now(),\n        xhr: this,\n      };\n      triggerHandlers('xhr', handlerData);\n\n      return originalSend.apply(this, args);\n    };\n  });\n}\n\nfunction parseUrl(url: string | unknown): string | undefined {\n  if (isString(url)) {\n    return url;\n  }\n\n  try {\n    // url can be a string or URL\n    // but since URL is not available in IE11, we do not check for it,\n    // but simply assume it is an URL and return `toString()` from it (which returns the full URL)\n    // If that fails, we just return undefined\n    return (url as URL).toString();\n  } catch {} // eslint-disable-line no-empty\n\n  return undefined;\n}\n"],"names":[],"mappings":"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"}