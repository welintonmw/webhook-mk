import { _optionalChain } from '@sentry/utils';
import * as http from 'http';
import { URL } from 'url';
import { logger, serializeEnvelope } from '@sentry/utils';

/**
 * Use this integration to send errors and transactions to Spotlight.
 *
 * Learn more about spotlight at https://spotlightjs.com
 *
 * Important: This integration only works with Node 18 or newer
 */
class Spotlight  {
   static __initStatic() {this.id = 'Spotlight';}
   __init() {this.name = Spotlight.id;}

   constructor(options) {Spotlight.prototype.__init.call(this);
    this._options = {
      sidecarUrl: _optionalChain([options, 'optionalAccess', _ => _.sidecarUrl]) || 'http://localhost:8969/stream',
    };
  }

  /**
   * JSDoc
   */
   setupOnce() {
    // empty but otherwise TS complains
  }

  /**
   * Sets up forwarding envelopes to the Spotlight Sidecar
   */
   setup(client) {
    if (typeof process === 'object' && process.env && process.env.NODE_ENV !== 'development') {
      logger.warn("[Spotlight] It seems you're not in dev mode. Do you really want to have Spotlight enabled?");
    }
    connectToSpotlight(client, this._options);
  }
}Spotlight.__initStatic();

function connectToSpotlight(client, options) {
  const spotlightUrl = parseSidecarUrl(options.sidecarUrl);
  if (!spotlightUrl) {
    return;
  }

  let failedRequests = 0;

  if (typeof client.on !== 'function') {
    logger.warn('[Spotlight] Cannot connect to spotlight due to missing method on SDK client (`client.on`)');
    return;
  }

  client.on('beforeEnvelope', (envelope) => {
    if (failedRequests > 3) {
      logger.warn('[Spotlight] Disabled Sentry -> Spotlight integration due to too many failed requests');
      return;
    }

    const serializedEnvelope = serializeEnvelope(envelope);

    const req = http.request(
      {
        method: 'POST',
        path: spotlightUrl.pathname,
        hostname: spotlightUrl.hostname,
        port: spotlightUrl.port,
        headers: {
          'Content-Type': 'application/x-sentry-envelope',
        },
      },
      res => {
        res.on('data', () => {
          // Drain socket
        });

        res.on('end', () => {
          // Drain socket
        });
        res.setEncoding('utf8');
      },
    );

    req.on('error', () => {
      failedRequests++;
      logger.warn('[Spotlight] Failed to send envelope to Spotlight Sidecar');
    });
    req.write(serializedEnvelope);
    req.end();
  });
}

function parseSidecarUrl(url) {
  try {
    return new URL(`${url}`);
  } catch (e) {
    logger.warn(`[Spotlight] Invalid sidecar URL: ${url}`);
    return undefined;
  }
}

export { Spotlight };
//# sourceMappingURL=spotlight.js.map
