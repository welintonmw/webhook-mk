{"version":3,"file":"extraerrordata.js","sources":["../../../src/extraerrordata.ts"],"sourcesContent":["import type { Contexts, Event, EventHint, ExtendedError, Integration } from '@sentry/types';\nimport { addNonEnumerableProperty, isError, isPlainObject, logger, normalize } from '@sentry/utils';\n\nimport { DEBUG_BUILD } from './debug-build';\n\n/** JSDoc */\ninterface ExtraErrorDataOptions {\n  depth: number;\n}\n\n/** Patch toString calls to return proper name for wrapped functions */\nexport class ExtraErrorData implements Integration {\n  /**\n   * @inheritDoc\n   */\n  public static id: string = 'ExtraErrorData';\n\n  /**\n   * @inheritDoc\n   */\n  public name: string;\n\n  /** JSDoc */\n  private readonly _options: ExtraErrorDataOptions;\n\n  /**\n   * @inheritDoc\n   */\n  public constructor(options?: Partial<ExtraErrorDataOptions>) {\n    this.name = ExtraErrorData.id;\n\n    this._options = {\n      depth: 3,\n      ...options,\n    };\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public setupOnce(_addGlobalEventProcessor: unknown, _getCurrentHub: unknown): void {\n    // noop\n  }\n\n  /** @inheritDoc */\n  public processEvent(event: Event, hint: EventHint): Event {\n    return this.enhanceEventWithErrorData(event, hint);\n  }\n\n  /**\n   * Attaches extracted information from the Error object to extra field in the Event.\n   *\n   * TODO (v8): Drop this public function.\n   */\n  public enhanceEventWithErrorData(event: Event, hint: EventHint = {}): Event {\n    return _enhanceEventWithErrorData(event, hint, this._options.depth);\n  }\n}\n\nfunction _enhanceEventWithErrorData(event: Event, hint: EventHint = {}, depth: number): Event {\n  if (!hint.originalException || !isError(hint.originalException)) {\n    return event;\n  }\n  const exceptionName = (hint.originalException as ExtendedError).name || hint.originalException.constructor.name;\n\n  const errorData = _extractErrorData(hint.originalException as ExtendedError);\n\n  if (errorData) {\n    const contexts: Contexts = {\n      ...event.contexts,\n    };\n\n    const normalizedErrorData = normalize(errorData, depth);\n\n    if (isPlainObject(normalizedErrorData)) {\n      // We mark the error data as \"already normalized\" here, because we don't want other normalization procedures to\n      // potentially truncate the data we just already normalized, with a certain depth setting.\n      addNonEnumerableProperty(normalizedErrorData, '__sentry_skip_normalization__', true);\n      contexts[exceptionName] = normalizedErrorData;\n    }\n\n    return {\n      ...event,\n      contexts,\n    };\n  }\n\n  return event;\n}\n\n/**\n * Extract extra information from the Error object\n */\nfunction _extractErrorData(error: ExtendedError): Record<string, unknown> | null {\n  // We are trying to enhance already existing event, so no harm done if it won't succeed\n  try {\n    const nativeKeys = [\n      'name',\n      'message',\n      'stack',\n      'line',\n      'column',\n      'fileName',\n      'lineNumber',\n      'columnNumber',\n      'toJSON',\n    ];\n\n    const extraErrorInfo: Record<string, unknown> = {};\n\n    // We want only enumerable properties, thus `getOwnPropertyNames` is redundant here, as we filter keys anyway.\n    for (const key of Object.keys(error)) {\n      if (nativeKeys.indexOf(key) !== -1) {\n        continue;\n      }\n      const value = error[key];\n      extraErrorInfo[key] = isError(value) ? value.toString() : value;\n    }\n\n    // Check if someone attached `toJSON` method to grab even more properties (eg. axios is doing that)\n    if (typeof error.toJSON === 'function') {\n      const serializedError = error.toJSON() as Record<string, unknown>;\n\n      for (const key of Object.keys(serializedError)) {\n        const value = serializedError[key];\n        extraErrorInfo[key] = isError(value) ? value.toString() : value;\n      }\n    }\n\n    return extraErrorInfo;\n  } catch (oO) {\n    DEBUG_BUILD && logger.error('Unable to extract extra data from the Error object:', oO);\n  }\n\n  return null;\n}\n"],"names":["isError","normalize","isPlainObject","addNonEnumerableProperty","DEBUG_BUILD","logger"],"mappings":"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"}