{"version":3,"file":"contextlines.js","sources":["../../../src/contextlines.ts"],"sourcesContent":["import type { Event, Integration, StackFrame } from '@sentry/types';\nimport { GLOBAL_OBJ, addContextToFrame, stripUrlQueryAndFragment } from '@sentry/utils';\n\nconst WINDOW = GLOBAL_OBJ as typeof GLOBAL_OBJ & Window;\n\nconst DEFAULT_LINES_OF_CONTEXT = 7;\n\ninterface ContextLinesOptions {\n  /**\n   * Sets the number of context lines for each frame when loading a file.\n   * Defaults to 7.\n   *\n   * Set to 0 to disable loading and inclusion of source files.\n   **/\n  frameContextLines?: number;\n}\n\n/**\n * Collects source context lines around the lines of stackframes pointing to JS embedded in\n * the current page's HTML.\n *\n * This integration DOES NOT work for stack frames pointing to JS files that are loaded by the browser.\n * For frames pointing to files, context lines are added during ingestion and symbolication\n * by attempting to download the JS files to the Sentry backend.\n *\n * Use this integration if you have inline JS code in HTML pages that can't be accessed\n * by our backend (e.g. due to a login-protected page).\n */\nexport class ContextLines implements Integration {\n  /**\n   * @inheritDoc\n   */\n  public static id: string = 'ContextLines';\n\n  /**\n   * @inheritDoc\n   */\n  public name: string;\n\n  public constructor(private readonly _options: ContextLinesOptions = {}) {\n    this.name = ContextLines.id;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public setupOnce(_addGlobalEventProcessor: unknown, _getCurrentHub: unknown): void {\n    // noop\n  }\n\n  /** @inheritDoc */\n  public processEvent(event: Event): Event {\n    return this.addSourceContext(event);\n  }\n\n  /**\n   * Processes an event and adds context lines.\n   *\n   * TODO (v8): Make this internal/private\n   */\n  public addSourceContext(event: Event): Event {\n    const doc = WINDOW.document;\n    const htmlFilename = WINDOW.location && stripUrlQueryAndFragment(WINDOW.location.href);\n    if (!doc || !htmlFilename) {\n      return event;\n    }\n\n    const exceptions = event.exception && event.exception.values;\n    if (!exceptions || !exceptions.length) {\n      return event;\n    }\n\n    const html = doc.documentElement.innerHTML;\n    if (!html) {\n      return event;\n    }\n\n    const htmlLines = ['<!DOCTYPE html>', '<html>', ...html.split('\\n'), '</html>'];\n\n    exceptions.forEach(exception => {\n      const stacktrace = exception.stacktrace;\n      if (stacktrace && stacktrace.frames) {\n        stacktrace.frames = stacktrace.frames.map(frame =>\n          applySourceContextToFrame(\n            frame,\n            htmlLines,\n            htmlFilename,\n            this._options.frameContextLines != null ? this._options.frameContextLines : DEFAULT_LINES_OF_CONTEXT,\n          ),\n        );\n      }\n    });\n\n    return event;\n  }\n}\n\n/**\n * Only exported for testing\n */\nexport function applySourceContextToFrame(\n  frame: StackFrame,\n  htmlLines: string[],\n  htmlFilename: string,\n  linesOfContext: number,\n): StackFrame {\n  if (frame.filename !== htmlFilename || !frame.lineno || !htmlLines.length) {\n    return frame;\n  }\n\n  addContextToFrame(htmlLines, frame, linesOfContext);\n\n  return frame;\n}\n"],"names":[],"mappings":"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"}