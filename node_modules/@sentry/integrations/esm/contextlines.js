import { stripUrlQueryAndFragment, addContextToFrame, GLOBAL_OBJ } from '@sentry/utils';

const WINDOW = GLOBAL_OBJ ;

const DEFAULT_LINES_OF_CONTEXT = 7;

/**
 * Collects source context lines around the lines of stackframes pointing to JS embedded in
 * the current page's HTML.
 *
 * This integration DOES NOT work for stack frames pointing to JS files that are loaded by the browser.
 * For frames pointing to files, context lines are added during ingestion and symbolication
 * by attempting to download the JS files to the Sentry backend.
 *
 * Use this integration if you have inline JS code in HTML pages that can't be accessed
 * by our backend (e.g. due to a login-protected page).
 */
class ContextLines  {
  /**
   * @inheritDoc
   */
   static __initStatic() {this.id = 'ContextLines';}

  /**
   * @inheritDoc
   */

   constructor(  _options = {}) {this._options = _options;
    this.name = ContextLines.id;
  }

  /**
   * @inheritDoc
   */
   setupOnce(_addGlobalEventProcessor, _getCurrentHub) {
    // noop
  }

  /** @inheritDoc */
   processEvent(event) {
    return this.addSourceContext(event);
  }

  /**
   * Processes an event and adds context lines.
   *
   * TODO (v8): Make this internal/private
   */
   addSourceContext(event) {
    const doc = WINDOW.document;
    const htmlFilename = WINDOW.location && stripUrlQueryAndFragment(WINDOW.location.href);
    if (!doc || !htmlFilename) {
      return event;
    }

    const exceptions = event.exception && event.exception.values;
    if (!exceptions || !exceptions.length) {
      return event;
    }

    const html = doc.documentElement.innerHTML;
    if (!html) {
      return event;
    }

    const htmlLines = ['<!DOCTYPE html>', '<html>', ...html.split('\n'), '</html>'];

    exceptions.forEach(exception => {
      const stacktrace = exception.stacktrace;
      if (stacktrace && stacktrace.frames) {
        stacktrace.frames = stacktrace.frames.map(frame =>
          applySourceContextToFrame(
            frame,
            htmlLines,
            htmlFilename,
            this._options.frameContextLines != null ? this._options.frameContextLines : DEFAULT_LINES_OF_CONTEXT,
          ),
        );
      }
    });

    return event;
  }
} ContextLines.__initStatic();

/**
 * Only exported for testing
 */
function applySourceContextToFrame(
  frame,
  htmlLines,
  htmlFilename,
  linesOfContext,
) {
  if (frame.filename !== htmlFilename || !frame.lineno || !htmlLines.length) {
    return frame;
  }

  addContextToFrame(htmlLines, frame, linesOfContext);

  return frame;
}

export { ContextLines, applySourceContextToFrame };
//# sourceMappingURL=contextlines.js.map
