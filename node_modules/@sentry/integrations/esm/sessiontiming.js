/** This function adds duration since Sentry was initialized till the time event was sent */
class SessionTiming  {
  /**
   * @inheritDoc
   */
   static __initStatic() {this.id = 'SessionTiming';}

  /**
   * @inheritDoc
   */

  /** Exact time Client was initialized expressed in milliseconds since Unix Epoch. */

   constructor() {
    this.name = SessionTiming.id;
    this._startTime = Date.now();
  }

  /**
   * @inheritDoc
   */
   setupOnce(_addGlobalEventProcessor, _getCurrentHub) {
    // noop
  }

  /** @inheritDoc */
   processEvent(event) {
    return this.process(event);
  }

  /**
   * TODO (v8): make this private/internal
   */
   process(event) {
    const now = Date.now();

    return {
      ...event,
      extra: {
        ...event.extra,
        ['session:start']: this._startTime,
        ['session:duration']: now - this._startTime,
        ['session:end']: now,
      },
    };
  }
} SessionTiming.__initStatic();

export { SessionTiming };
//# sourceMappingURL=sessiontiming.js.map
