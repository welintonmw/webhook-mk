"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.CustomerIoApi = void 0;
const n8n_workflow_1 = require("n8n-workflow");
class CustomerIoApi {
    constructor() {
        this.name = 'customerIoApi';
        this.displayName = 'Customer.io API';
        this.documentationUrl = 'customerIo';
        this.properties = [
            {
                displayName: 'Tracking API Key',
                name: 'trackingApiKey',
                type: 'string',
                typeOptions: { password: true },
                default: '',
                description: 'Required for tracking API',
                required: true,
            },
            {
                displayName: 'Region',
                name: 'region',
                type: 'options',
                options: [
                    {
                        name: 'EU region',
                        value: 'track-eu.customer.io',
                    },
                    {
                        name: 'Global region',
                        value: 'track.customer.io',
                    },
                ],
                default: 'track.customer.io',
                description: 'Should be set based on your account region',
                hint: 'The region will be omitted when being used with the HTTP node',
                required: true,
            },
            {
                displayName: 'Tracking Site ID',
                name: 'trackingSiteId',
                type: 'string',
                default: '',
                description: 'Required for tracking API',
            },
            {
                displayName: 'App API Key',
                name: 'appApiKey',
                type: 'string',
                typeOptions: { password: true },
                default: '',
                description: 'Required for App API',
            },
        ];
    }
    async authenticate(credentials, requestOptions) {
        const url = requestOptions.url ? requestOptions.url : requestOptions.uri;
        if (url.includes('track') || url.includes('api.customer.io')) {
            const basicAuthKey = Buffer.from(`${credentials.trackingSiteId}:${credentials.trackingApiKey}`).toString('base64');
            Object.assign(requestOptions.headers, { Authorization: `Basic ${basicAuthKey}` });
        }
        else if (url.includes('beta-api.customer.io')) {
            Object.assign(requestOptions.headers, {
                Authorization: `Bearer ${credentials.appApiKey}`,
            });
        }
        else {
            throw new n8n_workflow_1.ApplicationError('Unknown way of authenticating', { level: 'warning' });
        }
        return requestOptions;
    }
}
exports.CustomerIoApi = CustomerIoApi;
//# sourceMappingURL=CustomerIoApi.credentials.js.map