"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.nextCloudApiRequest = void 0;
const n8n_workflow_1 = require("n8n-workflow");
async function nextCloudApiRequest(method, endpoint, body, headers, encoding, query) {
    const resource = this.getNodeParameter('resource', 0);
    const operation = this.getNodeParameter('operation', 0);
    const options = {
        headers,
        method,
        body,
        qs: query !== null && query !== void 0 ? query : {},
        uri: '',
        json: false,
    };
    if (encoding === null) {
        options.encoding = null;
    }
    const authenticationMethod = this.getNodeParameter('authentication', 0);
    try {
        if (authenticationMethod === 'accessToken') {
            const credentials = await this.getCredentials('nextCloudApi');
            if (credentials === undefined) {
                throw new n8n_workflow_1.NodeOperationError(this.getNode(), 'No credentials got returned!');
            }
            options.auth = {
                user: credentials.user,
                pass: credentials.password,
            };
            options.uri = `${credentials.webDavUrl}/${encodeURI(endpoint)}`;
            if (resource === 'user' || operation === 'share') {
                options.uri = options.uri.replace('/remote.php/webdav', '');
            }
            return await this.helpers.request(options);
        }
        else {
            const credentials = await this.getCredentials('nextCloudOAuth2Api');
            if (credentials === undefined) {
                throw new n8n_workflow_1.NodeOperationError(this.getNode(), 'No credentials got returned!');
            }
            options.uri = `${credentials.webDavUrl}/${encodeURI(endpoint)}`;
            if (resource === 'user' && operation === 'create') {
                options.uri = options.uri.replace('/remote.php/webdav', '');
            }
            return await this.helpers.requestOAuth2.call(this, 'nextCloudOAuth2Api', options);
        }
    }
    catch (error) {
        throw new n8n_workflow_1.NodeApiError(this.getNode(), error);
    }
}
exports.nextCloudApiRequest = nextCloudApiRequest;
//# sourceMappingURL=GenericFunctions.js.map