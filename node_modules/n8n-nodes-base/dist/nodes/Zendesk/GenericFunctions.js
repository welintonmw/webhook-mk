"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.validateJSON = exports.zendeskApiRequestAllItems = exports.zendeskApiRequest = void 0;
const n8n_workflow_1 = require("n8n-workflow");
async function zendeskApiRequest(method, resource, body = {}, qs = {}, uri, option = {}) {
    const authenticationMethod = this.getNodeParameter('authentication', 0);
    let options = {
        headers: {},
        method,
        qs,
        body,
        uri,
        json: true,
        qsStringifyOptions: {
            arrayFormat: 'brackets',
        },
    };
    options = Object.assign({}, options, option);
    if (Object.keys(options.body).length === 0) {
        delete options.body;
    }
    try {
        if (authenticationMethod === 'apiToken') {
            const credentials = await this.getCredentials('zendeskApi');
            if (credentials === undefined) {
                throw new n8n_workflow_1.NodeOperationError(this.getNode(), 'No credentials got returned!');
            }
            const base64Key = Buffer.from(`${credentials.email}/token:${credentials.apiToken}`).toString('base64');
            options.uri = uri || `https://${credentials.subdomain}.zendesk.com/api/v2${resource}.json`;
            options.headers['Authorization'] = `Basic ${base64Key}`;
            return await this.helpers.request(options);
        }
        else {
            const credentials = await this.getCredentials('zendeskOAuth2Api');
            if (credentials === undefined) {
                throw new n8n_workflow_1.NodeOperationError(this.getNode(), 'No credentials got returned!');
            }
            options.uri = uri || `https://${credentials.subdomain}.zendesk.com/api/v2${resource}.json`;
            return await this.helpers.requestOAuth2.call(this, 'zendeskOAuth2Api', options);
        }
    }
    catch (error) {
        throw new n8n_workflow_1.NodeApiError(this.getNode(), error);
    }
}
exports.zendeskApiRequest = zendeskApiRequest;
async function zendeskApiRequestAllItems(propertyName, method, resource, body = {}, query = {}) {
    const returnData = [];
    let responseData;
    let uri;
    do {
        responseData = await zendeskApiRequest.call(this, method, resource, body, query, uri);
        uri = responseData.next_page;
        returnData.push.apply(returnData, responseData[propertyName]);
        if (query.limit && query.limit <= returnData.length) {
            return returnData;
        }
    } while (responseData.next_page !== undefined &&
        responseData.next_page !== null);
    return returnData;
}
exports.zendeskApiRequestAllItems = zendeskApiRequestAllItems;
function validateJSON(json) {
    let result;
    try {
        result = JSON.parse(json);
    }
    catch (exception) {
        result = undefined;
    }
    return result;
}
exports.validateJSON = validateJSON;
//# sourceMappingURL=GenericFunctions.js.map