"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.FunctionItem = void 0;
const n8n_workflow_1 = require("n8n-workflow");
const { NodeVM } = require('vm2');
class FunctionItem {
    constructor() {
        this.description = {
            displayName: 'Function Item',
            name: 'functionItem',
            icon: 'fa:code',
            group: ['transform'],
            version: 1,
            description: 'Run custom function code which gets executed once per item',
            defaults: {
                name: 'FunctionItem',
                color: '#ddbb33',
            },
            inputs: ['main'],
            outputs: ['main'],
            properties: [
                {
                    displayName: 'JavaScript Code',
                    name: 'functionCode',
                    typeOptions: {
                        alwaysOpenEditWindow: true,
                        editor: 'code',
                        rows: 10,
                    },
                    type: 'string',
                    default: `// Code here will run once per input item.
// More info and help: https://docs.n8n.io/nodes/n8n-nodes-base.functionItem

// Add a new field called 'myNewField' to the JSON of the item
item.myNewField = 1;

// You can write logs to the browser console
console.log('Done!');

return item;`,
                    description: 'The JavaScript code to execute for each item.',
                    noDataExpression: true,
                },
            ],
        };
    }
    async execute() {
        const items = this.getInputData();
        const returnData = [];
        const length = items.length;
        let item;
        for (let itemIndex = 0; itemIndex < length; itemIndex++) {
            try {
                item = items[itemIndex];
                item = JSON.parse(JSON.stringify(item));
                const sandbox = {
                    getBinaryData: () => {
                        return item.binary;
                    },
                    getNodeParameter: this.getNodeParameter,
                    getWorkflowStaticData: this.getWorkflowStaticData,
                    helpers: this.helpers,
                    item: item.json,
                    setBinaryData: (data) => {
                        item.binary = data;
                    },
                };
                const dataProxy = this.getWorkflowDataProxy(itemIndex);
                Object.assign(sandbox, dataProxy);
                const mode = this.getMode();
                const options = {
                    console: (mode === 'manual') ? 'redirect' : 'inherit',
                    sandbox,
                    require: {
                        external: false,
                        builtin: [],
                    },
                };
                if (process.env.NODE_FUNCTION_ALLOW_BUILTIN) {
                    options.require.builtin = process.env.NODE_FUNCTION_ALLOW_BUILTIN.split(',');
                }
                if (process.env.NODE_FUNCTION_ALLOW_EXTERNAL) {
                    options.require.external = { modules: process.env.NODE_FUNCTION_ALLOW_EXTERNAL.split(',') };
                }
                const vm = new NodeVM(options);
                if (mode === 'manual') {
                    vm.on('console.log', this.sendMessageToUI);
                }
                const functionCode = this.getNodeParameter('functionCode', itemIndex);
                let jsonData;
                try {
                    jsonData = await vm.run(`module.exports = async function() {${functionCode}}()`, __dirname);
                }
                catch (error) {
                    if (this.continueOnFail()) {
                        returnData.push({ json: { error: error.message } });
                        continue;
                    }
                    else {
                        return Promise.reject(error);
                    }
                }
                if (jsonData === undefined) {
                    throw new n8n_workflow_1.NodeOperationError(this.getNode(), 'No data got returned. Always an object has to be returned!');
                }
                const returnItem = {
                    json: jsonData,
                };
                if (item.binary) {
                    returnItem.binary = item.binary;
                }
                returnData.push(returnItem);
            }
            catch (error) {
                if (this.continueOnFail()) {
                    returnData.push({ json: { error: error.message } });
                    continue;
                }
                throw error;
            }
        }
        return this.prepareOutputData(returnData);
    }
}
exports.FunctionItem = FunctionItem;
//# sourceMappingURL=FunctionItem.node.js.map