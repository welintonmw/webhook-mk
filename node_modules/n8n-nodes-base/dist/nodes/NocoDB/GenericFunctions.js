"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.downloadRecordAttachments = exports.apiRequestAllItems = exports.apiRequest = void 0;
const n8n_workflow_1 = require("n8n-workflow");
async function apiRequest(method, endpoint, body, query, uri, option = {}) {
    const credentials = await this.getCredentials('nocoDb');
    if (credentials === undefined) {
        throw new n8n_workflow_1.NodeOperationError(this.getNode(), 'No credentials got returned!');
    }
    query = query || {};
    const options = {
        headers: {
            'xc-auth': credentials.apiToken,
        },
        method,
        body,
        qs: query,
        uri: uri || `${credentials.host}${endpoint}`,
        json: true,
    };
    if (Object.keys(option).length !== 0) {
        Object.assign(options, option);
    }
    if (Object.keys(body).length === 0) {
        delete options.body;
    }
    try {
        return await this.helpers.request(options);
    }
    catch (error) {
        throw new n8n_workflow_1.NodeApiError(this.getNode(), error);
    }
}
exports.apiRequest = apiRequest;
async function apiRequestAllItems(method, endpoint, body, query) {
    if (query === undefined) {
        query = {};
    }
    query.limit = 100;
    query.offset = (query === null || query === void 0 ? void 0 : query.offset) ? query.offset : 0;
    const returnData = [];
    let responseData;
    do {
        responseData = await apiRequest.call(this, method, endpoint, body, query);
        returnData.push(...responseData);
        query.offset += query.limit;
    } while (responseData.length === 0);
    return returnData;
}
exports.apiRequestAllItems = apiRequestAllItems;
async function downloadRecordAttachments(records, fieldNames) {
    const elements = [];
    for (const record of records) {
        const element = { json: {}, binary: {} };
        element.json = record;
        for (const fieldName of fieldNames) {
            if (record[fieldName]) {
                for (const [index, attachment] of JSON.parse(record[fieldName]).entries()) {
                    const file = await apiRequest.call(this, 'GET', '', {}, {}, attachment.url, { json: false, encoding: null });
                    element.binary[`${fieldName}_${index}`] = {
                        data: Buffer.from(file).toString('base64'),
                        fileName: attachment.title,
                        mimeType: attachment.mimetype,
                    };
                }
            }
        }
        if (Object.keys(element.binary).length === 0) {
            delete element.binary;
        }
        elements.push(element);
    }
    return elements;
}
exports.downloadRecordAttachments = downloadRecordAttachments;
//# sourceMappingURL=GenericFunctions.js.map