"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.sendGridApiRequestAllItems = exports.sendGridApiRequest = void 0;
const n8n_workflow_1 = require("n8n-workflow");
async function sendGridApiRequest(endpoint, method, body = {}, qs = {}, option = {}) {
    const credentials = await this.getCredentials('sendGridApi');
    const host = 'api.sendgrid.com/v3';
    const options = {
        headers: {
            Authorization: `Bearer ${credentials.apiKey}`,
        },
        method,
        qs,
        body,
        uri: `https://${host}${endpoint}`,
        json: true,
    };
    if (Object.keys(body).length === 0) {
        delete options.body;
    }
    if (Object.keys(option).length !== 0) {
        Object.assign(options, option);
    }
    try {
        return await this.helpers.request(options);
    }
    catch (error) {
        throw new n8n_workflow_1.NodeApiError(this.getNode(), error);
    }
}
exports.sendGridApiRequest = sendGridApiRequest;
async function sendGridApiRequestAllItems(endpoint, method, propertyName, body = {}, query = {}) {
    const returnData = [];
    let responseData;
    let uri;
    do {
        responseData = await sendGridApiRequest.call(this, endpoint, method, body, query, uri);
        uri = responseData._metadata.next;
        returnData.push.apply(returnData, responseData[propertyName]);
        if (query.limit && returnData.length >= query.limit) {
            return returnData;
        }
    } while (responseData._metadata.next !== undefined);
    return returnData;
}
exports.sendGridApiRequestAllItems = sendGridApiRequestAllItems;
//# sourceMappingURL=GenericFunctions.js.map