"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.typeToNumber = exports.addBinariesToItem = exports.sortByCode = exports.prepareFieldsArray = void 0;
const vm2_1 = require("@n8n/vm2");
const n8n_workflow_1 = require("n8n-workflow");
const prepareFieldsArray = (fields, fieldName = 'Fields') => {
    if (typeof fields === 'string') {
        return fields
            .split(',')
            .map((entry) => entry.trim())
            .filter((entry) => entry !== '');
    }
    if (Array.isArray(fields)) {
        return fields;
    }
    throw new n8n_workflow_1.ApplicationError(`The \'${fieldName}\' parameter must be a string of fields separated by commas or an array of strings.`, { level: 'warning' });
};
exports.prepareFieldsArray = prepareFieldsArray;
const returnRegExp = /\breturn\b/g;
function sortByCode(items) {
    const code = this.getNodeParameter('code', 0);
    if (!returnRegExp.test(code)) {
        throw new n8n_workflow_1.NodeOperationError(this.getNode(), "Sort code doesn't return. Please add a 'return' statement to your code");
    }
    const mode = this.getMode();
    const vm = new vm2_1.NodeVM({
        console: mode === 'manual' ? 'redirect' : 'inherit',
        sandbox: { items },
    });
    return vm.run(`module.exports = items.sort((a, b) => { ${code} })`);
}
exports.sortByCode = sortByCode;
const isBinaryUniqueSetup = () => {
    const binaries = [];
    return (binary) => {
        for (const existingBinary of binaries) {
            if (existingBinary.mimeType === binary.mimeType &&
                existingBinary.fileType === binary.fileType &&
                existingBinary.fileSize === binary.fileSize &&
                existingBinary.fileExtension === binary.fileExtension) {
                return false;
            }
        }
        binaries.push({
            mimeType: binary.mimeType,
            fileType: binary.fileType,
            fileSize: binary.fileSize,
            fileExtension: binary.fileExtension,
        });
        return true;
    };
};
function addBinariesToItem(newItem, items, uniqueOnly) {
    const isBinaryUnique = uniqueOnly ? isBinaryUniqueSetup() : undefined;
    for (const item of items) {
        if (item.binary === undefined)
            continue;
        for (const key of Object.keys(item.binary)) {
            if (!newItem.binary)
                newItem.binary = {};
            let binaryKey = key;
            const binary = item.binary[key];
            if (isBinaryUnique && !isBinaryUnique(binary)) {
                continue;
            }
            let i = 1;
            while (newItem.binary[binaryKey] !== undefined) {
                binaryKey = `${key}_${i}`;
                i++;
            }
            newItem.binary[binaryKey] = binary;
        }
    }
    return newItem;
}
exports.addBinariesToItem = addBinariesToItem;
function typeToNumber(value) {
    if (typeof value === 'object') {
        if (Array.isArray(value))
            return 9;
        if (value === null)
            return 10;
        if (value instanceof Date)
            return 11;
    }
    const types = {
        _string: 1,
        _number: 2,
        _bigint: 3,
        _boolean: 4,
        _symbol: 5,
        _undefined: 6,
        _object: 7,
        _function: 8,
    };
    return types[`_${typeof value}`];
}
exports.typeToNumber = typeToNumber;
//# sourceMappingURL=utils.js.map