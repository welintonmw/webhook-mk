"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.apiRequest = exports.getAuthorization = void 0;
const n8n_workflow_1 = require("n8n-workflow");
async function getAuthorization(credentials) {
    if (credentials === undefined) {
        throw new n8n_workflow_1.NodeOperationError(this.getNode(), 'No credentials got returned!');
    }
    const { password, username } = credentials;
    const options = {
        method: 'POST',
        form: {
            username,
            password,
        },
        uri: `${credentials.url}/users/login`,
        json: true,
    };
    try {
        const response = await this.helpers.request(options);
        return { token: response.token, userId: response.id };
    }
    catch (error) {
        throw new n8n_workflow_1.NodeApiError(this.getNode(), error);
    }
}
exports.getAuthorization = getAuthorization;
async function apiRequest(method, endpoint, body, query) {
    const credentials = await this.getCredentials('wekanApi');
    if (credentials === undefined) {
        throw new n8n_workflow_1.NodeOperationError(this.getNode(), 'No credentials got returned!');
    }
    query = query || {};
    const { token } = await getAuthorization.call(this, credentials);
    const options = {
        headers: {
            'Accept': 'application/json',
            'Authorization': `Bearer ${token}`,
        },
        method,
        body,
        qs: query,
        uri: `${credentials.url}/api/${endpoint}`,
        json: true,
    };
    try {
        return await this.helpers.request(options);
    }
    catch (error) {
        if (error.statusCode === 401) {
            throw new n8n_workflow_1.NodeOperationError(this.getNode(), 'The Wekan credentials are not valid!');
        }
        throw error;
    }
}
exports.apiRequest = apiRequest;
//# sourceMappingURL=GenericFunctions.js.map