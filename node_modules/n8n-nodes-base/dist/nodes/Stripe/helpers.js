"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.handleListing = exports.loadResource = exports.adjustMetadata = exports.adjustCustomerFields = exports.adjustChargeFields = exports.stripeApiRequest = void 0;
const n8n_workflow_1 = require("n8n-workflow");
const lodash_1 = require("lodash");
async function stripeApiRequest(method, endpoint, body, query) {
    const credentials = await this.getCredentials('stripeApi');
    if (credentials === undefined) {
        throw new n8n_workflow_1.NodeOperationError(this.getNode(), 'No credentials got returned!');
    }
    const options = {
        method,
        auth: {
            user: credentials.secretKey,
        },
        form: body,
        qs: query,
        uri: `https://api.stripe.com/v1${endpoint}`,
        json: true,
    };
    if (options.qs && Object.keys(options.qs).length === 0) {
        delete options.qs;
    }
    try {
        return await this.helpers.request.call(this, options);
    }
    catch (error) {
        throw new n8n_workflow_1.NodeApiError(this.getNode(), error);
    }
}
exports.stripeApiRequest = stripeApiRequest;
exports.adjustChargeFields = lodash_1.flow([
    adjustShipping,
    adjustMetadata,
]);
exports.adjustCustomerFields = lodash_1.flow([
    adjustShipping,
    adjustAddress,
    adjustMetadata,
]);
function adjustAddress(addressFields) {
    if (!addressFields.address)
        return addressFields;
    return Object.assign(Object.assign({}, lodash_1.omit(addressFields, ['address'])), { address: addressFields.address.details });
}
function adjustMetadata(fields) {
    if (!fields.metadata || lodash_1.isEmpty(fields.metadata))
        return fields;
    const adjustedMetadata = {};
    fields.metadata.metadataProperties.forEach(pair => {
        adjustedMetadata[pair.key] = pair.value;
    });
    return Object.assign(Object.assign({}, lodash_1.omit(fields, ['metadata'])), { metadata: adjustedMetadata });
}
exports.adjustMetadata = adjustMetadata;
function adjustShipping(shippingFields) {
    var _a;
    const shippingProperties = (_a = shippingFields.shipping) === null || _a === void 0 ? void 0 : _a.shippingProperties[0];
    if (!(shippingProperties === null || shippingProperties === void 0 ? void 0 : shippingProperties.address) || lodash_1.isEmpty(shippingProperties.address))
        return shippingFields;
    return Object.assign(Object.assign({}, lodash_1.omit(shippingFields, ['shipping'])), { shipping: Object.assign(Object.assign({}, lodash_1.omit(shippingProperties, ['address'])), { address: shippingProperties.address.details }) });
}
async function loadResource(resource) {
    const responseData = await stripeApiRequest.call(this, 'GET', `/${resource}s`, {}, {});
    return responseData.data.map(({ name, id }) => ({
        name,
        value: id,
    }));
}
exports.loadResource = loadResource;
async function handleListing(resource, i, qs = {}) {
    const returnData = [];
    let responseData;
    const returnAll = this.getNodeParameter('returnAll', i);
    const limit = this.getNodeParameter('limit', i, 0);
    do {
        responseData = await stripeApiRequest.call(this, 'GET', `/${resource}s`, {}, qs);
        returnData.push(...responseData.data);
        if (!returnAll && returnData.length >= limit) {
            return returnData.slice(0, limit);
        }
        qs.starting_after = returnData[returnData.length - 1].id;
    } while (responseData.has_more);
    return returnData;
}
exports.handleListing = handleListing;
//# sourceMappingURL=helpers.js.map