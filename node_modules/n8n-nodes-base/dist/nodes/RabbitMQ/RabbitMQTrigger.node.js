"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.RabbitMQTrigger = void 0;
const DefaultOptions_1 = require("./DefaultOptions");
const GenericFunctions_1 = require("./GenericFunctions");
class RabbitMQTrigger {
    constructor() {
        this.description = {
            displayName: 'RabbitMQ Trigger',
            name: 'rabbitmqTrigger',
            icon: 'file:rabbitmq.png',
            group: ['trigger'],
            version: 1,
            description: 'Listens to RabbitMQ messages',
            defaults: {
                name: 'RabbitMQ',
                color: '#ff6600',
            },
            inputs: [],
            outputs: ['main'],
            credentials: [
                {
                    name: 'rabbitmq',
                    required: true,
                },
            ],
            properties: [
                {
                    displayName: 'Queue / Topic',
                    name: 'queue',
                    type: 'string',
                    default: '',
                    placeholder: 'queue-name',
                    description: 'Name of the queue to publish to.',
                },
                {
                    displayName: 'Options',
                    name: 'options',
                    type: 'collection',
                    default: {},
                    placeholder: 'Add Option',
                    options: [
                        {
                            displayName: 'Content is Binary',
                            name: 'contentIsBinary',
                            type: 'boolean',
                            default: false,
                            description: 'Saves the content as binary.',
                        },
                        {
                            displayName: 'JSON Parse Body',
                            name: 'jsonParseBody',
                            type: 'boolean',
                            displayOptions: {
                                hide: {
                                    contentIsBinary: [
                                        true,
                                    ],
                                },
                            },
                            default: false,
                            description: 'Parse the body to an object.',
                        },
                        {
                            displayName: 'Only Content',
                            name: 'onlyContent',
                            type: 'boolean',
                            displayOptions: {
                                hide: {
                                    contentIsBinary: [
                                        true,
                                    ],
                                },
                            },
                            default: false,
                            description: 'Returns only the content property.',
                        },
                        ...DefaultOptions_1.rabbitDefaultOptions,
                    ].sort((a, b) => {
                        if (a.displayName.toLowerCase() < b.displayName.toLowerCase()) {
                            return -1;
                        }
                        if (a.displayName.toLowerCase() > b.displayName.toLowerCase()) {
                            return 1;
                        }
                        return 0;
                    }),
                },
            ],
        };
    }
    async trigger() {
        const queue = this.getNodeParameter('queue');
        const options = this.getNodeParameter('options', {});
        const channel = await GenericFunctions_1.rabbitmqConnectQueue.call(this, queue, options);
        const self = this;
        const startConsumer = async () => {
            await channel.consume(queue, async (message) => {
                if (message !== null) {
                    let content = message.content.toString();
                    const item = {
                        json: {},
                    };
                    if (options.contentIsBinary === true) {
                        item.binary = {
                            data: await this.helpers.prepareBinaryData(message.content),
                        };
                        item.json = message;
                        message.content = undefined;
                    }
                    else {
                        if (options.jsonParseBody === true) {
                            content = JSON.parse(content);
                        }
                        if (options.onlyContent === true) {
                            item.json = content;
                        }
                        else {
                            message.content = content;
                            item.json = message;
                        }
                    }
                    self.emit([
                        [
                            item,
                        ],
                    ]);
                    channel.ack(message);
                }
            });
        };
        startConsumer();
        async function closeFunction() {
            await channel.close();
            await channel.connection.close();
        }
        async function manualTriggerFunction() {
            startConsumer();
        }
        return {
            closeFunction,
            manualTriggerFunction,
        };
    }
}
exports.RabbitMQTrigger = RabbitMQTrigger;
//# sourceMappingURL=RabbitMQTrigger.node.js.map