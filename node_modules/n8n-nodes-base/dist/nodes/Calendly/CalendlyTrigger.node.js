"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.CalendlyTrigger = void 0;
const GenericFunctions_1 = require("./GenericFunctions");
class CalendlyTrigger {
    constructor() {
        this.description = {
            displayName: 'Calendly Trigger',
            name: 'calendlyTrigger',
            icon: 'file:calendly.svg',
            group: ['trigger'],
            version: 1,
            description: 'Starts the workflow when Calendly events occur',
            defaults: {
                name: 'Calendly Trigger',
                color: '#374252',
            },
            inputs: [],
            outputs: ['main'],
            credentials: [
                {
                    name: 'calendlyApi',
                    required: true,
                },
            ],
            webhooks: [
                {
                    name: 'default',
                    httpMethod: 'POST',
                    responseMode: 'onReceived',
                    path: 'webhook',
                },
            ],
            properties: [
                {
                    displayName: 'Events',
                    name: 'events',
                    type: 'multiOptions',
                    options: [
                        {
                            name: 'invitee.created',
                            value: 'invitee.created',
                            description: 'Receive notifications when a new Calendly event is created',
                        },
                        {
                            name: 'invitee.canceled',
                            value: 'invitee.canceled',
                            description: 'Receive notifications when a Calendly event is canceled',
                        },
                    ],
                    default: [],
                    required: true,
                },
            ],
        };
        this.webhookMethods = {
            default: {
                async checkExists() {
                    const webhookUrl = this.getNodeWebhookUrl('default');
                    const webhookData = this.getWorkflowStaticData('node');
                    const events = this.getNodeParameter('events');
                    const endpoint = '/hooks';
                    const { data } = await GenericFunctions_1.calendlyApiRequest.call(this, 'GET', endpoint, {});
                    for (const webhook of data) {
                        if (webhook.attributes.url === webhookUrl) {
                            for (const event of events) {
                                if (!webhook.attributes.events.includes(event)) {
                                    return false;
                                }
                            }
                        }
                        webhookData.webhookId = webhook.id;
                        return true;
                    }
                    return false;
                },
                async create() {
                    const webhookData = this.getWorkflowStaticData('node');
                    const webhookUrl = this.getNodeWebhookUrl('default');
                    const events = this.getNodeParameter('events');
                    const endpoint = '/hooks';
                    const body = {
                        url: webhookUrl,
                        events,
                    };
                    const responseData = await GenericFunctions_1.calendlyApiRequest.call(this, 'POST', endpoint, body);
                    if (responseData.id === undefined) {
                        return false;
                    }
                    webhookData.webhookId = responseData.id;
                    return true;
                },
                async delete() {
                    const webhookData = this.getWorkflowStaticData('node');
                    if (webhookData.webhookId !== undefined) {
                        const endpoint = `/hooks/${webhookData.webhookId}`;
                        try {
                            await GenericFunctions_1.calendlyApiRequest.call(this, 'DELETE', endpoint);
                        }
                        catch (error) {
                            return false;
                        }
                        delete webhookData.webhookId;
                    }
                    return true;
                },
            },
        };
    }
    async webhook() {
        const bodyData = this.getBodyData();
        return {
            workflowData: [
                this.helpers.returnJsonArray(bodyData),
            ],
        };
    }
}
exports.CalendlyTrigger = CalendlyTrigger;
//# sourceMappingURL=CalendlyTrigger.node.js.map