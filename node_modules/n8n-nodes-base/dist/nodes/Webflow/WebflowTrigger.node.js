"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.WebflowTrigger = void 0;
const GenericFunctions_1 = require("./GenericFunctions");
class WebflowTrigger {
    constructor() {
        this.description = {
            displayName: 'Webflow Trigger',
            name: 'webflowTrigger',
            icon: 'file:webflow.svg',
            group: ['trigger'],
            version: 1,
            description: 'Handle Webflow events via webhooks',
            defaults: {
                name: 'Webflow Trigger',
                color: '#245bf8',
            },
            inputs: [],
            outputs: ['main'],
            credentials: [
                {
                    name: 'webflowApi',
                    required: true,
                    displayOptions: {
                        show: {
                            authentication: [
                                'accessToken',
                            ],
                        },
                    },
                },
                {
                    name: 'webflowOAuth2Api',
                    required: true,
                    displayOptions: {
                        show: {
                            authentication: [
                                'oAuth2',
                            ],
                        },
                    },
                },
            ],
            webhooks: [
                {
                    name: 'default',
                    httpMethod: 'POST',
                    responseMode: 'onReceived',
                    path: 'webhook',
                },
            ],
            properties: [
                {
                    displayName: 'Authentication',
                    name: 'authentication',
                    type: 'options',
                    options: [
                        {
                            name: 'Access Token',
                            value: 'accessToken',
                        },
                        {
                            name: 'OAuth2',
                            value: 'oAuth2',
                        },
                    ],
                    default: 'accessToken',
                    description: 'Method of authentication.',
                },
                {
                    displayName: 'Site',
                    name: 'site',
                    type: 'options',
                    required: true,
                    default: '',
                    typeOptions: {
                        loadOptionsMethod: 'getSites',
                    },
                    description: 'Site that will trigger the events',
                },
                {
                    displayName: 'Event',
                    name: 'event',
                    type: 'options',
                    required: true,
                    options: [
                        {
                            name: 'Collection Item Created',
                            value: 'collection_item_created',
                        },
                        {
                            name: 'Collection Item Deleted',
                            value: 'collection_item_deleted',
                        },
                        {
                            name: 'Collection Item Updated',
                            value: 'collection_item_changed',
                        },
                        {
                            name: 'Ecomm Inventory Changed',
                            value: 'ecomm_inventory_changed',
                        },
                        {
                            name: 'Ecomm New Order',
                            value: 'ecomm_new_order',
                        },
                        {
                            name: 'Ecomm Order Changed',
                            value: 'ecomm_order_changed',
                        },
                        {
                            name: 'Form Submission',
                            value: 'form_submission',
                        },
                        {
                            name: 'Site Publish',
                            value: 'site_publish',
                        },
                    ],
                    default: 'form_submission',
                },
            ],
        };
        this.methods = {
            loadOptions: {
                async getSites() {
                    const returnData = [];
                    const sites = await GenericFunctions_1.webflowApiRequest.call(this, 'GET', '/sites');
                    for (const site of sites) {
                        const siteName = site.name;
                        const siteId = site._id;
                        returnData.push({
                            name: siteName,
                            value: siteId,
                        });
                    }
                    return returnData;
                },
            },
        };
        this.webhookMethods = {
            default: {
                async checkExists() {
                    const webhookData = this.getWorkflowStaticData('node');
                    const siteId = this.getNodeParameter('site');
                    if (webhookData.webhookId === undefined) {
                        return false;
                    }
                    const endpoint = `/sites/${siteId}/webhooks/${webhookData.webhookId}`;
                    try {
                        await GenericFunctions_1.webflowApiRequest.call(this, 'GET', endpoint);
                    }
                    catch (error) {
                        return false;
                    }
                    return true;
                },
                async create() {
                    const webhookUrl = this.getNodeWebhookUrl('default');
                    const webhookData = this.getWorkflowStaticData('node');
                    const siteId = this.getNodeParameter('site');
                    const event = this.getNodeParameter('event');
                    const endpoint = `/sites/${siteId}/webhooks`;
                    const body = {
                        site_id: siteId,
                        triggerType: event,
                        url: webhookUrl,
                    };
                    const { _id } = await GenericFunctions_1.webflowApiRequest.call(this, 'POST', endpoint, body);
                    webhookData.webhookId = _id;
                    return true;
                },
                async delete() {
                    let responseData;
                    const webhookData = this.getWorkflowStaticData('node');
                    const siteId = this.getNodeParameter('site');
                    const endpoint = `/sites/${siteId}/webhooks/${webhookData.webhookId}`;
                    try {
                        responseData = await GenericFunctions_1.webflowApiRequest.call(this, 'DELETE', endpoint);
                    }
                    catch (error) {
                        return false;
                    }
                    if (!responseData.deleted) {
                        return false;
                    }
                    delete webhookData.webhookId;
                    return true;
                },
            },
        };
    }
    async webhook() {
        const req = this.getRequestObject();
        return {
            workflowData: [
                this.helpers.returnJsonArray(req.body),
            ],
        };
    }
}
exports.WebflowTrigger = WebflowTrigger;
//# sourceMappingURL=WebflowTrigger.node.js.map