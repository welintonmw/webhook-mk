"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Jira = void 0;
const n8n_workflow_1 = require("n8n-workflow");
const GenericFunctions_1 = require("./GenericFunctions");
const IssueAttachmentDescription_1 = require("./IssueAttachmentDescription");
const IssueCommentDescription_1 = require("./IssueCommentDescription");
const IssueDescription_1 = require("./IssueDescription");
const UserDescription_1 = require("./UserDescription");
class Jira {
    constructor() {
        this.description = {
            displayName: 'Jira Software',
            name: 'jira',
            icon: 'file:jira.svg',
            group: ['output'],
            version: 1,
            subtitle: '={{$parameter["operation"] + ": " + $parameter["resource"]}}',
            description: 'Consume Jira Software API',
            defaults: {
                name: 'Jira',
                color: '#4185f7',
            },
            inputs: ['main'],
            outputs: ['main'],
            credentials: [
                {
                    name: 'jiraSoftwareCloudApi',
                    required: true,
                    displayOptions: {
                        show: {
                            jiraVersion: [
                                'cloud',
                            ],
                        },
                    },
                    testedBy: 'jiraSoftwareApiTest',
                },
                {
                    name: 'jiraSoftwareServerApi',
                    required: true,
                    displayOptions: {
                        show: {
                            jiraVersion: [
                                'server',
                            ],
                        },
                    },
                    testedBy: 'jiraSoftwareApiTest',
                },
            ],
            properties: [
                {
                    displayName: 'Jira Version',
                    name: 'jiraVersion',
                    type: 'options',
                    options: [
                        {
                            name: 'Cloud',
                            value: 'cloud',
                        },
                        {
                            name: 'Server (Self Hosted)',
                            value: 'server',
                        },
                    ],
                    default: 'cloud',
                },
                {
                    displayName: 'Resource',
                    name: 'resource',
                    type: 'options',
                    options: [
                        {
                            name: 'Issue',
                            value: 'issue',
                            description: 'Creates an issue or, where the option to create subtasks is enabled in Jira, a subtask',
                        },
                        {
                            name: 'Issue Attachment',
                            value: 'issueAttachment',
                            description: 'Add, remove, and get an attachment from an issue.',
                        },
                        {
                            name: 'Issue Comment',
                            value: 'issueComment',
                            description: 'Get, create, update, and delete a comment from an issue.',
                        },
                        {
                            name: 'User',
                            value: 'user',
                            description: 'Get, create and delete a user.',
                        },
                    ],
                    default: 'issue',
                    description: 'Resource to consume.',
                },
                ...IssueDescription_1.issueOperations,
                ...IssueDescription_1.issueFields,
                ...IssueAttachmentDescription_1.issueAttachmentOperations,
                ...IssueAttachmentDescription_1.issueAttachmentFields,
                ...IssueCommentDescription_1.issueCommentOperations,
                ...IssueCommentDescription_1.issueCommentFields,
                ...UserDescription_1.userOperations,
                ...UserDescription_1.userFields,
            ],
        };
        this.methods = {
            credentialTest: {
                async jiraSoftwareApiTest(credential) {
                    const credentials = credential.data;
                    const data = Buffer.from(`${credentials.email}:${credentials.password || credentials.apiToken}`).toString('base64');
                    const options = {
                        headers: {
                            Authorization: `Basic ${data}`,
                            Accept: 'application/json',
                            'Content-Type': 'application/json',
                            'X-Atlassian-Token': 'no-check',
                        },
                        method: 'GET',
                        uri: `${credentials.domain}/rest/api/2/project`,
                        qs: {
                            recent: 0,
                        },
                        json: true,
                        timeout: 5000,
                    };
                    try {
                        await this.helpers.request(options);
                    }
                    catch (err) {
                        return {
                            status: 'Error',
                            message: `Connection details not valid: ${err.message}`,
                        };
                    }
                    return {
                        status: 'OK',
                        message: 'Authentication successful!',
                    };
                },
            },
            loadOptions: {
                async getProjects() {
                    const returnData = [];
                    const jiraVersion = this.getCurrentNodeParameter('jiraVersion');
                    let endpoint = '';
                    let projects;
                    if (jiraVersion === 'server') {
                        endpoint = '/api/2/project';
                        projects = await GenericFunctions_1.jiraSoftwareCloudApiRequest.call(this, endpoint, 'GET');
                    }
                    else {
                        endpoint = '/api/2/project/search';
                        projects = await GenericFunctions_1.jiraSoftwareCloudApiRequestAllItems.call(this, 'values', endpoint, 'GET');
                    }
                    if (projects.values && Array.isArray(projects.values)) {
                        projects = projects.values;
                    }
                    for (const project of projects) {
                        const projectName = project.name;
                        const projectId = project.id;
                        returnData.push({
                            name: projectName,
                            value: projectId,
                        });
                    }
                    returnData.sort((a, b) => {
                        if (a.name < b.name) {
                            return -1;
                        }
                        if (a.name > b.name) {
                            return 1;
                        }
                        return 0;
                    });
                    return returnData;
                },
                async getIssueTypes() {
                    const projectId = this.getCurrentNodeParameter('project');
                    const returnData = [];
                    const { issueTypes } = await GenericFunctions_1.jiraSoftwareCloudApiRequest.call(this, `/api/2/project/${projectId}`, 'GET');
                    for (const issueType of issueTypes) {
                        const issueTypeName = issueType.name;
                        const issueTypeId = issueType.id;
                        returnData.push({
                            name: issueTypeName,
                            value: issueTypeId,
                        });
                    }
                    returnData.sort((a, b) => {
                        if (a.name < b.name) {
                            return -1;
                        }
                        if (a.name > b.name) {
                            return 1;
                        }
                        return 0;
                    });
                    return returnData;
                },
                async getLabels() {
                    const returnData = [];
                    const labels = await GenericFunctions_1.jiraSoftwareCloudApiRequest.call(this, '/api/2/label', 'GET');
                    for (const label of labels.values) {
                        const labelName = label;
                        const labelId = label;
                        returnData.push({
                            name: labelName,
                            value: labelId,
                        });
                    }
                    returnData.sort((a, b) => {
                        if (a.name < b.name) {
                            return -1;
                        }
                        if (a.name > b.name) {
                            return 1;
                        }
                        return 0;
                    });
                    return returnData;
                },
                async getPriorities() {
                    const returnData = [];
                    const priorities = await GenericFunctions_1.jiraSoftwareCloudApiRequest.call(this, '/api/2/priority', 'GET');
                    for (const priority of priorities) {
                        const priorityName = priority.name;
                        const priorityId = priority.id;
                        returnData.push({
                            name: priorityName,
                            value: priorityId,
                        });
                    }
                    returnData.sort((a, b) => {
                        if (a.name < b.name) {
                            return -1;
                        }
                        if (a.name > b.name) {
                            return 1;
                        }
                        return 0;
                    });
                    return returnData;
                },
                async getUsers() {
                    const returnData = [];
                    const jiraVersion = this.getCurrentNodeParameter('jiraVersion');
                    if (jiraVersion === 'server') {
                        const users = await GenericFunctions_1.jiraSoftwareCloudApiRequest.call(this, '/api/2/user/search', 'GET', {}, {
                            username: '\'',
                        });
                        for (const user of users) {
                            const userName = user.displayName;
                            const userId = user.name;
                            returnData.push({
                                name: userName,
                                value: userId,
                            });
                        }
                    }
                    else {
                        const users = await GenericFunctions_1.jiraSoftwareCloudApiRequest.call(this, '/api/2/users/search', 'GET');
                        for (const user of users) {
                            const userName = user.displayName;
                            const userId = user.accountId;
                            returnData.push({
                                name: userName,
                                value: userId,
                            });
                        }
                    }
                    returnData.sort((a, b) => {
                        if (a.name < b.name) {
                            return -1;
                        }
                        if (a.name > b.name) {
                            return 1;
                        }
                        return 0;
                    });
                    return returnData;
                },
                async getGroups() {
                    const returnData = [];
                    const groups = await GenericFunctions_1.jiraSoftwareCloudApiRequest.call(this, '/api/2/groups/picker', 'GET');
                    for (const group of groups.groups) {
                        const groupName = group.name;
                        const groupId = group.name;
                        returnData.push({
                            name: groupName,
                            value: groupId,
                        });
                    }
                    returnData.sort((a, b) => {
                        if (a.name < b.name) {
                            return -1;
                        }
                        if (a.name > b.name) {
                            return 1;
                        }
                        return 0;
                    });
                    return returnData;
                },
                async getTransitions() {
                    const returnData = [];
                    const issueKey = this.getCurrentNodeParameter('issueKey');
                    const transitions = await GenericFunctions_1.jiraSoftwareCloudApiRequest.call(this, `/api/2/issue/${issueKey}/transitions`, 'GET');
                    for (const transition of transitions.transitions) {
                        returnData.push({
                            name: transition.name,
                            value: transition.id,
                        });
                    }
                    returnData.sort((a, b) => {
                        if (a.name < b.name) {
                            return -1;
                        }
                        if (a.name > b.name) {
                            return 1;
                        }
                        return 0;
                    });
                    return returnData;
                },
                async getCustomFields() {
                    const returnData = [];
                    const operation = this.getCurrentNodeParameter('operation');
                    let projectId;
                    let issueTypeId;
                    if (operation === 'create') {
                        projectId = this.getCurrentNodeParameter('project');
                        issueTypeId = this.getCurrentNodeParameter('issueType');
                    }
                    else {
                        const issueKey = this.getCurrentNodeParameter('issueKey');
                        const res = await GenericFunctions_1.jiraSoftwareCloudApiRequest.call(this, `/api/2/issue/${issueKey}`, 'GET', {}, {});
                        projectId = res.fields.project.id;
                        issueTypeId = res.fields.issuetype.id;
                    }
                    const res = await GenericFunctions_1.jiraSoftwareCloudApiRequest.call(this, `/api/2/issue/createmeta?projectIds=${projectId}&issueTypeIds=${issueTypeId}&expand=projects.issuetypes.fields`, 'GET');
                    const fields = res.projects.find((o) => o.id === projectId).issuetypes.find((o) => o.id === issueTypeId).fields;
                    for (const key of Object.keys(fields)) {
                        const field = fields[key];
                        if (field.schema && Object.keys(field.schema).includes('customId')) {
                            returnData.push({
                                name: field.name,
                                value: field.key || field.fieldId,
                            });
                        }
                    }
                    return returnData;
                },
                async getProjectComponents() {
                    const returnData = [];
                    const project = this.getCurrentNodeParameter('project');
                    const { values: components } = await GenericFunctions_1.jiraSoftwareCloudApiRequest.call(this, `/api/2/project/${project}/component`, 'GET');
                    for (const component of components) {
                        returnData.push({
                            name: component.name,
                            value: component.id,
                        });
                    }
                    returnData.sort((a, b) => {
                        if (a.name < b.name) {
                            return -1;
                        }
                        if (a.name > b.name) {
                            return 1;
                        }
                        return 0;
                    });
                    return returnData;
                },
            },
        };
    }
    async execute() {
        const items = this.getInputData();
        const returnData = [];
        const length = items.length;
        let responseData;
        const qs = {};
        const resource = this.getNodeParameter('resource', 0);
        const operation = this.getNodeParameter('operation', 0);
        const jiraVersion = this.getNodeParameter('jiraVersion', 0);
        if (resource === 'issue') {
            if (operation === 'create') {
                for (let i = 0; i < length; i++) {
                    const summary = this.getNodeParameter('summary', i);
                    const projectId = this.getNodeParameter('project', i);
                    const issueTypeId = this.getNodeParameter('issueType', i);
                    const additionalFields = this.getNodeParameter('additionalFields', i);
                    const body = {};
                    const fields = {
                        summary,
                        project: {
                            id: projectId,
                        },
                        issuetype: {
                            id: issueTypeId,
                        },
                    };
                    if (additionalFields.labels) {
                        fields.labels = additionalFields.labels;
                    }
                    if (additionalFields.serverLabels) {
                        fields.labels = additionalFields.serverLabels;
                    }
                    if (additionalFields.priority) {
                        fields.priority = {
                            id: additionalFields.priority,
                        };
                    }
                    if (additionalFields.assignee) {
                        if (jiraVersion === 'server') {
                            fields.assignee = {
                                name: additionalFields.assignee,
                            };
                        }
                        else {
                            fields.assignee = {
                                id: additionalFields.assignee,
                            };
                        }
                    }
                    if (additionalFields.reporter) {
                        fields.reporter = {
                            id: additionalFields.reporter,
                        };
                    }
                    if (additionalFields.description) {
                        fields.description = additionalFields.description;
                    }
                    if (additionalFields.updateHistory) {
                        qs.updateHistory = additionalFields.updateHistory;
                    }
                    if (additionalFields.componentIds) {
                        fields.components = additionalFields.componentIds.map(id => ({ id }));
                    }
                    if (additionalFields.customFieldsUi) {
                        const customFields = additionalFields.customFieldsUi.customFieldsValues;
                        if (customFields) {
                            const data = customFields.reduce((obj, value) => Object.assign(obj, { [`${value.fieldId}`]: value.fieldValue }), {});
                            Object.assign(fields, data);
                        }
                    }
                    const issueTypes = await GenericFunctions_1.jiraSoftwareCloudApiRequest.call(this, '/api/2/issuetype', 'GET', body, qs);
                    const subtaskIssues = [];
                    for (const issueType of issueTypes) {
                        if (issueType.subtask) {
                            subtaskIssues.push(issueType.id);
                        }
                    }
                    if (!additionalFields.parentIssueKey
                        && subtaskIssues.includes(issueTypeId)) {
                        throw new n8n_workflow_1.NodeOperationError(this.getNode(), 'You must define a Parent Issue Key when Issue type is sub-task');
                    }
                    else if (additionalFields.parentIssueKey
                        && subtaskIssues.includes(issueTypeId)) {
                        fields.parent = {
                            key: additionalFields.parentIssueKey.toUpperCase(),
                        };
                    }
                    body.fields = fields;
                    responseData = await GenericFunctions_1.jiraSoftwareCloudApiRequest.call(this, '/api/2/issue', 'POST', body);
                    returnData.push(responseData);
                }
            }
            if (operation === 'update') {
                for (let i = 0; i < length; i++) {
                    const issueKey = this.getNodeParameter('issueKey', i);
                    const updateFields = this.getNodeParameter('updateFields', i);
                    const body = {};
                    const fields = {};
                    if (updateFields.summary) {
                        fields.summary = updateFields.summary;
                    }
                    if (updateFields.issueType) {
                        fields.issuetype = {
                            id: updateFields.issueType,
                        };
                    }
                    if (updateFields.labels) {
                        fields.labels = updateFields.labels;
                    }
                    if (updateFields.serverLabels) {
                        fields.labels = updateFields.serverLabels;
                    }
                    if (updateFields.priority) {
                        fields.priority = {
                            id: updateFields.priority,
                        };
                    }
                    if (updateFields.assignee) {
                        if (jiraVersion === 'server') {
                            fields.assignee = {
                                name: updateFields.assignee,
                            };
                        }
                        else {
                            fields.assignee = {
                                id: updateFields.assignee,
                            };
                        }
                    }
                    if (updateFields.reporter) {
                        fields.reporter = {
                            id: updateFields.reporter,
                        };
                    }
                    if (updateFields.description) {
                        fields.description = updateFields.description;
                    }
                    if (updateFields.customFieldsUi) {
                        const customFields = updateFields.customFieldsUi.customFieldsValues;
                        if (customFields) {
                            const data = customFields.reduce((obj, value) => Object.assign(obj, { [`${value.fieldId}`]: value.fieldValue }), {});
                            Object.assign(fields, data);
                        }
                    }
                    const issueTypes = await GenericFunctions_1.jiraSoftwareCloudApiRequest.call(this, '/api/2/issuetype', 'GET', body);
                    const subtaskIssues = [];
                    for (const issueType of issueTypes) {
                        if (issueType.subtask) {
                            subtaskIssues.push(issueType.id);
                        }
                    }
                    if (!updateFields.parentIssueKey
                        && subtaskIssues.includes(updateFields.issueType)) {
                        throw new n8n_workflow_1.NodeOperationError(this.getNode(), 'You must define a Parent Issue Key when Issue type is sub-task');
                    }
                    else if (updateFields.parentIssueKey
                        && subtaskIssues.includes(updateFields.issueType)) {
                        fields.parent = {
                            key: updateFields.parentIssueKey.toUpperCase(),
                        };
                    }
                    body.fields = fields;
                    if (updateFields.statusId) {
                        responseData = await GenericFunctions_1.jiraSoftwareCloudApiRequest.call(this, `/api/2/issue/${issueKey}/transitions`, 'POST', { transition: { id: updateFields.statusId } });
                    }
                    responseData = await GenericFunctions_1.jiraSoftwareCloudApiRequest.call(this, `/api/2/issue/${issueKey}`, 'PUT', body);
                    returnData.push({ success: true });
                }
            }
            if (operation === 'get') {
                for (let i = 0; i < length; i++) {
                    const issueKey = this.getNodeParameter('issueKey', i);
                    const additionalFields = this.getNodeParameter('additionalFields', i);
                    if (additionalFields.fields) {
                        qs.fields = additionalFields.fields;
                    }
                    if (additionalFields.fieldsByKey) {
                        qs.fieldsByKey = additionalFields.fieldsByKey;
                    }
                    if (additionalFields.expand) {
                        qs.expand = additionalFields.expand;
                    }
                    if (additionalFields.properties) {
                        qs.properties = additionalFields.properties;
                    }
                    if (additionalFields.updateHistory) {
                        qs.updateHistory = additionalFields.updateHistory;
                    }
                    responseData = await GenericFunctions_1.jiraSoftwareCloudApiRequest.call(this, `/api/2/issue/${issueKey}`, 'GET', {}, qs);
                    returnData.push(responseData);
                }
            }
            if (operation === 'getAll') {
                for (let i = 0; i < length; i++) {
                    const returnAll = this.getNodeParameter('returnAll', i);
                    const options = this.getNodeParameter('options', i);
                    const body = {};
                    if (options.fields) {
                        body.fields = options.fields.split(',');
                    }
                    if (options.jql) {
                        body.jql = options.jql;
                    }
                    if (options.expand) {
                        if (typeof options.expand === 'string') {
                            body.expand = options.expand.split(',');
                        }
                        else {
                            body.expand = options.expand;
                        }
                    }
                    if (returnAll) {
                        responseData = await GenericFunctions_1.jiraSoftwareCloudApiRequestAllItems.call(this, 'issues', `/api/2/search`, 'POST', body);
                    }
                    else {
                        const limit = this.getNodeParameter('limit', i);
                        body.maxResults = limit;
                        responseData = await GenericFunctions_1.jiraSoftwareCloudApiRequest.call(this, `/api/2/search`, 'POST', body);
                        responseData = responseData.issues;
                    }
                    returnData.push.apply(returnData, responseData);
                }
            }
            if (operation === 'changelog') {
                for (let i = 0; i < length; i++) {
                    const issueKey = this.getNodeParameter('issueKey', i);
                    const returnAll = this.getNodeParameter('returnAll', i);
                    if (returnAll) {
                        responseData = await GenericFunctions_1.jiraSoftwareCloudApiRequestAllItems.call(this, 'values', `/api/2/issue/${issueKey}/changelog`, 'GET');
                    }
                    else {
                        qs.maxResults = this.getNodeParameter('limit', i);
                        responseData = await GenericFunctions_1.jiraSoftwareCloudApiRequest.call(this, `/api/2/issue/${issueKey}/changelog`, 'GET', {}, qs);
                        responseData = responseData.values;
                    }
                    returnData.push.apply(returnData, responseData);
                }
            }
            if (operation === 'notify') {
                for (let i = 0; i < length; i++) {
                    const issueKey = this.getNodeParameter('issueKey', i);
                    const additionalFields = this.getNodeParameter('additionalFields', i);
                    const jsonActive = this.getNodeParameter('jsonParameters', 0);
                    const body = {};
                    if (additionalFields.textBody) {
                        body.textBody = additionalFields.textBody;
                    }
                    if (additionalFields.htmlBody) {
                        body.htmlBody = additionalFields.htmlBody;
                    }
                    if (!jsonActive) {
                        const notificationRecipientsValues = this.getNodeParameter('notificationRecipientsUi', i).notificationRecipientsValues;
                        const notificationRecipients = {};
                        if (notificationRecipientsValues) {
                            if (notificationRecipientsValues.reporter) {
                                notificationRecipients.reporter = notificationRecipientsValues.reporter;
                            }
                            if (notificationRecipientsValues.assignee) {
                                notificationRecipients.assignee = notificationRecipientsValues.assignee;
                            }
                            if (notificationRecipientsValues.assignee) {
                                notificationRecipients.watchers = notificationRecipientsValues.watchers;
                            }
                            if (notificationRecipientsValues.voters) {
                                notificationRecipients.watchers = notificationRecipientsValues.voters;
                            }
                            if (notificationRecipientsValues.users.length > 0) {
                                notificationRecipients.users = notificationRecipientsValues.users.map(user => {
                                    return {
                                        accountId: user,
                                    };
                                });
                            }
                            if (notificationRecipientsValues.groups.length > 0) {
                                notificationRecipients.groups = notificationRecipientsValues.groups.map(group => {
                                    return {
                                        name: group,
                                    };
                                });
                            }
                        }
                        body.to = notificationRecipients;
                        const notificationRecipientsRestrictionsValues = this.getNodeParameter('notificationRecipientsRestrictionsUi', i).notificationRecipientsRestrictionsValues;
                        const notificationRecipientsRestrictions = {};
                        if (notificationRecipientsRestrictionsValues) {
                            if (notificationRecipientsRestrictionsValues.groups.length > 0) {
                                notificationRecipientsRestrictions.groups = notificationRecipientsRestrictionsValues.groups.map(group => {
                                    return {
                                        name: group,
                                    };
                                });
                            }
                        }
                        body.restrict = notificationRecipientsRestrictions;
                    }
                    else {
                        const notificationRecipientsJson = GenericFunctions_1.validateJSON(this.getNodeParameter('notificationRecipientsJson', i));
                        if (notificationRecipientsJson) {
                            body.to = notificationRecipientsJson;
                        }
                        const notificationRecipientsRestrictionsJson = GenericFunctions_1.validateJSON(this.getNodeParameter('notificationRecipientsRestrictionsJson', i));
                        if (notificationRecipientsRestrictionsJson) {
                            body.restrict = notificationRecipientsRestrictionsJson;
                        }
                    }
                    responseData = await GenericFunctions_1.jiraSoftwareCloudApiRequest.call(this, `/api/2/issue/${issueKey}/notify`, 'POST', body, qs);
                    returnData.push(responseData);
                }
            }
            if (operation === 'transitions') {
                for (let i = 0; i < length; i++) {
                    const issueKey = this.getNodeParameter('issueKey', i);
                    const additionalFields = this.getNodeParameter('additionalFields', i);
                    if (additionalFields.transitionId) {
                        qs.transitionId = additionalFields.transitionId;
                    }
                    if (additionalFields.expand) {
                        qs.expand = additionalFields.expand;
                    }
                    if (additionalFields.skipRemoteOnlyCondition) {
                        qs.skipRemoteOnlyCondition = additionalFields.skipRemoteOnlyCondition;
                    }
                    responseData = await GenericFunctions_1.jiraSoftwareCloudApiRequest.call(this, `/api/2/issue/${issueKey}/transitions`, 'GET', {}, qs);
                    responseData = responseData.transitions;
                    returnData.push.apply(returnData, responseData);
                }
            }
            if (operation === 'delete') {
                for (let i = 0; i < length; i++) {
                    const issueKey = this.getNodeParameter('issueKey', i);
                    const deleteSubtasks = this.getNodeParameter('deleteSubtasks', i);
                    qs.deleteSubtasks = deleteSubtasks;
                    responseData = await GenericFunctions_1.jiraSoftwareCloudApiRequest.call(this, `/api/2/issue/${issueKey}`, 'DELETE', {}, qs);
                    returnData.push({ success: true });
                }
            }
        }
        if (resource === 'issueAttachment') {
            const apiVersion = jiraVersion === 'server' ? '2' : '3';
            if (operation === 'add') {
                for (let i = 0; i < length; i++) {
                    const binaryPropertyName = this.getNodeParameter('binaryPropertyName', i);
                    const issueKey = this.getNodeParameter('issueKey', i);
                    if (items[i].binary === undefined) {
                        throw new n8n_workflow_1.NodeOperationError(this.getNode(), 'No binary data exists on item!');
                    }
                    const item = items[i].binary;
                    const binaryData = item[binaryPropertyName];
                    const binaryDataBuffer = await this.helpers.getBinaryDataBuffer(i, binaryPropertyName);
                    if (binaryData === undefined) {
                        throw new n8n_workflow_1.NodeOperationError(this.getNode(), `No binary data property "${binaryPropertyName}" does not exists on item!`);
                    }
                    responseData = await GenericFunctions_1.jiraSoftwareCloudApiRequest.call(this, `/api/${apiVersion}/issue/${issueKey}/attachments`, 'POST', {}, {}, undefined, {
                        formData: {
                            file: {
                                value: binaryDataBuffer,
                                options: {
                                    filename: binaryData.fileName,
                                },
                            },
                        },
                    });
                    returnData.push.apply(returnData, responseData);
                }
            }
            if (operation === 'remove') {
                for (let i = 0; i < length; i++) {
                    const attachmentId = this.getNodeParameter('attachmentId', i);
                    responseData = await GenericFunctions_1.jiraSoftwareCloudApiRequest.call(this, `/api/${apiVersion}/attachment/${attachmentId}`, 'DELETE', {}, qs);
                    returnData.push({ success: true });
                }
            }
            if (operation === 'get') {
                const download = this.getNodeParameter('download', 0);
                for (let i = 0; i < length; i++) {
                    const attachmentId = this.getNodeParameter('attachmentId', i);
                    responseData = await GenericFunctions_1.jiraSoftwareCloudApiRequest.call(this, `/api/${apiVersion}/attachment/${attachmentId}`, 'GET', {}, qs);
                    returnData.push({ json: responseData });
                }
                if (download) {
                    const binaryPropertyName = this.getNodeParameter('binaryProperty', 0);
                    for (const [index, attachment] of returnData.entries()) {
                        returnData[index]['binary'] = {};
                        const buffer = await GenericFunctions_1.jiraSoftwareCloudApiRequest.call(this, '', 'GET', {}, {}, attachment === null || attachment === void 0 ? void 0 : attachment.json.content, { json: false, encoding: null });
                        returnData[index]['binary'][binaryPropertyName] = await this.helpers.prepareBinaryData(buffer, attachment.json.filename, attachment.json.mimeType);
                    }
                }
            }
            if (operation === 'getAll') {
                const download = this.getNodeParameter('download', 0);
                for (let i = 0; i < length; i++) {
                    const issueKey = this.getNodeParameter('issueKey', i);
                    const returnAll = this.getNodeParameter('returnAll', i);
                    const { fields: { attachment } } = await GenericFunctions_1.jiraSoftwareCloudApiRequest.call(this, `/api/2/issue/${issueKey}`, 'GET', {}, qs);
                    responseData = attachment;
                    if (returnAll === false) {
                        const limit = this.getNodeParameter('limit', i);
                        responseData = responseData.slice(0, limit);
                    }
                    responseData = responseData.map((data) => ({ json: data }));
                    returnData.push.apply(returnData, responseData);
                }
                if (download) {
                    const binaryPropertyName = this.getNodeParameter('binaryProperty', 0);
                    for (const [index, attachment] of returnData.entries()) {
                        returnData[index]['binary'] = {};
                        const buffer = await GenericFunctions_1.jiraSoftwareCloudApiRequest.call(this, '', 'GET', {}, {}, attachment.json.content, { json: false, encoding: null });
                        returnData[index]['binary'][binaryPropertyName] = await this.helpers.prepareBinaryData(buffer, attachment.json.filename, attachment.json.mimeType);
                    }
                }
            }
        }
        if (resource === 'issueComment') {
            const apiVersion = jiraVersion === 'server' ? '2' : '3';
            if (operation === 'add') {
                for (let i = 0; i < length; i++) {
                    const jsonParameters = this.getNodeParameter('jsonParameters', 0);
                    const issueKey = this.getNodeParameter('issueKey', i);
                    const options = this.getNodeParameter('options', i);
                    const body = {};
                    if (options.expand) {
                        qs.expand = options.expand;
                        delete options.expand;
                    }
                    Object.assign(body, options);
                    if (jsonParameters === false) {
                        const comment = this.getNodeParameter('comment', i);
                        if (jiraVersion === 'server') {
                            Object.assign(body, { body: comment });
                        }
                        else {
                            Object.assign(body, {
                                body: {
                                    type: 'doc',
                                    version: 1,
                                    content: [
                                        {
                                            type: 'paragraph',
                                            content: [
                                                {
                                                    type: 'text',
                                                    text: comment,
                                                },
                                            ],
                                        },
                                    ],
                                },
                            });
                        }
                    }
                    else {
                        const commentJson = this.getNodeParameter('commentJson', i);
                        const json = GenericFunctions_1.validateJSON(commentJson);
                        if (json === '') {
                            throw new n8n_workflow_1.NodeOperationError(this.getNode(), 'Document Format must be a valid JSON');
                        }
                        Object.assign(body, { body: json });
                    }
                    responseData = await GenericFunctions_1.jiraSoftwareCloudApiRequest.call(this, `/api/${apiVersion}/issue/${issueKey}/comment`, 'POST', body, qs);
                    returnData.push(responseData);
                }
            }
            if (operation === 'get') {
                for (let i = 0; i < length; i++) {
                    const issueKey = this.getNodeParameter('issueKey', i);
                    const commentId = this.getNodeParameter('commentId', i);
                    const options = this.getNodeParameter('options', i);
                    Object.assign(qs, options);
                    responseData = await GenericFunctions_1.jiraSoftwareCloudApiRequest.call(this, `/api/${apiVersion}/issue/${issueKey}/comment/${commentId}`, 'GET', {}, qs);
                    returnData.push(responseData);
                }
            }
            if (operation === 'getAll') {
                for (let i = 0; i < length; i++) {
                    const issueKey = this.getNodeParameter('issueKey', i);
                    const returnAll = this.getNodeParameter('returnAll', i);
                    const options = this.getNodeParameter('options', i);
                    const body = {};
                    Object.assign(qs, options);
                    if (returnAll) {
                        responseData = await GenericFunctions_1.jiraSoftwareCloudApiRequestAllItems.call(this, 'comments', `/api/${apiVersion}/issue/${issueKey}/comment`, 'GET', body, qs);
                    }
                    else {
                        const limit = this.getNodeParameter('limit', i);
                        body.maxResults = limit;
                        responseData = await GenericFunctions_1.jiraSoftwareCloudApiRequest.call(this, `/api/${apiVersion}/issue/${issueKey}/comment`, 'GET', body, qs);
                        responseData = responseData.comments;
                    }
                    returnData.push.apply(returnData, responseData);
                }
            }
            if (operation === 'remove') {
                for (let i = 0; i < length; i++) {
                    const issueKey = this.getNodeParameter('issueKey', i);
                    const commentId = this.getNodeParameter('commentId', i);
                    responseData = await GenericFunctions_1.jiraSoftwareCloudApiRequest.call(this, `/api/${apiVersion}/issue/${issueKey}/comment/${commentId}`, 'DELETE', {}, qs);
                    returnData.push({ success: true });
                }
            }
            if (operation === 'update') {
                for (let i = 0; i < length; i++) {
                    const issueKey = this.getNodeParameter('issueKey', i);
                    const commentId = this.getNodeParameter('commentId', i);
                    const options = this.getNodeParameter('options', i);
                    const jsonParameters = this.getNodeParameter('jsonParameters', 0);
                    const body = {};
                    if (options.expand) {
                        qs.expand = options.expand;
                        delete options.expand;
                    }
                    Object.assign(qs, options);
                    if (jsonParameters === false) {
                        const comment = this.getNodeParameter('comment', i);
                        if (jiraVersion === 'server') {
                            Object.assign(body, { body: comment });
                        }
                        else {
                            Object.assign(body, {
                                body: {
                                    type: 'doc',
                                    version: 1,
                                    content: [
                                        {
                                            type: 'paragraph',
                                            content: [
                                                {
                                                    type: 'text',
                                                    text: comment,
                                                },
                                            ],
                                        },
                                    ],
                                },
                            });
                        }
                    }
                    else {
                        const commentJson = this.getNodeParameter('commentJson', i);
                        const json = GenericFunctions_1.validateJSON(commentJson);
                        if (json === '') {
                            throw new n8n_workflow_1.NodeOperationError(this.getNode(), 'Document Format must be a valid JSON');
                        }
                        Object.assign(body, { body: json });
                    }
                    responseData = await GenericFunctions_1.jiraSoftwareCloudApiRequest.call(this, `/api/${apiVersion}/issue/${issueKey}/comment/${commentId}`, 'PUT', body, qs);
                    returnData.push(responseData);
                }
            }
        }
        if (resource === 'user') {
            const apiVersion = jiraVersion === 'server' ? '2' : '3';
            if (operation === 'create') {
                for (let i = 0; i < length; i++) {
                    const body = {
                        name: this.getNodeParameter('username', i),
                        emailAddress: this.getNodeParameter('emailAddress', i),
                        displayName: this.getNodeParameter('displayName', i),
                    };
                    const additionalFields = this.getNodeParameter('additionalFields', i);
                    Object.assign(body, additionalFields);
                    responseData = await GenericFunctions_1.jiraSoftwareCloudApiRequest.call(this, `/api/${apiVersion}/user`, 'POST', body, {});
                    returnData.push(responseData);
                }
            }
            else if (operation === 'delete') {
                for (let i = 0; i < length; i++) {
                    qs.accountId = this.getNodeParameter('accountId', i);
                    responseData = await GenericFunctions_1.jiraSoftwareCloudApiRequest.call(this, `/api/${apiVersion}/user`, 'DELETE', {}, qs);
                    returnData.push({ success: true });
                }
            }
            else if (operation === 'get') {
                for (let i = 0; i < length; i++) {
                    qs.accountId = this.getNodeParameter('accountId', i);
                    const { expand } = this.getNodeParameter('additionalFields', i);
                    if (expand) {
                        qs.expand = expand.join(',');
                    }
                    responseData = await GenericFunctions_1.jiraSoftwareCloudApiRequest.call(this, `/api/${apiVersion}/user`, 'GET', {}, qs);
                    returnData.push(responseData);
                }
            }
        }
        if (resource === 'issueAttachment' && (operation === 'getAll' || operation === 'get')) {
            return this.prepareOutputData(returnData);
        }
        else {
            return [this.helpers.returnJsonArray(returnData)];
        }
    }
}
exports.Jira = Jira;
//# sourceMappingURL=Jira.node.js.map