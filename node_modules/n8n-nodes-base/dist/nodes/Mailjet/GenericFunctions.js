"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.mailjetApiRequestAllItems = exports.mailjetApiRequest = void 0;
const n8n_workflow_1 = require("n8n-workflow");
async function mailjetApiRequest(method, resource, body = {}, qs = {}, uri, option = {}) {
    const emailApiCredentials = await this.getCredentials('mailjetEmailApi');
    let options = {
        headers: {
            Accept: 'application/json',
            'Content-Type': 'application/json',
        },
        method,
        qs,
        body,
        uri: uri || `https://api.mailjet.com${resource}`,
        json: true,
    };
    options = Object.assign({}, options, option);
    if (Object.keys(options.body).length === 0) {
        delete options.body;
    }
    if (emailApiCredentials !== undefined) {
        const base64Credentials = Buffer.from(`${emailApiCredentials.apiKey}:${emailApiCredentials.secretKey}`).toString('base64');
        options.headers['Authorization'] = `Basic ${base64Credentials}`;
    }
    else {
        const smsApiCredentials = await this.getCredentials('mailjetSmsApi');
        options.headers['Authorization'] = `Bearer ${smsApiCredentials.token}`;
    }
    try {
        return await this.helpers.request(options);
    }
    catch (error) {
        throw new n8n_workflow_1.NodeApiError(this.getNode(), error);
    }
}
exports.mailjetApiRequest = mailjetApiRequest;
async function mailjetApiRequestAllItems(method, endpoint, body = {}, query = {}) {
    const returnData = [];
    let responseData;
    query.Limit = 1000;
    query.Offset = 0;
    do {
        responseData = await mailjetApiRequest.call(this, method, endpoint, body, query, undefined, { resolveWithFullResponse: true });
        returnData.push.apply(returnData, responseData.body);
        query.Offset = query.Offset + query.Limit;
    } while (responseData.length !== 0);
    return returnData;
}
exports.mailjetApiRequestAllItems = mailjetApiRequestAllItems;
//# sourceMappingURL=GenericFunctions.js.map