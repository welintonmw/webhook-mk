"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Beeminder = void 0;
const n8n_workflow_1 = require("n8n-workflow");
const Beeminder_node_functions_1 = require("./Beeminder.node.functions");
const GenericFunctions_1 = require("./GenericFunctions");
const moment = require("moment-timezone");
class Beeminder {
    constructor() {
        this.description = {
            displayName: 'Beeminder',
            name: 'beeminder',
            group: ['output'],
            version: 1,
            description: 'Consume Beeminder API',
            subtitle: '={{$parameter["operation"] + ": " + $parameter["resource"]}}',
            defaults: {
                name: 'Beeminder',
                color: '#FFCB06',
            },
            icon: 'file:beeminder.png',
            inputs: ['main'],
            outputs: ['main'],
            credentials: [
                {
                    name: 'beeminderApi',
                    required: true,
                },
            ],
            properties: [
                {
                    displayName: 'Resource',
                    name: 'resource',
                    type: 'options',
                    required: true,
                    options: [
                        {
                            name: 'Datapoint',
                            value: 'datapoint',
                        },
                    ],
                    default: 'datapoint',
                    description: 'The resource to operate on.',
                },
                {
                    displayName: 'Operation',
                    name: 'operation',
                    type: 'options',
                    options: [
                        {
                            name: 'Create',
                            value: 'create',
                            description: 'Create datapoint for goal.',
                        },
                        {
                            name: 'Delete',
                            value: 'delete',
                            description: 'Delete a datapoint.',
                        },
                        {
                            name: 'Get All',
                            value: 'getAll',
                            description: 'Get all datapoints for a goal.',
                        },
                        {
                            name: 'Update',
                            value: 'update',
                            description: 'Update a datapoint.',
                        },
                    ],
                    default: 'create',
                    description: 'The operation to perform.',
                    required: true,
                },
                {
                    displayName: 'Goal Name',
                    name: 'goalName',
                    type: 'options',
                    typeOptions: {
                        loadOptionsMethod: 'getGoals',
                    },
                    displayOptions: {
                        show: {
                            resource: [
                                'datapoint',
                            ],
                        },
                    },
                    default: '',
                    description: 'The name of the goal.',
                    required: true,
                },
                {
                    displayName: 'Return All',
                    name: 'returnAll',
                    type: 'boolean',
                    displayOptions: {
                        show: {
                            operation: [
                                'getAll',
                            ],
                            resource: [
                                'datapoint',
                            ],
                        },
                    },
                    default: false,
                    description: 'If all results should be returned or only up to a given limit.',
                },
                {
                    displayName: 'Limit',
                    name: 'limit',
                    type: 'number',
                    displayOptions: {
                        show: {
                            operation: [
                                'getAll',
                            ],
                            resource: [
                                'datapoint',
                            ],
                            returnAll: [
                                false,
                            ],
                        },
                    },
                    typeOptions: {
                        minValue: 1,
                        maxValue: 300,
                    },
                    default: 30,
                    description: 'How many results to return.',
                },
                {
                    displayName: 'Value',
                    name: 'value',
                    type: 'number',
                    default: 1,
                    placeholder: '',
                    description: 'Datapoint value to send.',
                    displayOptions: {
                        show: {
                            resource: [
                                'datapoint',
                            ],
                            operation: [
                                'create',
                            ],
                        },
                    },
                    required: true,
                },
                {
                    displayName: 'Datapoint ID',
                    name: 'datapointId',
                    type: 'string',
                    default: '',
                    description: 'Datapoint id',
                    displayOptions: {
                        show: {
                            operation: [
                                'update',
                                'delete',
                            ],
                        },
                    },
                    required: true,
                },
                {
                    displayName: 'Additional Fields',
                    name: 'additionalFields',
                    type: 'collection',
                    placeholder: 'Add Field',
                    default: {},
                    displayOptions: {
                        show: {
                            resource: [
                                'datapoint',
                            ],
                            operation: [
                                'create',
                            ],
                        },
                    },
                    options: [
                        {
                            displayName: 'Comment',
                            name: 'comment',
                            type: 'string',
                            default: '',
                            description: 'Comment',
                        },
                        {
                            displayName: 'Timestamp',
                            name: 'timestamp',
                            type: 'dateTime',
                            default: '',
                            placeholder: '',
                            description: 'Defaults to "now" if none is passed in, or the existing timestamp if the datapoint is being updated rather than created.',
                        },
                        {
                            displayName: 'Request ID',
                            name: 'requestId',
                            type: 'string',
                            default: '',
                            placeholder: '',
                            description: 'String to uniquely identify a datapoint.',
                        },
                    ],
                },
                {
                    displayName: 'Options',
                    name: 'options',
                    type: 'collection',
                    placeholder: 'Add field',
                    default: {},
                    displayOptions: {
                        show: {
                            resource: [
                                'datapoint',
                            ],
                            operation: [
                                'getAll',
                            ],
                        },
                    },
                    options: [
                        {
                            displayName: 'Sort',
                            name: 'sort',
                            type: 'string',
                            default: 'id',
                            placeholder: '',
                            description: 'Attribute to sort on.',
                        },
                    ],
                },
                {
                    displayName: 'Update Fields',
                    name: 'updateFields',
                    type: 'collection',
                    placeholder: 'Add Field',
                    default: {},
                    displayOptions: {
                        show: {
                            resource: [
                                'datapoint',
                            ],
                            operation: [
                                'update',
                            ],
                        },
                    },
                    options: [
                        {
                            displayName: 'Value',
                            name: 'value',
                            type: 'number',
                            default: 1,
                            placeholder: '',
                            description: 'Datapoint value to send.',
                        },
                        {
                            displayName: 'Comment',
                            name: 'comment',
                            type: 'string',
                            default: '',
                            description: 'Comment',
                        },
                        {
                            displayName: 'Timestamp',
                            name: 'timestamp',
                            type: 'dateTime',
                            default: '',
                            placeholder: '',
                            description: 'Defaults to "now" if none is passed in, or the existing timestamp if the datapoint is being updated rather than created.',
                        },
                    ],
                },
            ],
        };
        this.methods = {
            loadOptions: {
                async getGoals() {
                    const credentials = await this.getCredentials('beeminderApi');
                    if (credentials === undefined) {
                        throw new n8n_workflow_1.NodeOperationError(this.getNode(), 'No credentials got returned!');
                    }
                    const endpoint = `/users/${credentials.user}/goals.json`;
                    const returnData = [];
                    const goals = await GenericFunctions_1.beeminderApiRequest.call(this, 'GET', endpoint);
                    for (const goal of goals) {
                        returnData.push({
                            name: goal.slug,
                            value: goal.slug,
                        });
                    }
                    return returnData;
                },
            },
        };
    }
    async execute() {
        const items = this.getInputData();
        const returnData = [];
        const length = items.length;
        const timezone = this.getTimezone();
        const resource = this.getNodeParameter('resource', 0);
        const operation = this.getNodeParameter('operation', 0);
        let results;
        for (let i = 0; i < length; i++) {
            try {
                if (resource === 'datapoint') {
                    const goalName = this.getNodeParameter('goalName', i);
                    if (operation === 'create') {
                        const value = this.getNodeParameter('value', i);
                        const options = this.getNodeParameter('additionalFields', i);
                        const data = {
                            value,
                            goalName,
                        };
                        Object.assign(data, options);
                        if (data.timestamp) {
                            data.timestamp = moment.tz(data.timestamp, timezone).unix();
                        }
                        results = await Beeminder_node_functions_1.createDatapoint.call(this, data);
                    }
                    else if (operation === 'getAll') {
                        const returnAll = this.getNodeParameter('returnAll', i);
                        const options = this.getNodeParameter('options', i);
                        const data = {
                            goalName,
                        };
                        Object.assign(data, options);
                        if (returnAll === false) {
                            data.count = this.getNodeParameter('limit', 0);
                        }
                        results = await Beeminder_node_functions_1.getAllDatapoints.call(this, data);
                    }
                    else if (operation === 'update') {
                        const datapointId = this.getNodeParameter('datapointId', i);
                        const options = this.getNodeParameter('updateFields', i);
                        const data = {
                            goalName,
                            datapointId,
                        };
                        Object.assign(data, options);
                        if (data.timestamp) {
                            data.timestamp = moment.tz(data.timestamp, timezone).unix();
                        }
                        results = await Beeminder_node_functions_1.updateDatapoint.call(this, data);
                    }
                    else if (operation === 'delete') {
                        const datapointId = this.getNodeParameter('datapointId', i);
                        const data = {
                            goalName,
                            datapointId,
                        };
                        results = await Beeminder_node_functions_1.deleteDatapoint.call(this, data);
                    }
                }
            }
            catch (error) {
                if (this.continueOnFail()) {
                    returnData.push({ error: error.message });
                    continue;
                }
                throw error;
            }
            if (Array.isArray(results)) {
                returnData.push.apply(returnData, results);
            }
            else {
                returnData.push(results);
            }
        }
        return [this.helpers.returnJsonArray(returnData)];
    }
}
exports.Beeminder = Beeminder;
//# sourceMappingURL=Beeminder.node.js.map