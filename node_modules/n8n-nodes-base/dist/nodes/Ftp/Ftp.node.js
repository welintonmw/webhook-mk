"use strict";
var __asyncValues = (this && this.__asyncValues) || function (o) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var m = o[Symbol.asyncIterator], i;
    return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);
    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }
    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Ftp = void 0;
const n8n_core_1 = require("n8n-core");
const n8n_workflow_1 = require("n8n-workflow");
const path_1 = require("path");
const ftpClient = require("promise-ftp");
const sftpClient = require("ssh2-sftp-client");
class Ftp {
    constructor() {
        this.description = {
            displayName: 'FTP',
            name: 'ftp',
            icon: 'fa:server',
            group: ['input'],
            version: 1,
            subtitle: '={{$parameter["protocol"] + ": " + $parameter["operation"]}}',
            description: 'Transfers files via FTP or SFTP',
            defaults: {
                name: 'FTP',
                color: '#303050',
            },
            inputs: ['main'],
            outputs: ['main'],
            credentials: [
                {
                    name: 'ftp',
                    required: true,
                    displayOptions: {
                        show: {
                            protocol: [
                                'ftp',
                            ],
                        },
                    },
                },
                {
                    name: 'sftp',
                    required: true,
                    displayOptions: {
                        show: {
                            protocol: [
                                'sftp',
                            ],
                        },
                    },
                },
            ],
            properties: [
                {
                    displayName: 'Protocol',
                    name: 'protocol',
                    type: 'options',
                    options: [
                        {
                            name: 'FTP',
                            value: 'ftp',
                        },
                        {
                            name: 'SFTP',
                            value: 'sftp',
                        },
                    ],
                    default: 'ftp',
                    description: 'File transfer protocol.',
                },
                {
                    displayName: 'Operation',
                    name: 'operation',
                    type: 'options',
                    options: [
                        {
                            name: 'Delete',
                            value: 'delete',
                            description: 'Delete a file/folder.',
                        },
                        {
                            name: 'Download',
                            value: 'download',
                            description: 'Download a file.',
                        },
                        {
                            name: 'List',
                            value: 'list',
                            description: 'List folder content.',
                        },
                        {
                            name: 'Rename',
                            value: 'rename',
                            description: 'Rename/move oldPath to newPath.',
                        },
                        {
                            name: 'Upload',
                            value: 'upload',
                            description: 'Upload a file.',
                        },
                    ],
                    default: 'download',
                    description: 'Operation to perform.',
                },
                {
                    displayName: 'Path',
                    displayOptions: {
                        show: {
                            operation: [
                                'delete',
                            ],
                        },
                    },
                    name: 'path',
                    type: 'string',
                    default: '',
                    description: 'The file path of the file to delete. Has to contain the full path.',
                    required: true,
                },
                {
                    displayName: 'Options',
                    name: 'options',
                    type: 'collection',
                    placeholder: 'Add Option',
                    displayOptions: {
                        show: {
                            operation: [
                                'delete',
                            ],
                        },
                    },
                    default: {},
                    options: [
                        {
                            displayName: 'Folder',
                            name: 'folder',
                            type: 'boolean',
                            default: false,
                            description: 'When set to true, folders can be deleted.',
                            required: true,
                        },
                        {
                            displayName: 'Recursive',
                            displayOptions: {
                                show: {
                                    folder: [
                                        true,
                                    ],
                                },
                            },
                            name: 'recursive',
                            type: 'boolean',
                            default: false,
                            description: 'If true, remove all files and directories in target directory.',
                            required: true,
                        },
                    ],
                },
                {
                    displayName: 'Path',
                    displayOptions: {
                        show: {
                            operation: [
                                'download',
                            ],
                        },
                    },
                    name: 'path',
                    type: 'string',
                    default: '',
                    placeholder: '/documents/invoice.txt',
                    description: 'The file path of the file to download. Has to contain the full path.',
                    required: true,
                },
                {
                    displayName: 'Binary Property',
                    displayOptions: {
                        show: {
                            operation: [
                                'download',
                            ],
                        },
                    },
                    name: 'binaryPropertyName',
                    type: 'string',
                    default: 'data',
                    description: 'Object property name which holds binary data.',
                    required: true,
                },
                {
                    displayName: 'Old Path',
                    displayOptions: {
                        show: {
                            operation: [
                                'rename',
                            ],
                        },
                    },
                    name: 'oldPath',
                    type: 'string',
                    default: '',
                    description: 'The old path',
                    required: true,
                },
                {
                    displayName: 'New Path',
                    displayOptions: {
                        show: {
                            operation: [
                                'rename',
                            ],
                        },
                    },
                    name: 'newPath',
                    type: 'string',
                    default: '',
                    description: 'The new path',
                    required: true,
                },
                {
                    displayName: 'Path',
                    displayOptions: {
                        show: {
                            operation: [
                                'upload',
                            ],
                        },
                    },
                    name: 'path',
                    type: 'string',
                    default: '',
                    description: 'The file path of the file to upload. Has to contain the full path.',
                    required: true,
                },
                {
                    displayName: 'Binary Data',
                    displayOptions: {
                        show: {
                            operation: [
                                'upload',
                            ],
                        },
                    },
                    name: 'binaryData',
                    type: 'boolean',
                    default: true,
                    description: 'The text content of the file to upload.',
                },
                {
                    displayName: 'Binary Property',
                    displayOptions: {
                        show: {
                            operation: [
                                'upload',
                            ],
                            binaryData: [
                                true,
                            ],
                        },
                    },
                    name: 'binaryPropertyName',
                    type: 'string',
                    default: 'data',
                    description: 'Object property name which holds binary data.',
                    required: true,
                },
                {
                    displayName: 'File Content',
                    displayOptions: {
                        show: {
                            operation: [
                                'upload',
                            ],
                            binaryData: [
                                false,
                            ],
                        },
                    },
                    name: 'fileContent',
                    type: 'string',
                    default: '',
                    description: 'The text content of the file to upload.',
                },
                {
                    displayName: 'Path',
                    displayOptions: {
                        show: {
                            operation: [
                                'list',
                            ],
                        },
                    },
                    name: 'path',
                    type: 'string',
                    default: '/',
                    description: 'Path of directory to list contents of.',
                    required: true,
                },
                {
                    displayName: 'Recursive',
                    displayOptions: {
                        show: {
                            operation: [
                                'list',
                            ],
                        },
                    },
                    name: 'recursive',
                    type: 'boolean',
                    default: false,
                    description: 'Return object representing all directories / objects recursively found within SFTP server',
                    required: true,
                },
            ],
        };
    }
    async execute() {
        var e_1, _a;
        const items = this.getInputData();
        const returnItems = [];
        const qs = {};
        let responseData;
        const operation = this.getNodeParameter('operation', 0);
        let credentials = undefined;
        const protocol = this.getNodeParameter('protocol', 0);
        if (protocol === 'sftp') {
            credentials = await this.getCredentials('sftp');
        }
        else {
            credentials = await this.getCredentials('ftp');
        }
        try {
            if (credentials === undefined) {
                throw new n8n_workflow_1.NodeOperationError(this.getNode(), 'Failed to get credentials!');
            }
            let ftp;
            let sftp;
            if (protocol === 'sftp') {
                sftp = new sftpClient();
                await sftp.connect({
                    host: credentials.host,
                    port: credentials.port,
                    username: credentials.username,
                    password: credentials.password,
                    privateKey: credentials.privateKey,
                    passphrase: credentials.passphrase,
                });
            }
            else {
                ftp = new ftpClient();
                await ftp.connect({
                    host: credentials.host,
                    port: credentials.port,
                    user: credentials.username,
                    password: credentials.password,
                });
            }
            for (let i = 0; i < items.length; i++) {
                const newItem = {
                    json: items[i].json,
                    binary: {},
                };
                if (items[i].binary !== undefined) {
                    Object.assign(newItem.binary, items[i].binary);
                }
                items[i] = newItem;
                if (protocol === 'sftp') {
                    if (operation === 'list') {
                        const path = this.getNodeParameter('path', i);
                        const recursive = this.getNodeParameter('recursive', i);
                        if (recursive) {
                            responseData = await callRecursiveList(path, sftp, normalizeSFtpItem);
                            returnItems.push.apply(returnItems, this.helpers.returnJsonArray(responseData));
                        }
                        else {
                            responseData = await sftp.list(path);
                            responseData.forEach(item => normalizeSFtpItem(item, path));
                            returnItems.push.apply(returnItems, this.helpers.returnJsonArray(responseData));
                        }
                    }
                    if (operation === 'delete') {
                        const path = this.getNodeParameter('path', i);
                        const options = this.getNodeParameter('options', i);
                        if (options.folder === true) {
                            responseData = await sftp.rmdir(path, !!options.recursive);
                        }
                        else {
                            responseData = await sftp.delete(path);
                        }
                        returnItems.push({ json: { success: true } });
                    }
                    if (operation === 'rename') {
                        const oldPath = this.getNodeParameter('oldPath', i);
                        const newPath = this.getNodeParameter('newPath', i);
                        responseData = await sftp.rename(oldPath, newPath);
                        returnItems.push({ json: { success: true } });
                    }
                    if (operation === 'download') {
                        const path = this.getNodeParameter('path', i);
                        responseData = await sftp.get(path);
                        const dataPropertyNameDownload = this.getNodeParameter('binaryPropertyName', i);
                        const filePathDownload = this.getNodeParameter('path', i);
                        items[i].binary[dataPropertyNameDownload] = await this.helpers.prepareBinaryData(responseData, filePathDownload);
                        returnItems.push(items[i]);
                    }
                    if (operation === 'upload') {
                        const remotePath = this.getNodeParameter('path', i);
                        const dirPath = path_1.dirname(remotePath);
                        const dirExists = await sftp.exists(dirPath);
                        if (!dirExists) {
                            await sftp.mkdir(dirPath, true);
                        }
                        if (this.getNodeParameter('binaryData', i) === true) {
                            const item = items[i];
                            if (item.binary === undefined) {
                                throw new n8n_workflow_1.NodeOperationError(this.getNode(), 'No binary data exists on item!');
                            }
                            const propertyNameUpload = this.getNodeParameter('binaryPropertyName', i);
                            if (item.binary[propertyNameUpload] === undefined) {
                                throw new n8n_workflow_1.NodeOperationError(this.getNode(), `No binary data property "${propertyNameUpload}" does not exists on item!`);
                            }
                            const buffer = Buffer.from(item.binary[propertyNameUpload].data, n8n_core_1.BINARY_ENCODING);
                            await sftp.put(buffer, remotePath);
                        }
                        else {
                            const buffer = Buffer.from(this.getNodeParameter('fileContent', i), 'utf8');
                            await sftp.put(buffer, remotePath);
                        }
                        returnItems.push(items[i]);
                    }
                }
                if (protocol === 'ftp') {
                    if (operation === 'list') {
                        const path = this.getNodeParameter('path', i);
                        const recursive = this.getNodeParameter('recursive', i);
                        if (recursive) {
                            responseData = await callRecursiveList(path, ftp, normalizeFtpItem);
                            returnItems.push.apply(returnItems, this.helpers.returnJsonArray(responseData));
                        }
                        else {
                            responseData = await ftp.list(path);
                            responseData.forEach(item => normalizeFtpItem(item, path));
                            returnItems.push.apply(returnItems, this.helpers.returnJsonArray(responseData));
                        }
                    }
                    if (operation === 'delete') {
                        const path = this.getNodeParameter('path', i);
                        const options = this.getNodeParameter('options', i);
                        if (options.folder === true) {
                            responseData = await ftp.rmdir(path, !!options.recursive);
                        }
                        else {
                            responseData = await ftp.delete(path);
                        }
                        returnItems.push({ json: { success: true } });
                    }
                    if (operation === 'download') {
                        const path = this.getNodeParameter('path', i);
                        responseData = await ftp.get(path);
                        const chunks = [];
                        try {
                            for (var responseData_1 = (e_1 = void 0, __asyncValues(responseData)), responseData_1_1; responseData_1_1 = await responseData_1.next(), !responseData_1_1.done;) {
                                const chunk = responseData_1_1.value;
                                chunks.push(chunk);
                            }
                        }
                        catch (e_1_1) { e_1 = { error: e_1_1 }; }
                        finally {
                            try {
                                if (responseData_1_1 && !responseData_1_1.done && (_a = responseData_1.return)) await _a.call(responseData_1);
                            }
                            finally { if (e_1) throw e_1.error; }
                        }
                        responseData = Buffer.concat(chunks);
                        const dataPropertyNameDownload = this.getNodeParameter('binaryPropertyName', i);
                        const filePathDownload = this.getNodeParameter('path', i);
                        items[i].binary[dataPropertyNameDownload] = await this.helpers.prepareBinaryData(responseData, filePathDownload);
                        returnItems.push(items[i]);
                    }
                    if (operation === 'rename') {
                        const oldPath = this.getNodeParameter('oldPath', i);
                        const newPath = this.getNodeParameter('newPath', i);
                        responseData = await ftp.rename(oldPath, newPath);
                        returnItems.push({ json: { success: true } });
                    }
                    if (operation === 'upload') {
                        const remotePath = this.getNodeParameter('path', i);
                        const fileName = path_1.basename(remotePath);
                        const dirPath = remotePath.replace(fileName, '');
                        if (this.getNodeParameter('binaryData', i) === true) {
                            const item = items[i];
                            if (item.binary === undefined) {
                                throw new n8n_workflow_1.NodeOperationError(this.getNode(), 'No binary data exists on item!');
                            }
                            const propertyNameUpload = this.getNodeParameter('binaryPropertyName', i);
                            if (item.binary[propertyNameUpload] === undefined) {
                                throw new n8n_workflow_1.NodeOperationError(this.getNode(), `No binary data property "${propertyNameUpload}" does not exists on item!`);
                            }
                            const buffer = Buffer.from(item.binary[propertyNameUpload].data, n8n_core_1.BINARY_ENCODING);
                            try {
                                await ftp.put(buffer, remotePath);
                            }
                            catch (error) {
                                if (error.code === 553) {
                                    await ftp.mkdir(dirPath, true);
                                    await ftp.put(buffer, remotePath);
                                }
                                else {
                                    throw new n8n_workflow_1.NodeApiError(this.getNode(), error);
                                }
                            }
                        }
                        else {
                            const buffer = Buffer.from(this.getNodeParameter('fileContent', i), 'utf8');
                            try {
                                await ftp.put(buffer, remotePath);
                            }
                            catch (error) {
                                if (error.code === 553) {
                                    await ftp.mkdir(dirPath, true);
                                    await ftp.put(buffer, remotePath);
                                }
                                else {
                                    throw new n8n_workflow_1.NodeApiError(this.getNode(), error);
                                }
                            }
                        }
                        returnItems.push(items[i]);
                    }
                }
            }
            if (protocol === 'sftp') {
                await sftp.end();
            }
            else {
                await ftp.end();
            }
        }
        catch (error) {
            if (this.continueOnFail()) {
                return this.prepareOutputData([{ json: { error: error.message } }]);
            }
            throw error;
        }
        return [returnItems];
    }
}
exports.Ftp = Ftp;
function normalizeFtpItem(input, path, recursive = false) {
    const item = input;
    item.modifyTime = input.date;
    item.path = (!recursive) ? `${path}${path.endsWith('/') ? '' : '/'}${item.name}` : path;
    item.date = undefined;
}
function normalizeSFtpItem(input, path, recursive = false) {
    const item = input;
    item.accessTime = new Date(input.accessTime);
    item.modifyTime = new Date(input.modifyTime);
    item.path = (!recursive) ? `${path}${path.endsWith('/') ? '' : '/'}${item.name}` : path;
}
async function callRecursiveList(path, client, normalizeFunction) {
    const pathArray = [path];
    let currentPath = path;
    const directoryItems = [];
    let index = 0;
    do {
        const returnData = await client.list(pathArray[index]);
        returnData.map((item) => {
            if (pathArray[index].endsWith('/')) {
                currentPath = `${pathArray[index]}${item.name}`;
            }
            else {
                currentPath = `${pathArray[index]}/${item.name}`;
            }
            if (item.type === 'd') {
                pathArray.push(currentPath);
            }
            normalizeFunction(item, currentPath, true);
            directoryItems.push(item);
        });
        index++;
    } while (index <= pathArray.length - 1);
    return directoryItems;
}
//# sourceMappingURL=Ftp.node.js.map