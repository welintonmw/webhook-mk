"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.MqttTrigger = void 0;
const n8n_workflow_1 = require("n8n-workflow");
const mqtt = __importStar(require("mqtt"));
const utilities_1 = require("../../utils/utilities");
class MqttTrigger {
    constructor() {
        this.description = {
            displayName: 'MQTT Trigger',
            name: 'mqttTrigger',
            icon: 'file:mqtt.svg',
            group: ['trigger'],
            version: 1,
            description: 'Listens to MQTT events',
            eventTriggerDescription: '',
            defaults: {
                name: 'MQTT Trigger',
            },
            triggerPanel: {
                header: '',
                executionsHelp: {
                    inactive: "<b>While building your workflow</b>, click the 'listen' button, then trigger an MQTT event. This will trigger an execution, which will show up in this editor.<br /> <br /><b>Once you're happy with your workflow</b>, <a data-key='activate'>activate</a> it. Then every time a change is detected, the workflow will execute. These executions will show up in the <a data-key='executions'>executions list</a>, but not in the editor.",
                    active: "<b>While building your workflow</b>, click the 'listen' button, then trigger an MQTT event. This will trigger an execution, which will show up in this editor.<br /> <br /><b>Your workflow will also execute automatically</b>, since it's activated. Every time a change is detected, this node will trigger an execution. These executions will show up in the <a data-key='executions'>executions list</a>, but not in the editor.",
                },
                activationHint: "Once you’ve finished building your workflow, <a data-key='activate'>activate</a> it to have it also listen continuously (you just won’t see those executions here).",
            },
            inputs: [],
            outputs: ['main'],
            credentials: [
                {
                    name: 'mqtt',
                    required: true,
                },
            ],
            properties: [
                {
                    displayName: 'Topics',
                    name: 'topics',
                    type: 'string',
                    default: '',
                    description: 'Topics to subscribe to, multiple can be defined with comma. Wildcard characters are supported (+ - for single level and # - for multi level). By default all subscription used QoS=0. To set a different QoS, write the QoS desired after the topic preceded by a colom. For Example: topicA:1,topicB:2',
                },
                {
                    displayName: 'Options',
                    name: 'options',
                    type: 'collection',
                    placeholder: 'Add Option',
                    default: {},
                    options: [
                        {
                            displayName: 'JSON Parse Body',
                            name: 'jsonParseBody',
                            type: 'boolean',
                            default: false,
                            description: 'Whether to try parse the message to an object',
                        },
                        {
                            displayName: 'Only Message',
                            name: 'onlyMessage',
                            type: 'boolean',
                            default: false,
                            description: 'Whether to return only the message property',
                        },
                        {
                            displayName: 'Parallel Processing',
                            name: 'parallelProcessing',
                            type: 'boolean',
                            default: true,
                            description: 'Whether to process messages in parallel or by keeping the message in order',
                        },
                    ],
                },
            ],
        };
    }
    async trigger() {
        const credentials = await this.getCredentials('mqtt');
        const topics = this.getNodeParameter('topics').split(',');
        const topicsQoS = {};
        for (const data of topics) {
            const [topic, qos] = data.split(':');
            topicsQoS[topic] = qos ? { qos: parseInt(qos, 10) } : { qos: 0 };
        }
        const options = this.getNodeParameter('options');
        const parallelProcessing = this.getNodeParameter('options.parallelProcessing', true);
        if (!topics) {
            throw new n8n_workflow_1.NodeOperationError(this.getNode(), 'Topics are mandatory!');
        }
        const protocol = credentials.protocol || 'mqtt';
        const host = credentials.host;
        const brokerUrl = `${protocol}://${host}`;
        const port = credentials.port || 1883;
        const clientId = credentials.clientId || `mqttjs_${(0, n8n_workflow_1.randomString)(8).toLowerCase()}`;
        const clean = credentials.clean;
        const ssl = credentials.ssl;
        const ca = (0, utilities_1.formatPrivateKey)(credentials.ca);
        const cert = (0, utilities_1.formatPrivateKey)(credentials.cert);
        const key = (0, utilities_1.formatPrivateKey)(credentials.key);
        const rejectUnauthorized = credentials.rejectUnauthorized;
        let client;
        if (!ssl) {
            const clientOptions = {
                port,
                clean,
                clientId,
            };
            if (credentials.username && credentials.password) {
                clientOptions.username = credentials.username;
                clientOptions.password = credentials.password;
            }
            client = mqtt.connect(brokerUrl, clientOptions);
        }
        else {
            const clientOptions = {
                port,
                clean,
                clientId,
                ca,
                cert,
                key,
                rejectUnauthorized,
            };
            if (credentials.username && credentials.password) {
                clientOptions.username = credentials.username;
                clientOptions.password = credentials.password;
            }
            client = mqtt.connect(brokerUrl, clientOptions);
        }
        const manualTriggerFunction = async () => {
            await new Promise((resolve, reject) => {
                client.on('connect', () => {
                    client.subscribe(topicsQoS, (error, _granted) => {
                        if (error) {
                            reject(error);
                        }
                        client.on('message', async (topic, message) => {
                            let result = {};
                            message = message.toString();
                            if (options.jsonParseBody) {
                                try {
                                    message = JSON.parse(message.toString());
                                }
                                catch (e) { }
                            }
                            result.message = message;
                            result.topic = topic;
                            if (options.onlyMessage) {
                                result = [message];
                            }
                            let responsePromise;
                            if (!parallelProcessing) {
                                responsePromise = await this.helpers.createDeferredPromise();
                            }
                            this.emit([this.helpers.returnJsonArray([result])], undefined, responsePromise);
                            if (responsePromise) {
                                await responsePromise.promise();
                            }
                            resolve(true);
                        });
                    });
                });
                client.on('error', (error) => {
                    reject(error);
                });
            });
        };
        if (this.getMode() === 'trigger') {
            void manualTriggerFunction();
        }
        async function closeFunction() {
            client.end();
        }
        return {
            closeFunction,
            manualTriggerFunction,
        };
    }
}
exports.MqttTrigger = MqttTrigger;
//# sourceMappingURL=MqttTrigger.node.js.map