"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.FilterV2 = void 0;
const set_1 = __importDefault(require("lodash/set"));
class FilterV2 {
    constructor(baseDescription) {
        this.description = {
            ...baseDescription,
            version: 2,
            defaults: {
                name: 'Filter',
                color: '#229eff',
            },
            inputs: ['main'],
            outputs: ['main'],
            outputNames: ['Kept', 'Discarded'],
            parameterPane: 'wide',
            properties: [
                {
                    displayName: 'Conditions',
                    name: 'conditions',
                    placeholder: 'Add Condition',
                    type: 'filter',
                    default: {},
                    typeOptions: {
                        filter: {
                            caseSensitive: '={{!$parameter.options.ignoreCase}}',
                            typeValidation: '={{$parameter.options.looseTypeValidation ? "loose" : "strict"}}',
                        },
                    },
                },
                {
                    displayName: 'Options',
                    name: 'options',
                    type: 'collection',
                    placeholder: 'Add option',
                    default: {},
                    options: [
                        {
                            displayName: 'Ignore Case',
                            description: 'Whether to ignore letter case when evaluating conditions',
                            name: 'ignoreCase',
                            type: 'boolean',
                            default: true,
                        },
                        {
                            displayName: 'Less Strict Type Validation',
                            description: 'Whether to try casting value types based on the selected operator',
                            name: 'looseTypeValidation',
                            type: 'boolean',
                            default: true,
                        },
                    ],
                },
            ],
        };
    }
    async execute() {
        const keptItems = [];
        const discardedItems = [];
        this.getInputData().forEach((item, itemIndex) => {
            try {
                const options = this.getNodeParameter('options', itemIndex);
                let pass = false;
                try {
                    pass = this.getNodeParameter('conditions', itemIndex, false, {
                        extractValue: true,
                    });
                }
                catch (error) {
                    if (!options.looseTypeValidation) {
                        (0, set_1.default)(error, 'description', "Try changing the type of comparison. Alternatively you can enable 'Less Strict Type Validation' in the options.");
                    }
                    (0, set_1.default)(error, 'context.itemIndex', itemIndex);
                    (0, set_1.default)(error, 'node', this.getNode());
                    throw error;
                }
                if (item.pairedItem === undefined) {
                    item.pairedItem = { item: itemIndex };
                }
                if (pass) {
                    keptItems.push(item);
                }
                else {
                    discardedItems.push(item);
                }
            }
            catch (error) {
                if (this.continueOnFail(error)) {
                    discardedItems.push(item);
                }
                else {
                    throw error;
                }
            }
        });
        return [keptItems, discardedItems];
    }
}
exports.FilterV2 = FilterV2;
//# sourceMappingURL=FilterV2.node.js.map