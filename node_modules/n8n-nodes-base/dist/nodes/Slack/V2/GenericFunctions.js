"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.validateJSON = exports.getMessageContent = exports.slackApiRequestAllItems = exports.slackApiRequest = void 0;
const n8n_workflow_1 = require("n8n-workflow");
const get_1 = __importDefault(require("lodash/get"));
async function slackApiRequest(method, resource, body = {}, query = {}, headers = undefined, option = {}) {
    const authenticationMethod = this.getNodeParameter('authentication', 0, 'accessToken');
    let options = {
        method,
        headers: headers !== null && headers !== void 0 ? headers : {
            'Content-Type': 'application/json; charset=utf-8',
        },
        body,
        qs: query,
        uri: resource.startsWith('https') ? resource : `https://slack.com/api${resource}`,
        json: true,
    };
    options = Object.assign({}, options, option);
    if (Object.keys(body).length === 0) {
        delete options.body;
    }
    if (Object.keys(query).length === 0) {
        delete options.qs;
    }
    const oAuth2Options = {
        tokenType: 'Bearer',
        property: 'authed_user.access_token',
    };
    const credentialType = authenticationMethod === 'accessToken' ? 'slackApi' : 'slackOAuth2Api';
    const response = await this.helpers.requestWithAuthentication.call(this, credentialType, options, {
        oauth2: oAuth2Options,
    });
    if (response.ok === false) {
        if (response.error === 'paid_teams_only') {
            throw new n8n_workflow_1.NodeOperationError(this.getNode(), `Your current Slack plan does not include the resource '${this.getNodeParameter('resource', 0)}'`, {
                description: 'Hint: Upgrade to a Slack plan that includes the functionality you want to use.',
                level: 'warning',
            });
        }
        else if (response.error === 'missing_scope') {
            throw new n8n_workflow_1.NodeOperationError(this.getNode(), 'Your Slack credential is missing required Oauth Scopes', {
                description: `Add the following scope(s) to your Slack App: ${response.needed}`,
                level: 'warning',
            });
        }
        throw new n8n_workflow_1.NodeOperationError(this.getNode(), 'Slack error response: ' + JSON.stringify(response.error));
    }
    if (response.ts !== undefined) {
        Object.assign(response, { message_timestamp: response.ts });
        delete response.ts;
    }
    return response;
}
exports.slackApiRequest = slackApiRequest;
async function slackApiRequestAllItems(propertyName, method, endpoint, body = {}, query = {}) {
    var _a, _b, _c, _d;
    const returnData = [];
    let responseData;
    query.page = 1;
    if (endpoint.includes('files.list')) {
        query.count = 100;
    }
    else {
        query.limit = 100;
    }
    do {
        responseData = await slackApiRequest.call(this, method, endpoint, body, query);
        query.cursor = (0, get_1.default)(responseData, 'response_metadata.next_cursor');
        query.page++;
        returnData.push.apply(returnData, (_a = responseData[propertyName].matches) !== null && _a !== void 0 ? _a : responseData[propertyName]);
    } while ((((_b = responseData.response_metadata) === null || _b === void 0 ? void 0 : _b.next_cursor) !== undefined &&
        responseData.response_metadata.next_cursor !== '' &&
        responseData.response_metadata.next_cursor !== null) ||
        (((_c = responseData.paging) === null || _c === void 0 ? void 0 : _c.pages) !== undefined &&
            responseData.paging.page !== undefined &&
            responseData.paging.page < responseData.paging.pages) ||
        (((_d = responseData[propertyName].paging) === null || _d === void 0 ? void 0 : _d.pages) !== undefined &&
            responseData[propertyName].paging.page !== undefined &&
            responseData[propertyName].paging.page < responseData[propertyName].paging.pages));
    return returnData;
}
exports.slackApiRequestAllItems = slackApiRequestAllItems;
function getMessageContent(i, nodeVersion, instanceId) {
    var _a, _b;
    const includeLinkToWorkflow = this.getNodeParameter('otherOptions.includeLinkToWorkflow', i, nodeVersion >= 2.1 ? true : false);
    const { id } = this.getWorkflow();
    const automatedMessage = `_Automated with this <${this.getInstanceBaseUrl()}workflow/${id}?utm_source=n8n-internal&utm_medium=powered_by&utm_campaign=${encodeURIComponent('n8n-nodes-base.slack')}${instanceId ? '_' + instanceId : ''}|n8n workflow>_`;
    const messageType = this.getNodeParameter('messageType', i);
    let content = {};
    const text = this.getNodeParameter('text', i, '');
    switch (messageType) {
        case 'text':
            content = {
                text: includeLinkToWorkflow ? `${text}\n${automatedMessage}` : text,
            };
            break;
        case 'block':
            content = this.getNodeParameter('blocksUi', i, {}, { ensureType: 'object' });
            if (includeLinkToWorkflow && Array.isArray(content.blocks)) {
                content.blocks.push({
                    type: 'section',
                    text: {
                        type: 'mrkdwn',
                        text: automatedMessage,
                    },
                });
            }
            if (text) {
                content.text = text;
            }
            break;
        case 'attachment':
            const attachmentsUI = this.getNodeParameter('attachments', i);
            const attachments = [];
            for (const attachment of attachmentsUI) {
                if (attachment.fields !== undefined) {
                    if ((_a = attachment === null || attachment === void 0 ? void 0 : attachment.fields) === null || _a === void 0 ? void 0 : _a.item) {
                        attachment.fields = (_b = attachment === null || attachment === void 0 ? void 0 : attachment.fields) === null || _b === void 0 ? void 0 : _b.item;
                    }
                }
                attachments.push(attachment);
            }
            content = { attachments };
            if (includeLinkToWorkflow && Array.isArray(content.attachments)) {
                content.attachments.push({
                    text: automatedMessage,
                });
            }
            break;
        default:
            throw new n8n_workflow_1.NodeOperationError(this.getNode(), `The message type "${messageType}" is not known!`);
    }
    return content;
}
exports.getMessageContent = getMessageContent;
function validateJSON(json) {
    let result;
    try {
        result = JSON.parse(json);
    }
    catch (exception) {
        result = undefined;
    }
    return result;
}
exports.validateJSON = validateJSON;
//# sourceMappingURL=GenericFunctions.js.map