"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.formWebhook = exports.prepareFormData = void 0;
const n8n_workflow_1 = require("n8n-workflow");
const prepareFormData = (formTitle, formDescription, formSubmittedText, redirectUrl, formFields, testRun, instanceId, useResponseData, appendAttribution = true) => {
    var _a, _b, _c, _d;
    const validForm = formFields.length > 0;
    const utm_campaign = instanceId ? `&utm_campaign=${instanceId}` : '';
    const n8nWebsiteLink = `https://n8n.io/?utm_source=n8n-internal&utm_medium=form-trigger${utm_campaign}`;
    if (formSubmittedText === undefined) {
        formSubmittedText = 'Your response has been recorded';
    }
    const formData = {
        testRun,
        validForm,
        formTitle,
        formDescription,
        formSubmittedText,
        n8nWebsiteLink,
        formFields: [],
        useResponseData,
        appendAttribution,
    };
    if (redirectUrl) {
        if (!redirectUrl.includes('://')) {
            redirectUrl = `http://${redirectUrl}`;
        }
        formData.redirectUrl = redirectUrl;
    }
    if (!validForm) {
        return formData;
    }
    for (const [index, field] of formFields.entries()) {
        const { fieldType, requiredField, multiselect } = field;
        const input = {
            id: `field-${index}`,
            errorId: `error-field-${index}`,
            label: field.fieldLabel,
            inputRequired: requiredField ? 'form-required' : '',
        };
        if (multiselect) {
            input.isMultiSelect = true;
            input.multiSelectOptions =
                (_b = (_a = field.fieldOptions) === null || _a === void 0 ? void 0 : _a.values.map((e, i) => ({
                    id: `option${i}`,
                    label: e.option,
                }))) !== null && _b !== void 0 ? _b : [];
        }
        else if (fieldType === 'dropdown') {
            input.isSelect = true;
            const fieldOptions = (_d = (_c = field.fieldOptions) === null || _c === void 0 ? void 0 : _c.values) !== null && _d !== void 0 ? _d : [];
            input.selectOptions = fieldOptions.map((e) => e.option);
        }
        else if (fieldType === 'textarea') {
            input.isTextarea = true;
        }
        else {
            input.isInput = true;
            input.type = fieldType;
        }
        formData.formFields.push(input);
    }
    return formData;
};
exports.prepareFormData = prepareFormData;
const checkResponseModeConfiguration = (context) => {
    const responseMode = context.getNodeParameter('responseMode', 'onReceived');
    const connectedNodes = context.getChildNodes(context.getNode().name);
    const isRespondToWebhookConnected = connectedNodes.some((node) => node.type === 'n8n-nodes-base.respondToWebhook');
    if (!isRespondToWebhookConnected && responseMode === 'responseNode') {
        throw new n8n_workflow_1.NodeOperationError(context.getNode(), new Error('No Respond to Webhook node found in the workflow'), {
            description: 'Insert a Respond to Webhook node to your workflow to respond to the form submission or choose another option for the “Respond When” parameter',
        });
    }
    if (isRespondToWebhookConnected && responseMode !== 'responseNode') {
        throw new n8n_workflow_1.NodeOperationError(context.getNode(), new Error(`${context.getNode().name} node not correctly configured`), {
            description: 'Set the “Respond When” parameter to “Using Respond to Webhook Node” or remove the Respond to Webhook node',
        });
    }
};
async function formWebhook(context) {
    var _a, _b;
    const mode = context.getMode() === 'manual' ? 'test' : 'production';
    const formFields = context.getNodeParameter('formFields.values', []);
    const method = context.getRequestObject().method;
    checkResponseModeConfiguration(context);
    if (method === 'GET') {
        const formTitle = context.getNodeParameter('formTitle', '');
        const formDescription = context.getNodeParameter('formDescription', '');
        const instanceId = context.getInstanceId();
        const responseMode = context.getNodeParameter('responseMode', '');
        const options = context.getNodeParameter('options', {});
        let formSubmittedText;
        let redirectUrl;
        let appendAttribution = true;
        if (options.respondWithOptions) {
            const values = options.respondWithOptions.values;
            if (values.respondWith === 'text') {
                formSubmittedText = values.formSubmittedText;
            }
            if (values.respondWith === 'redirect') {
                redirectUrl = values.redirectUrl;
            }
        }
        else {
            formSubmittedText = options.formSubmittedText;
        }
        if (options.appendAttribution === false) {
            appendAttribution = false;
        }
        const useResponseData = responseMode === 'responseNode';
        const data = (0, exports.prepareFormData)(formTitle, formDescription, formSubmittedText, redirectUrl, formFields, mode === 'test', instanceId, useResponseData, appendAttribution);
        const res = context.getResponseObject();
        res.render('form-trigger', data);
        return {
            noWebhookResponse: true,
        };
    }
    const bodyData = (_a = context.getBodyData().data) !== null && _a !== void 0 ? _a : {};
    const returnData = {};
    for (const [index, field] of formFields.entries()) {
        const key = `field-${index}`;
        let value = (_b = bodyData[key]) !== null && _b !== void 0 ? _b : null;
        if (value === null)
            returnData[field.fieldLabel] = null;
        if (field.fieldType === 'number') {
            value = Number(value);
        }
        if (field.fieldType === 'text') {
            value = String(value).trim();
        }
        if (field.multiselect && typeof value === 'string') {
            value = (0, n8n_workflow_1.jsonParse)(value);
        }
        returnData[field.fieldLabel] = value;
    }
    returnData.submittedAt = new Date().toISOString();
    returnData.formMode = mode;
    const webhookResponse = { status: 200 };
    return {
        webhookResponse,
        workflowData: [context.helpers.returnJsonArray(returnData)],
    };
}
exports.formWebhook = formWebhook;
//# sourceMappingURL=utils.js.map