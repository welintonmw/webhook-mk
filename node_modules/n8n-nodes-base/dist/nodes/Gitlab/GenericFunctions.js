"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.gitlabApiRequestAllItems = exports.gitlabApiRequest = void 0;
const n8n_workflow_1 = require("n8n-workflow");
async function gitlabApiRequest(method, endpoint, body, query, option = {}) {
    const options = {
        method,
        headers: {},
        body,
        qs: query,
        uri: '',
        json: true,
    };
    if (Object.keys(option).length !== 0) {
        Object.assign(options, option);
    }
    if (query === undefined) {
        delete options.qs;
    }
    const authenticationMethod = this.getNodeParameter('authentication', 0);
    try {
        if (authenticationMethod === 'accessToken') {
            const credentials = await this.getCredentials('gitlabApi');
            if (credentials === undefined) {
                throw new n8n_workflow_1.NodeOperationError(this.getNode(), 'No credentials got returned!');
            }
            options.headers['Private-Token'] = `${credentials.accessToken}`;
            options.uri = `${credentials.server.replace(/\/$/, '')}/api/v4${endpoint}`;
            return await this.helpers.request(options);
        }
        else {
            const credentials = await this.getCredentials('gitlabOAuth2Api');
            if (credentials === undefined) {
                throw new n8n_workflow_1.NodeOperationError(this.getNode(), 'No credentials got returned!');
            }
            options.uri = `${credentials.server.replace(/\/$/, '')}/api/v4${endpoint}`;
            return await this.helpers.requestOAuth2.call(this, 'gitlabOAuth2Api', options);
        }
    }
    catch (error) {
        throw new n8n_workflow_1.NodeApiError(this.getNode(), error);
    }
}
exports.gitlabApiRequest = gitlabApiRequest;
async function gitlabApiRequestAllItems(method, endpoint, body = {}, query = {}) {
    const returnData = [];
    let responseData;
    query.per_page = 100;
    query.page = 1;
    do {
        responseData = await gitlabApiRequest.call(this, method, endpoint, body, query, { resolveWithFullResponse: true });
        query.page++;
        returnData.push.apply(returnData, responseData.body);
    } while (responseData.headers.link && responseData.headers.link.includes('next'));
    return returnData;
}
exports.gitlabApiRequestAllItems = gitlabApiRequestAllItems;
//# sourceMappingURL=GenericFunctions.js.map