"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.execute = exports.description = void 0;
const descriptions_1 = require("../../descriptions");
const transport_1 = require("../../transport");
const utilities_1 = require("../../../../utils/utilities");
const properties = [{ ...descriptions_1.observableRLC, name: 'id' }, descriptions_1.responderOptions];
const displayOptions = {
    show: {
        resource: ['observable'],
        operation: ['executeResponder'],
    },
};
exports.description = (0, utilities_1.updateDisplayOptions)(displayOptions, properties);
async function execute(i) {
    let responseData = [];
    const observableId = this.getNodeParameter('id', i);
    const responderId = this.getNodeParameter('responder', i);
    let body;
    let response;
    responseData = [];
    body = {
        responderId,
        objectId: observableId,
        objectType: 'case_artifact',
    };
    response = await transport_1.theHiveApiRequest.call(this, 'POST', '/connector/cortex/action', body);
    body = {
        query: [
            {
                _name: 'listAction',
            },
            {
                _name: 'filter',
                _and: [
                    {
                        _field: 'cortexId',
                        _value: response.cortexId,
                    },
                    {
                        _field: 'objectId',
                        _value: response.objectId,
                    },
                    {
                        _field: 'startDate',
                        _value: response.startDate,
                    },
                ],
            },
        ],
    };
    const qs = {};
    qs.name = 'log-actions';
    do {
        response = await transport_1.theHiveApiRequest.call(this, 'POST', '/v1/query', body, qs);
    } while (response.status === 'Waiting' || response.status === 'InProgress');
    responseData = response;
    const executionData = this.helpers.constructExecutionMetaData((0, utilities_1.wrapData)(responseData), {
        itemData: { item: i },
    });
    return executionData;
}
exports.execute = execute;
//# sourceMappingURL=executeResponder.operation.js.map