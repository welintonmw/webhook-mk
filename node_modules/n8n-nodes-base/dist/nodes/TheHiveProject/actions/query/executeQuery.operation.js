"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.execute = exports.description = void 0;
const n8n_workflow_1 = require("n8n-workflow");
const transport_1 = require("../../transport");
const utilities_1 = require("../../../../utils/utilities");
const properties = [
    {
        displayName: 'Query',
        name: 'queryJson',
        type: 'json',
        required: true,
        default: '=[\n  {\n    "_name": "listOrganisation"\n  }\n]',
        description: 'Search for objects with filtering and sorting capabilities',
        hint: 'The query should be an array of operations with the required selection and optional filtering, sorting, and pagination. See <a href="https://docs.strangebee.com/thehive/api-docs/#operation/Query%20API" target="_blank">Query API</a> for more information.',
        typeOptions: {
            rows: 10,
        },
    },
];
const displayOptions = {
    show: {
        resource: ['query'],
        operation: ['executeQuery'],
    },
};
exports.description = (0, utilities_1.updateDisplayOptions)(displayOptions, properties);
async function execute(i) {
    let responseData = [];
    const queryJson = this.getNodeParameter('queryJson', i);
    let query = {};
    if (typeof queryJson === 'object') {
        query = queryJson;
    }
    else {
        query = (0, n8n_workflow_1.jsonParse)(queryJson, {
            errorMessage: 'Query JSON must be a valid JSON object',
        });
    }
    if (query.query) {
        query = query.query;
    }
    if (!Array.isArray(query)) {
        throw new n8n_workflow_1.NodeOperationError(this.getNode(), 'The query should be an array of operations with the required selection and optional filtering, sorting, and pagination');
    }
    const body = {
        query,
    };
    responseData = await transport_1.theHiveApiRequest.call(this, 'POST', '/v1/query', body);
    if (typeof responseData !== 'object') {
        responseData = { queryResult: responseData };
    }
    const executionData = this.helpers.constructExecutionMetaData((0, utilities_1.wrapData)(responseData), {
        itemData: { item: i },
    });
    return executionData;
}
exports.execute = execute;
//# sourceMappingURL=executeQuery.operation.js.map