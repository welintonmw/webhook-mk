"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Wise = void 0;
const descriptions_1 = require("./descriptions");
const GenericFunctions_1 = require("./GenericFunctions");
const lodash_1 = require("lodash");
const moment = require("moment-timezone");
const uuid_1 = require("uuid");
class Wise {
    constructor() {
        this.description = {
            displayName: 'Wise',
            name: 'wise',
            icon: 'file:wise.svg',
            group: ['transform'],
            version: 1,
            subtitle: '={{$parameter["operation"] + ": " + $parameter["resource"]}}',
            description: 'Consume the Wise API',
            defaults: {
                name: 'Wise',
                color: '#37517e',
            },
            inputs: ['main'],
            outputs: ['main'],
            credentials: [
                {
                    name: 'wiseApi',
                    required: true,
                },
            ],
            properties: [
                {
                    displayName: 'Resource',
                    name: 'resource',
                    type: 'options',
                    options: [
                        {
                            name: 'Account',
                            value: 'account',
                        },
                        {
                            name: 'Exchange Rate',
                            value: 'exchangeRate',
                        },
                        {
                            name: 'Profile',
                            value: 'profile',
                        },
                        {
                            name: 'Recipient',
                            value: 'recipient',
                        },
                        {
                            name: 'Quote',
                            value: 'quote',
                        },
                        {
                            name: 'Transfer',
                            value: 'transfer',
                        },
                    ],
                    default: 'account',
                    description: 'Resource to consume',
                },
                ...descriptions_1.accountOperations,
                ...descriptions_1.accountFields,
                ...descriptions_1.exchangeRateOperations,
                ...descriptions_1.exchangeRateFields,
                ...descriptions_1.profileOperations,
                ...descriptions_1.profileFields,
                ...descriptions_1.quoteOperations,
                ...descriptions_1.quoteFields,
                ...descriptions_1.recipientOperations,
                ...descriptions_1.recipientFields,
                ...descriptions_1.transferOperations,
                ...descriptions_1.transferFields,
            ],
        };
        this.methods = {
            loadOptions: {
                async getBorderlessAccounts() {
                    const qs = {
                        profileId: this.getNodeParameter('profileId', 0),
                    };
                    const accounts = await GenericFunctions_1.wiseApiRequest.call(this, 'GET', 'v1/borderless-accounts', {}, qs);
                    return accounts.map(({ id, balances }) => ({
                        name: balances.map(({ currency }) => currency).join(' - '),
                        value: id,
                    }));
                },
                async getProfiles() {
                    const profiles = await GenericFunctions_1.wiseApiRequest.call(this, 'GET', 'v1/profiles');
                    return profiles.map(({ id, type }) => ({
                        name: type.charAt(0).toUpperCase() + type.slice(1),
                        value: id,
                    }));
                },
                async getRecipients() {
                    const qs = {
                        profileId: this.getNodeParameter('profileId', 0),
                    };
                    const recipients = await GenericFunctions_1.wiseApiRequest.call(this, 'GET', 'v1/accounts', {}, qs);
                    return recipients.map(({ id, accountHolderName }) => ({
                        name: accountHolderName,
                        value: id,
                    }));
                },
            },
        };
    }
    async execute() {
        const items = this.getInputData();
        const resource = this.getNodeParameter('resource', 0);
        const operation = this.getNodeParameter('operation', 0);
        const timezone = this.getTimezone();
        let responseData;
        const returnData = [];
        let downloadReceipt = false;
        for (let i = 0; i < items.length; i++) {
            try {
                if (resource === 'account') {
                    if (operation === 'getBalances') {
                        const qs = {
                            profileId: this.getNodeParameter('profileId', i),
                        };
                        responseData = await GenericFunctions_1.wiseApiRequest.call(this, 'GET', 'v1/borderless-accounts', {}, qs);
                    }
                    else if (operation === 'getCurrencies') {
                        responseData = await GenericFunctions_1.wiseApiRequest.call(this, 'GET', 'v1/borderless-accounts/balance-currencies');
                    }
                    else if (operation === 'getStatement') {
                        const profileId = this.getNodeParameter('profileId', i);
                        const borderlessAccountId = this.getNodeParameter('borderlessAccountId', i);
                        const endpoint = `v3/profiles/${profileId}/borderless-accounts/${borderlessAccountId}/statement.json`;
                        const qs = {
                            currency: this.getNodeParameter('currency', i),
                        };
                        const { lineStyle, range } = this.getNodeParameter('additionalFields', i);
                        if (lineStyle !== undefined) {
                            qs.type = lineStyle;
                        }
                        if (range !== undefined) {
                            qs.intervalStart = moment.tz(range.rangeProperties.intervalStart, timezone).utc().format();
                            qs.intervalEnd = moment.tz(range.rangeProperties.intervalEnd, timezone).utc().format();
                        }
                        else {
                            qs.intervalStart = moment().subtract(1, 'months').utc().format();
                            qs.intervalEnd = moment().utc().format();
                        }
                        responseData = await GenericFunctions_1.wiseApiRequest.call(this, 'GET', endpoint, {}, qs);
                    }
                }
                else if (resource === 'exchangeRate') {
                    if (operation === 'get') {
                        const qs = {
                            source: this.getNodeParameter('source', i),
                            target: this.getNodeParameter('target', i),
                        };
                        const { interval, range, time, } = this.getNodeParameter('additionalFields', i);
                        if (interval !== undefined) {
                            qs.group = interval;
                        }
                        if (time !== undefined) {
                            qs.time = time;
                        }
                        if (range !== undefined && time === undefined) {
                            qs.from = moment.tz(range.rangeProperties.from, timezone).utc().format();
                            qs.to = moment.tz(range.rangeProperties.to, timezone).utc().format();
                        }
                        else {
                            qs.from = moment().subtract(1, 'months').utc().format();
                            qs.to = moment().format();
                        }
                        responseData = await GenericFunctions_1.wiseApiRequest.call(this, 'GET', 'v1/rates', {}, qs);
                    }
                }
                else if (resource === 'profile') {
                    if (operation === 'get') {
                        const profileId = this.getNodeParameter('profileId', i);
                        responseData = await GenericFunctions_1.wiseApiRequest.call(this, 'GET', `v1/profiles/${profileId}`);
                    }
                    else if (operation === 'getAll') {
                        responseData = await GenericFunctions_1.wiseApiRequest.call(this, 'GET', 'v1/profiles');
                    }
                }
                else if (resource === 'recipient') {
                    if (operation === 'getAll') {
                        responseData = await GenericFunctions_1.wiseApiRequest.call(this, 'GET', 'v1/accounts');
                        const returnAll = this.getNodeParameter('returnAll', i);
                        if (!returnAll) {
                            const limit = this.getNodeParameter('limit', i);
                            responseData = responseData.slice(0, limit);
                        }
                    }
                }
                else if (resource === 'quote') {
                    if (operation === 'create') {
                        const body = {
                            profile: this.getNodeParameter('profileId', i),
                            sourceCurrency: this.getNodeParameter('sourceCurrency', i).toUpperCase(),
                            targetCurrency: this.getNodeParameter('targetCurrency', i).toUpperCase(),
                        };
                        const amountType = this.getNodeParameter('amountType', i);
                        if (amountType === 'source') {
                            body.sourceAmount = this.getNodeParameter('amount', i);
                        }
                        else if (amountType === 'target') {
                            body.targetAmount = this.getNodeParameter('amount', i);
                        }
                        responseData = await GenericFunctions_1.wiseApiRequest.call(this, 'POST', 'v2/quotes', body, {});
                    }
                    else if (operation === 'get') {
                        const quoteId = this.getNodeParameter('quoteId', i);
                        responseData = await GenericFunctions_1.wiseApiRequest.call(this, 'GET', `v2/quotes/${quoteId}`);
                    }
                }
                else if (resource === 'transfer') {
                    if (operation === 'create') {
                        const body = {
                            quoteUuid: this.getNodeParameter('quoteId', i),
                            targetAccount: this.getNodeParameter('targetAccountId', i),
                            customerTransactionId: uuid_1.v4(),
                        };
                        const { reference } = this.getNodeParameter('additionalFields', i);
                        if (reference !== undefined) {
                            body.details = { reference };
                        }
                        responseData = await GenericFunctions_1.wiseApiRequest.call(this, 'POST', 'v1/transfers', body, {});
                    }
                    else if (operation === 'delete') {
                        const transferId = this.getNodeParameter('transferId', i);
                        responseData = await GenericFunctions_1.wiseApiRequest.call(this, 'PUT', `v1/transfers/${transferId}/cancel`);
                    }
                    else if (operation === 'execute') {
                        const profileId = this.getNodeParameter('profileId', i);
                        const transferId = this.getNodeParameter('transferId', i);
                        const endpoint = `v3/profiles/${profileId}/transfers/${transferId}/payments`;
                        responseData = await GenericFunctions_1.wiseApiRequest.call(this, 'POST', endpoint, { type: 'BALANCE' }, {});
                        const { environment } = await this.getCredentials('wiseApi');
                        if (environment === 'test') {
                            for (const endpoint of ['processing', 'funds_converted', 'outgoing_payment_sent']) {
                                await GenericFunctions_1.wiseApiRequest.call(this, 'GET', `v1/simulation/transfers/${transferId}/${endpoint}`);
                            }
                        }
                    }
                    else if (operation === 'get') {
                        const transferId = this.getNodeParameter('transferId', i);
                        downloadReceipt = this.getNodeParameter('downloadReceipt', i);
                        if (downloadReceipt) {
                            responseData = await GenericFunctions_1.handleBinaryData.call(this, items, i, `v1/transfers/${transferId}/receipt.pdf`);
                        }
                        else {
                            responseData = await GenericFunctions_1.wiseApiRequest.call(this, 'GET', `v1/transfers/${transferId}`);
                        }
                    }
                    else if (operation === 'getAll') {
                        const qs = {
                            profile: this.getNodeParameter('profileId', i),
                        };
                        const filters = this.getNodeParameter('filters', i);
                        Object.keys(lodash_1.omit(filters, 'range')).forEach(key => {
                            qs[key] = filters[key];
                        });
                        if (filters.range !== undefined) {
                            qs.createdDateStart = moment(filters.range.rangeProperties.createdDateStart).format();
                            qs.createdDateEnd = moment(filters.range.rangeProperties.createdDateEnd).format();
                        }
                        else {
                            qs.createdDateStart = moment().subtract(1, 'months').format();
                            qs.createdDateEnd = moment().format();
                        }
                        const returnAll = this.getNodeParameter('returnAll', i);
                        if (!returnAll) {
                            qs.limit = this.getNodeParameter('limit', i);
                        }
                        responseData = await GenericFunctions_1.wiseApiRequest.call(this, 'GET', 'v1/transfers', {}, qs);
                    }
                }
            }
            catch (error) {
                if (this.continueOnFail()) {
                    returnData.push({ error: error.toString() });
                    continue;
                }
                throw error;
            }
            Array.isArray(responseData)
                ? returnData.push(...responseData)
                : returnData.push(responseData);
        }
        if (downloadReceipt && responseData !== undefined) {
            return this.prepareOutputData(responseData);
        }
        return [this.helpers.returnJsonArray(returnData)];
    }
}
exports.Wise = Wise;
//# sourceMappingURL=Wise.node.js.map