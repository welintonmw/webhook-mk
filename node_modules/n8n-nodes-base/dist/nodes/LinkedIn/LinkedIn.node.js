"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.LinkedIn = void 0;
const n8n_core_1 = require("n8n-core");
const n8n_workflow_1 = require("n8n-workflow");
const GenericFunctions_1 = require("./GenericFunctions");
const PostDescription_1 = require("./PostDescription");
class LinkedIn {
    constructor() {
        this.description = {
            displayName: 'LinkedIn',
            name: 'linkedIn',
            icon: 'file:linkedin.png',
            group: ['input'],
            version: 1,
            description: 'Consume LinkedIn API',
            defaults: {
                name: 'LinkedIn',
                color: '#0075b4',
            },
            inputs: ['main'],
            outputs: ['main'],
            credentials: [
                {
                    name: 'linkedInOAuth2Api',
                    required: true,
                },
            ],
            properties: [
                {
                    displayName: 'Resource',
                    name: 'resource',
                    type: 'options',
                    options: [
                        {
                            name: 'Post',
                            value: 'post',
                        },
                    ],
                    default: 'post',
                    description: 'The resource to consume',
                },
                ...PostDescription_1.postOperations,
                ...PostDescription_1.postFields,
            ],
        };
        this.methods = {
            loadOptions: {
                async getPersonUrn() {
                    const returnData = [];
                    const person = await GenericFunctions_1.linkedInApiRequest.call(this, 'GET', '/me', {});
                    returnData.push({ name: `${person.localizedFirstName} ${person.localizedLastName}`, value: person.id });
                    return returnData;
                },
            },
        };
    }
    async execute() {
        const items = this.getInputData();
        const returnData = [];
        let responseData;
        const resource = this.getNodeParameter('resource', 0);
        const operation = this.getNodeParameter('operation', 0);
        let body = {};
        for (let i = 0; i < items.length; i++) {
            try {
                if (resource === 'post') {
                    if (operation === 'create') {
                        const text = this.getNodeParameter('text', i);
                        const shareMediaCategory = this.getNodeParameter('shareMediaCategory', i);
                        const postAs = this.getNodeParameter('postAs', i);
                        const additionalFields = this.getNodeParameter('additionalFields', i);
                        let authorUrn = '';
                        let visibility = 'PUBLIC';
                        if (postAs === 'person') {
                            const personUrn = this.getNodeParameter('person', i);
                            visibility = additionalFields.visibility || 'PUBLIC';
                            authorUrn = `urn:li:person:${personUrn}`;
                        }
                        else {
                            const organizationUrn = this.getNodeParameter('organization', i);
                            authorUrn = `urn:li:organization:${organizationUrn}`;
                        }
                        let description = '';
                        let title = '';
                        let originalUrl = '';
                        if (shareMediaCategory === 'IMAGE') {
                            if (additionalFields.description) {
                                description = additionalFields.description;
                            }
                            if (additionalFields.title) {
                                title = additionalFields.title;
                            }
                            const registerRequest = {
                                registerUploadRequest: {
                                    recipes: [
                                        'urn:li:digitalmediaRecipe:feedshare-image',
                                    ],
                                    owner: authorUrn,
                                    serviceRelationships: [
                                        {
                                            relationshipType: 'OWNER',
                                            identifier: 'urn:li:userGeneratedContent',
                                        },
                                    ],
                                },
                            };
                            const registerObject = await GenericFunctions_1.linkedInApiRequest.call(this, 'POST', '/assets?action=registerUpload', registerRequest);
                            const uploadUrl = registerObject.value.uploadMechanism['com.linkedin.digitalmedia.uploading.MediaUploadHttpRequest'].uploadUrl;
                            const asset = registerObject.value.asset;
                            const item = items[i];
                            if (item.binary === undefined) {
                                throw new n8n_workflow_1.NodeOperationError(this.getNode(), 'No binary data exists on item!');
                            }
                            const propertyNameUpload = this.getNodeParameter('binaryPropertyName', i);
                            if (item.binary[propertyNameUpload] === undefined) {
                                throw new n8n_workflow_1.NodeOperationError(this.getNode(), `No binary data property "${propertyNameUpload}" does not exists on item!`);
                            }
                            const buffer = Buffer.from(item.binary[propertyNameUpload].data, n8n_core_1.BINARY_ENCODING);
                            await GenericFunctions_1.linkedInApiRequest.call(this, 'POST', uploadUrl, buffer, true);
                            body = {
                                author: authorUrn,
                                lifecycleState: 'PUBLISHED',
                                specificContent: {
                                    'com.linkedin.ugc.ShareContent': {
                                        shareCommentary: {
                                            text,
                                        },
                                        shareMediaCategory: 'IMAGE',
                                        media: [
                                            {
                                                status: 'READY',
                                                description: {
                                                    text: description,
                                                },
                                                media: asset,
                                                title: {
                                                    text: title,
                                                },
                                            },
                                        ],
                                    },
                                },
                                visibility: {
                                    'com.linkedin.ugc.MemberNetworkVisibility': visibility,
                                },
                            };
                        }
                        else if (shareMediaCategory === 'ARTICLE') {
                            const additionalFields = this.getNodeParameter('additionalFields', i);
                            if (additionalFields.description) {
                                description = additionalFields.description;
                            }
                            if (additionalFields.title) {
                                title = additionalFields.title;
                            }
                            if (additionalFields.originalUrl) {
                                originalUrl = additionalFields.originalUrl;
                            }
                            body = {
                                author: `${authorUrn}`,
                                lifecycleState: 'PUBLISHED',
                                specificContent: {
                                    'com.linkedin.ugc.ShareContent': {
                                        shareCommentary: {
                                            text,
                                        },
                                        shareMediaCategory,
                                        media: [
                                            {
                                                status: 'READY',
                                                description: {
                                                    text: description,
                                                },
                                                originalUrl,
                                                title: {
                                                    text: title,
                                                },
                                            },
                                        ],
                                    },
                                },
                                visibility: {
                                    'com.linkedin.ugc.MemberNetworkVisibility': visibility,
                                },
                            };
                        }
                        else {
                            body = {
                                author: authorUrn,
                                lifecycleState: 'PUBLISHED',
                                specificContent: {
                                    'com.linkedin.ugc.ShareContent': {
                                        shareCommentary: {
                                            text,
                                        },
                                        shareMediaCategory,
                                    },
                                },
                                visibility: {
                                    'com.linkedin.ugc.MemberNetworkVisibility': visibility,
                                },
                            };
                        }
                        const endpoint = '/ugcPosts';
                        responseData = await GenericFunctions_1.linkedInApiRequest.call(this, 'POST', endpoint, body);
                    }
                }
                if (Array.isArray(responseData)) {
                    returnData.push.apply(returnData, responseData);
                }
                else {
                    returnData.push(responseData);
                }
            }
            catch (error) {
                if (this.continueOnFail()) {
                    returnData.push({ error: error.message });
                    continue;
                }
                throw error;
            }
        }
        return [this.helpers.returnJsonArray(returnData)];
    }
}
exports.LinkedIn = LinkedIn;
//# sourceMappingURL=LinkedIn.node.js.map