"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.TelegramTrigger = void 0;
const GenericFunctions_1 = require("./GenericFunctions");
class TelegramTrigger {
    constructor() {
        this.description = {
            displayName: 'Telegram Trigger',
            name: 'telegramTrigger',
            icon: 'file:telegram.svg',
            group: ['trigger'],
            version: 1,
            subtitle: '=Updates: {{$parameter["updates"].join(", ")}}',
            description: 'Starts the workflow on a Telegram update',
            defaults: {
                name: 'Telegram Trigger',
                color: '#0088cc',
            },
            inputs: [],
            outputs: ['main'],
            credentials: [
                {
                    name: 'telegramApi',
                    required: true,
                },
            ],
            webhooks: [
                {
                    name: 'default',
                    httpMethod: 'POST',
                    responseMode: 'onReceived',
                    path: 'webhook',
                },
            ],
            properties: [
                {
                    displayName: 'Updates',
                    name: 'updates',
                    type: 'multiOptions',
                    options: [
                        {
                            name: '*',
                            value: '*',
                            description: 'All updates.',
                        },
                        {
                            name: 'message',
                            value: 'message',
                            description: 'Trigger on new incoming message of any kind — text, photo, sticker, etc..',
                        },
                        {
                            name: 'edited_message',
                            value: 'edited_message',
                            description: 'Trigger on new version of a channel post that is known to the bot and was edited.',
                        },
                        {
                            name: 'channel_post',
                            value: 'channel_post',
                            description: 'Trigger on new incoming channel post of any kind — text, photo, sticker, etc..',
                        },
                        {
                            name: 'edited_channel_post',
                            value: 'edited_channel_post',
                            description: 'Trigger on new version of a channel post that is known to the bot and was edited.',
                        },
                        {
                            name: 'inline_query',
                            value: 'inline_query',
                            description: 'Trigger on new incoming inline query.',
                        },
                        {
                            name: 'callback_query',
                            value: 'callback_query',
                            description: 'Trigger on new incoming callback query.',
                        },
                        {
                            name: 'shipping_query',
                            value: 'shipping_query',
                            description: 'Trigger on new incoming shipping query. Only for invoices with flexible price.',
                        },
                        {
                            name: 'pre_checkout_query',
                            value: 'pre_checkout_query',
                            description: 'Trigger on new incoming pre-checkout query. Contains full information about checkout.',
                        },
                        {
                            name: 'poll',
                            value: 'poll',
                            description: 'Trigger on new poll state. Bots receive only updates about stopped polls and polls, which are sent by the bot.',
                        },
                    ],
                    required: true,
                    default: [],
                    description: 'The update types to listen to.',
                },
                {
                    displayName: 'Additional Fields',
                    name: 'additionalFields',
                    type: 'collection',
                    placeholder: 'Add Field',
                    default: {},
                    options: [
                        {
                            displayName: 'Download Images/Files',
                            name: 'download',
                            type: 'boolean',
                            default: false,
                            description: `Telegram delivers the image in 3 sizes.<br>
						By default, just the larger image would be downloaded.<br>
						if you want to change the size set the field 'Image Size'`,
                        },
                        {
                            displayName: 'Image Size',
                            name: 'imageSize',
                            type: 'options',
                            displayOptions: {
                                show: {
                                    download: [
                                        true,
                                    ],
                                },
                            },
                            options: [
                                {
                                    name: 'Small',
                                    value: 'small',
                                },
                                {
                                    name: 'Medium',
                                    value: 'medium',
                                },
                                {
                                    name: 'Large',
                                    value: 'large',
                                },
                            ],
                            default: 'large',
                            description: 'The size of the image to be downloaded',
                        },
                    ],
                },
            ],
        };
        this.webhookMethods = {
            default: {
                async checkExists() {
                    const endpoint = 'getWebhookInfo';
                    const webhookReturnData = await GenericFunctions_1.apiRequest.call(this, 'POST', endpoint, {});
                    const webhookUrl = this.getNodeWebhookUrl('default');
                    if (webhookReturnData.result.url === webhookUrl) {
                        return true;
                    }
                    return false;
                },
                async create() {
                    const webhookUrl = this.getNodeWebhookUrl('default');
                    let allowedUpdates = this.getNodeParameter('updates');
                    if (allowedUpdates.includes('*')) {
                        allowedUpdates = [];
                    }
                    const endpoint = 'setWebhook';
                    const body = {
                        url: webhookUrl,
                        allowed_updates: allowedUpdates,
                    };
                    await GenericFunctions_1.apiRequest.call(this, 'POST', endpoint, body);
                    return true;
                },
                async delete() {
                    const endpoint = 'deleteWebhook';
                    const body = {};
                    try {
                        await GenericFunctions_1.apiRequest.call(this, 'POST', endpoint, body);
                    }
                    catch (error) {
                        return false;
                    }
                    return true;
                },
            },
        };
    }
    async webhook() {
        var _a, _b, _c;
        const credentials = await this.getCredentials('telegramApi');
        const bodyData = this.getBodyData();
        const additionalFields = this.getNodeParameter('additionalFields');
        if (additionalFields.download === true) {
            let imageSize = 'large';
            if ((bodyData.message && bodyData.message.photo && Array.isArray(bodyData.message.photo) || ((_a = bodyData.message) === null || _a === void 0 ? void 0 : _a.document))) {
                if (additionalFields.imageSize) {
                    imageSize = additionalFields.imageSize;
                }
                let fileId;
                if (bodyData.message.photo) {
                    let image = GenericFunctions_1.getImageBySize(bodyData.message.photo, imageSize);
                    if (image === undefined) {
                        image = bodyData.message.photo[0];
                    }
                    fileId = image.file_id;
                }
                else {
                    fileId = (_c = (_b = bodyData.message) === null || _b === void 0 ? void 0 : _b.document) === null || _c === void 0 ? void 0 : _c.file_id;
                }
                const { result: { file_path } } = await GenericFunctions_1.apiRequest.call(this, 'GET', `getFile?file_id=${fileId}`, {});
                const file = await GenericFunctions_1.apiRequest.call(this, 'GET', '', {}, {}, { json: false, encoding: null, uri: `https://api.telegram.org/file/bot${credentials.accessToken}/${file_path}`, resolveWithFullResponse: true });
                const data = Buffer.from(file.body);
                const fileName = file_path.split('/').pop();
                const binaryData = await this.helpers.prepareBinaryData(data, fileName);
                return {
                    workflowData: [
                        [
                            {
                                json: bodyData,
                                binary: {
                                    data: binaryData,
                                },
                            },
                        ],
                    ],
                };
            }
        }
        return {
            workflowData: [
                this.helpers.returnJsonArray([bodyData]),
            ],
        };
    }
}
exports.TelegramTrigger = TelegramTrigger;
//# sourceMappingURL=TelegramTrigger.node.js.map