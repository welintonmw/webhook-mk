"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.TogglTrigger = void 0;
const n8n_workflow_1 = require("n8n-workflow");
const moment = require("moment");
const GenericFunctions_1 = require("./GenericFunctions");
class TogglTrigger {
    constructor() {
        this.description = {
            displayName: 'Toggl Trigger',
            name: 'togglTrigger',
            icon: 'file:toggl.png',
            group: ['trigger'],
            version: 1,
            description: 'Starts the workflow when Toggl events occur',
            defaults: {
                name: 'Toggl',
                color: '#00FF00',
            },
            credentials: [
                {
                    name: 'togglApi',
                    required: true,
                },
            ],
            polling: true,
            inputs: [],
            outputs: ['main'],
            properties: [
                {
                    displayName: 'Event',
                    name: 'event',
                    type: 'options',
                    options: [
                        {
                            name: 'New Time Entry',
                            value: 'newTimeEntry',
                        },
                    ],
                    required: true,
                    default: 'newTimeEntry',
                },
            ],
        };
    }
    async poll() {
        const webhookData = this.getWorkflowStaticData('node');
        const event = this.getNodeParameter('event');
        let endpoint;
        if (event === 'newTimeEntry') {
            endpoint = '/time_entries';
        }
        else {
            throw new n8n_workflow_1.NodeOperationError(this.getNode(), `The defined event "${event}" is not supported`);
        }
        const qs = {};
        let timeEntries = [];
        qs.start_date = webhookData.lastTimeChecked;
        qs.end_date = moment().format();
        try {
            timeEntries = await GenericFunctions_1.togglApiRequest.call(this, 'GET', endpoint, {}, qs);
            webhookData.lastTimeChecked = qs.end_date;
        }
        catch (error) {
            throw new n8n_workflow_1.NodeApiError(this.getNode(), error);
        }
        if (Array.isArray(timeEntries) && timeEntries.length !== 0) {
            return [this.helpers.returnJsonArray(timeEntries)];
        }
        return null;
    }
}
exports.TogglTrigger = TogglTrigger;
//# sourceMappingURL=TogglTrigger.node.js.map