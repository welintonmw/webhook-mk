"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.invoiceNinjaApiRequestAllItems = exports.invoiceNinjaApiRequest = void 0;
const n8n_workflow_1 = require("n8n-workflow");
const lodash_1 = require("lodash");
async function invoiceNinjaApiRequest(method, endpoint, body = {}, query, uri) {
    const credentials = await this.getCredentials('invoiceNinjaApi');
    if (credentials === undefined) {
        throw new n8n_workflow_1.NodeOperationError(this.getNode(), 'No credentials got returned!');
    }
    const baseUrl = credentials.url || 'https://app.invoiceninja.com';
    const options = {
        headers: {
            Accept: 'application/json',
            'X-Ninja-Token': credentials.apiToken,
        },
        method,
        qs: query,
        uri: uri || `${baseUrl}/api/v1${endpoint}`,
        body,
        json: true,
    };
    try {
        return await this.helpers.request(options);
    }
    catch (error) {
        throw new n8n_workflow_1.NodeApiError(this.getNode(), error);
    }
}
exports.invoiceNinjaApiRequest = invoiceNinjaApiRequest;
async function invoiceNinjaApiRequestAllItems(propertyName, method, endpoint, body = {}, query = {}) {
    const returnData = [];
    let responseData;
    let uri;
    query.per_page = 100;
    do {
        responseData = await invoiceNinjaApiRequest.call(this, method, endpoint, body, query, uri);
        const next = lodash_1.get(responseData, 'meta.pagination.links.next');
        if (next) {
            uri = next;
        }
        returnData.push.apply(returnData, responseData[propertyName]);
    } while (responseData.meta !== undefined &&
        responseData.meta.pagination &&
        responseData.meta.pagination.links &&
        responseData.meta.pagination.links.next);
    return returnData;
}
exports.invoiceNinjaApiRequestAllItems = invoiceNinjaApiRequestAllItems;
//# sourceMappingURL=GenericFunctions.js.map