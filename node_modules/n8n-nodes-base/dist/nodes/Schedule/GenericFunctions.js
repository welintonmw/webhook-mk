"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.addFallbackValue = exports.convertToUnixFormat = exports.convertMonthToUnix = exports.recurencyCheck = void 0;
const moment_timezone_1 = __importDefault(require("moment-timezone"));
function recurencyCheck(recurrency, recurrencyRules, timezone) {
    const recurrencyRuleIndex = recurrency.index;
    const intervalSize = recurrency.intervalSize;
    const typeInterval = recurrency.typeInterval;
    const lastExecution = recurrencyRuleIndex !== undefined ? recurrencyRules[recurrencyRuleIndex] : undefined;
    if (intervalSize &&
        recurrencyRuleIndex !== undefined &&
        (typeInterval === 'weeks' || typeInterval === 'undefined')) {
        if (lastExecution === undefined ||
            moment_timezone_1.default.tz(timezone).week() === (intervalSize + lastExecution) % 52 ||
            moment_timezone_1.default.tz(timezone).week() === lastExecution) {
            recurrencyRules[recurrencyRuleIndex] = moment_timezone_1.default.tz(timezone).week();
            return true;
        }
    }
    else if (intervalSize && recurrencyRuleIndex !== undefined && typeInterval === 'days') {
        if (lastExecution === undefined ||
            moment_timezone_1.default.tz(timezone).dayOfYear() === (intervalSize + lastExecution) % 365) {
            recurrencyRules[recurrencyRuleIndex] = moment_timezone_1.default.tz(timezone).dayOfYear();
            return true;
        }
    }
    else if (intervalSize && recurrencyRuleIndex !== undefined && typeInterval === 'hours') {
        if (lastExecution === undefined ||
            moment_timezone_1.default.tz(timezone).hour() === (intervalSize + lastExecution) % 24) {
            recurrencyRules[recurrencyRuleIndex] = moment_timezone_1.default.tz(timezone).hour();
            return true;
        }
    }
    else if (intervalSize && recurrencyRuleIndex !== undefined && typeInterval === 'months') {
        if (lastExecution === undefined ||
            moment_timezone_1.default.tz(timezone).month() === (intervalSize + lastExecution) % 12) {
            recurrencyRules[recurrencyRuleIndex] = moment_timezone_1.default.tz(timezone).month();
            return true;
        }
    }
    else {
        return true;
    }
    return false;
}
exports.recurencyCheck = recurencyCheck;
function convertMonthToUnix(expression) {
    if (!isNaN(parseInt(expression)) || expression.includes('-') || expression.includes(',')) {
        let matches = expression.match(/([0-9])+/g);
        if (matches) {
            matches = matches.map((match) => parseInt(match) !== 0 ? String(parseInt(match) - 1) : match);
        }
        expression = (matches === null || matches === void 0 ? void 0 : matches.join(expression.includes('-') ? '-' : ',')) || '';
    }
    return expression;
}
exports.convertMonthToUnix = convertMonthToUnix;
function convertToUnixFormat(interval) {
    const expression = interval.expression.split(' ');
    if (expression.length === 5) {
        expression[3] = convertMonthToUnix(expression[3]);
        expression[4] = expression[4].replace('7', '0');
    }
    else if (expression.length === 6) {
        expression[4] = convertMonthToUnix(expression[4]);
        expression[5] = expression[5].replace('7', '0');
    }
    interval.expression = expression.join(' ');
}
exports.convertToUnixFormat = convertToUnixFormat;
const addFallbackValue = (enabled, fallback) => {
    if (enabled) {
        return (value) => {
            if (!value)
                return fallback;
            return value;
        };
    }
    return (value) => value;
};
exports.addFallbackValue = addFallbackValue;
//# sourceMappingURL=GenericFunctions.js.map