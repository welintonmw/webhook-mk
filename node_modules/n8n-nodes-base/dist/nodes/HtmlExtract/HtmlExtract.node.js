"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.HtmlExtract = void 0;
const cheerio = require("cheerio");
const n8n_workflow_1 = require("n8n-workflow");
const extractFunctions = {
    attribute: ($, valueData) => $.attr(valueData.attribute),
    html: ($, valueData) => $.html() || undefined,
    text: ($, valueData) => $.text(),
    value: ($, valueData) => $.val(),
};
function getValue($, valueData, options) {
    const value = extractFunctions[valueData.returnValue]($, valueData);
    if (options.trimValues === false || value === undefined) {
        return value;
    }
    return value.trim();
}
class HtmlExtract {
    constructor() {
        this.description = {
            displayName: 'HTML Extract',
            name: 'htmlExtract',
            icon: 'fa:cut',
            group: ['transform'],
            version: 1,
            subtitle: '={{$parameter["sourceData"] + ": " + $parameter["dataPropertyName"]}}',
            description: 'Extracts data from HTML',
            defaults: {
                name: 'HTML Extract',
                color: '#333377',
            },
            inputs: ['main'],
            outputs: ['main'],
            properties: [
                {
                    displayName: 'Source Data',
                    name: 'sourceData',
                    type: 'options',
                    options: [
                        {
                            name: 'Binary',
                            value: 'binary',
                        },
                        {
                            name: 'JSON',
                            value: 'json',
                        },
                    ],
                    default: 'json',
                    description: 'If HTML should be read from binary or json data.',
                },
                {
                    displayName: 'Binary Property',
                    name: 'dataPropertyName',
                    type: 'string',
                    displayOptions: {
                        show: {
                            sourceData: [
                                'binary',
                            ],
                        },
                    },
                    default: 'data',
                    required: true,
                    description: 'Name of the binary property in which the HTML to extract the data from can be found.',
                },
                {
                    displayName: 'JSON Property',
                    name: 'dataPropertyName',
                    type: 'string',
                    displayOptions: {
                        show: {
                            sourceData: [
                                'json',
                            ],
                        },
                    },
                    default: 'data',
                    required: true,
                    description: 'Name of the json property in which the HTML to extract the data from can be found.<br />The property can either contain a string or an array of strings.',
                },
                {
                    displayName: 'Extraction Values',
                    name: 'extractionValues',
                    placeholder: 'Add Value',
                    type: 'fixedCollection',
                    typeOptions: {
                        multipleValues: true,
                    },
                    description: 'The extraction values.',
                    default: {},
                    options: [
                        {
                            name: 'values',
                            displayName: 'Values',
                            values: [
                                {
                                    displayName: 'Key',
                                    name: 'key',
                                    type: 'string',
                                    default: '',
                                    description: 'The key under which the extracted value should be saved.',
                                },
                                {
                                    displayName: 'CSS Selector',
                                    name: 'cssSelector',
                                    type: 'string',
                                    default: '',
                                    placeholder: '.price',
                                    description: 'The CSS selector to use.',
                                },
                                {
                                    displayName: 'Return Value',
                                    name: 'returnValue',
                                    type: 'options',
                                    options: [
                                        {
                                            name: 'Attribute',
                                            value: 'attribute',
                                            description: 'Get an attribute value like "class" from an element.',
                                        },
                                        {
                                            name: 'HTML',
                                            value: 'html',
                                            description: 'Get the HTML the element contains.',
                                        },
                                        {
                                            name: 'Text',
                                            value: 'text',
                                            description: 'Get only the text content of the element.',
                                        },
                                        {
                                            name: 'Value',
                                            value: 'value',
                                            description: 'Get value of an input, select or textarea.',
                                        },
                                    ],
                                    default: 'text',
                                    description: 'What kind of data should be returned.',
                                },
                                {
                                    displayName: 'Attribute',
                                    name: 'attribute',
                                    type: 'string',
                                    displayOptions: {
                                        show: {
                                            returnValue: [
                                                'attribute',
                                            ],
                                        },
                                    },
                                    default: '',
                                    placeholder: 'class',
                                    description: 'The name of the attribute to return the value off.',
                                },
                                {
                                    displayName: 'Return Array',
                                    name: 'returnArray',
                                    type: 'boolean',
                                    default: false,
                                    description: 'Returns the values as an array so if multiple ones get found they also get returned separately. If not set all will be returned as a single string.',
                                },
                            ],
                        },
                    ],
                },
                {
                    displayName: 'Options',
                    name: 'options',
                    type: 'collection',
                    placeholder: 'Add Option',
                    default: {},
                    options: [
                        {
                            displayName: 'Trim Values',
                            name: 'trimValues',
                            type: 'boolean',
                            default: true,
                            description: 'Removes automatically all spaces and newlines from the beginning and end of the values.',
                        },
                    ],
                },
            ],
        };
    }
    async execute() {
        const items = this.getInputData();
        const returnData = [];
        let item;
        for (let itemIndex = 0; itemIndex < items.length; itemIndex++) {
            try {
                const dataPropertyName = this.getNodeParameter('dataPropertyName', itemIndex);
                const extractionValues = this.getNodeParameter('extractionValues', itemIndex);
                const options = this.getNodeParameter('options', itemIndex, {});
                const sourceData = this.getNodeParameter('sourceData', itemIndex);
                item = items[itemIndex];
                let htmlArray = [];
                if (sourceData === 'json') {
                    if (item.json[dataPropertyName] === undefined) {
                        throw new n8n_workflow_1.NodeOperationError(this.getNode(), `No property named "${dataPropertyName}" exists!`);
                    }
                    htmlArray = item.json[dataPropertyName];
                }
                else {
                    if (item.binary === undefined) {
                        throw new n8n_workflow_1.NodeOperationError(this.getNode(), `No item does not contain binary data!`);
                    }
                    if (item.binary[dataPropertyName] === undefined) {
                        throw new n8n_workflow_1.NodeOperationError(this.getNode(), `No property named "${dataPropertyName}" exists!`);
                    }
                    htmlArray = Buffer.from(item.binary[dataPropertyName].data, 'base64').toString('utf8');
                }
                if (!Array.isArray(htmlArray)) {
                    htmlArray = [htmlArray];
                }
                for (const html of htmlArray) {
                    const $ = cheerio.load(html);
                    const newItem = {
                        json: {},
                    };
                    let htmlElement;
                    for (const valueData of extractionValues.values) {
                        htmlElement = $(valueData.cssSelector);
                        if (valueData.returnArray === true) {
                            newItem.json[valueData.key] = [];
                            htmlElement.each((i, el) => {
                                newItem.json[valueData.key].push(getValue($(el), valueData, options));
                            });
                        }
                        else {
                            newItem.json[valueData.key] = getValue(htmlElement, valueData, options);
                        }
                    }
                    returnData.push(newItem);
                }
            }
            catch (error) {
                if (this.continueOnFail()) {
                    returnData.push({ json: { error: error.message } });
                    continue;
                }
                throw error;
            }
        }
        return this.prepareOutputData(returnData);
    }
}
exports.HtmlExtract = HtmlExtract;
//# sourceMappingURL=HtmlExtract.node.js.map