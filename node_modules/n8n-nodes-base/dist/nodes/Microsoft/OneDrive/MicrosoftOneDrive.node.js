"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.MicrosoftOneDrive = void 0;
const n8n_workflow_1 = require("n8n-workflow");
const GenericFunctions_1 = require("./GenericFunctions");
const FileDescription_1 = require("./FileDescription");
const FolderDescription_1 = require("./FolderDescription");
class MicrosoftOneDrive {
    constructor() {
        this.description = {
            displayName: 'Microsoft OneDrive',
            name: 'microsoftOneDrive',
            icon: 'file:oneDrive.svg',
            group: ['input'],
            version: 1,
            subtitle: '={{$parameter["operation"] + ": " + $parameter["resource"]}}',
            description: 'Consume Microsoft OneDrive API',
            defaults: {
                name: 'Microsoft OneDrive',
                color: '#1d4bab',
            },
            inputs: ['main'],
            outputs: ['main'],
            credentials: [
                {
                    name: 'microsoftOneDriveOAuth2Api',
                    required: true,
                },
            ],
            properties: [
                {
                    displayName: 'Resource',
                    name: 'resource',
                    type: 'options',
                    options: [
                        {
                            name: 'File',
                            value: 'file',
                        },
                        {
                            name: 'Folder',
                            value: 'folder',
                        },
                    ],
                    default: 'file',
                    description: 'The resource to operate on.',
                },
                ...FileDescription_1.fileOperations,
                ...FileDescription_1.fileFields,
                ...FolderDescription_1.folderOperations,
                ...FolderDescription_1.folderFields,
            ],
        };
    }
    async execute() {
        const items = this.getInputData();
        const returnData = [];
        const length = items.length;
        const qs = {};
        let responseData;
        const resource = this.getNodeParameter('resource', 0);
        const operation = this.getNodeParameter('operation', 0);
        for (let i = 0; i < length; i++) {
            try {
                if (resource === 'file') {
                    if (operation === 'copy') {
                        const fileId = this.getNodeParameter('fileId', i);
                        const additionalFields = this.getNodeParameter('additionalFields', i);
                        const parentReference = this.getNodeParameter('parentReference', i);
                        const body = {};
                        if (parentReference) {
                            body.parentReference = Object.assign({}, parentReference);
                        }
                        if (additionalFields.name) {
                            body.name = additionalFields.name;
                        }
                        responseData = await GenericFunctions_1.microsoftApiRequest.call(this, 'POST', `/drive/items/${fileId}/copy`, body, {}, undefined, {}, { json: true, resolveWithFullResponse: true });
                        responseData = { location: responseData.headers.location };
                        returnData.push(responseData);
                    }
                    if (operation === 'delete') {
                        const fileId = this.getNodeParameter('fileId', i);
                        responseData = await GenericFunctions_1.microsoftApiRequest.call(this, 'DELETE', `/drive/items/${fileId}`);
                        responseData = { success: true };
                        returnData.push(responseData);
                    }
                    if (operation === 'download') {
                        const fileId = this.getNodeParameter('fileId', i);
                        const dataPropertyNameDownload = this.getNodeParameter('binaryPropertyName', i);
                        responseData = await GenericFunctions_1.microsoftApiRequest.call(this, 'GET', `/drive/items/${fileId}`);
                        const fileName = responseData.name;
                        if (responseData.file === undefined) {
                            throw new n8n_workflow_1.NodeApiError(this.getNode(), responseData, { message: 'The ID you provided does not belong to a file.' });
                        }
                        let mimeType;
                        if (responseData.file.mimeType) {
                            mimeType = responseData.file.mimeType;
                        }
                        responseData = await GenericFunctions_1.microsoftApiRequest.call(this, 'GET', `/drive/items/${fileId}/content`, {}, {}, undefined, {}, { encoding: null, resolveWithFullResponse: true });
                        const newItem = {
                            json: items[i].json,
                            binary: {},
                        };
                        if (mimeType === undefined && responseData.headers['content-type']) {
                            mimeType = responseData.headers['content-type'];
                        }
                        if (items[i].binary !== undefined) {
                            Object.assign(newItem.binary, items[i].binary);
                        }
                        items[i] = newItem;
                        const data = Buffer.from(responseData.body);
                        items[i].binary[dataPropertyNameDownload] = await this.helpers.prepareBinaryData(data, fileName, mimeType);
                    }
                    if (operation === 'get') {
                        const fileId = this.getNodeParameter('fileId', i);
                        responseData = await GenericFunctions_1.microsoftApiRequest.call(this, 'GET', `/drive/items/${fileId}`);
                        returnData.push(responseData);
                    }
                    if (operation === 'search') {
                        const query = this.getNodeParameter('query', i);
                        responseData = await GenericFunctions_1.microsoftApiRequestAllItems.call(this, 'value', 'GET', `/drive/root/search(q='${query}')`);
                        responseData = responseData.filter((item) => item.file);
                        returnData.push.apply(returnData, responseData);
                    }
                    if (operation === 'share') {
                        const fileId = this.getNodeParameter('fileId', i);
                        const type = this.getNodeParameter('type', i);
                        const scope = this.getNodeParameter('scope', i);
                        const body = {
                            type,
                            scope,
                        };
                        responseData = await GenericFunctions_1.microsoftApiRequest.call(this, 'POST', `/drive/items/${fileId}/createLink`, body);
                        returnData.push(responseData);
                    }
                    if (operation === 'upload') {
                        const parentId = this.getNodeParameter('parentId', i);
                        const isBinaryData = this.getNodeParameter('binaryData', i);
                        const fileName = this.getNodeParameter('fileName', i);
                        if (isBinaryData) {
                            const binaryPropertyName = this.getNodeParameter('binaryPropertyName', 0);
                            if (items[i].binary === undefined) {
                                throw new n8n_workflow_1.NodeOperationError(this.getNode(), 'No binary data exists on item!');
                            }
                            if (items[i].binary[binaryPropertyName] === undefined) {
                                throw new n8n_workflow_1.NodeOperationError(this.getNode(), `No binary data property "${binaryPropertyName}" does not exists on item!`);
                            }
                            const binaryData = items[i].binary[binaryPropertyName];
                            const body = await this.helpers.getBinaryDataBuffer(i, binaryPropertyName);
                            responseData = await GenericFunctions_1.microsoftApiRequest.call(this, 'PUT', `/drive/items/${parentId}:/${fileName || binaryData.fileName}:/content`, body, {}, undefined, { 'Content-Type': binaryData.mimeType, 'Content-length': body.length }, {});
                            returnData.push(JSON.parse(responseData));
                        }
                        else {
                            const body = this.getNodeParameter('fileContent', i);
                            if (fileName === '') {
                                throw new n8n_workflow_1.NodeOperationError(this.getNode(), 'File name must be set!');
                            }
                            responseData = await GenericFunctions_1.microsoftApiRequest.call(this, 'PUT', `/drive/items/${parentId}:/${fileName}:/content`, body, {}, undefined, { 'Content-Type': 'text/plain' });
                            returnData.push(responseData);
                        }
                    }
                }
                if (resource === 'folder') {
                    if (operation === 'create') {
                        const names = this.getNodeParameter('name', i).split('/').filter(s => s.trim() !== '');
                        const options = this.getNodeParameter('options', i);
                        let parentFolderId = options.parentFolderId ? options.parentFolderId : null;
                        for (const name of names) {
                            const body = {
                                name,
                                folder: {},
                            };
                            let endpoint = '/drive/root/children';
                            if (parentFolderId) {
                                endpoint = `/drive/items/${parentFolderId}/children`;
                            }
                            responseData = await GenericFunctions_1.microsoftApiRequest.call(this, 'POST', endpoint, body);
                            if (!responseData.id) {
                                break;
                            }
                            parentFolderId = responseData.id;
                        }
                        returnData.push(responseData);
                    }
                    if (operation === 'delete') {
                        const folderId = this.getNodeParameter('folderId', i);
                        responseData = await GenericFunctions_1.microsoftApiRequest.call(this, 'DELETE', `/drive/items/${folderId}`);
                        responseData = { success: true };
                        returnData.push(responseData);
                    }
                    if (operation === 'getChildren') {
                        const folderId = this.getNodeParameter('folderId', i);
                        responseData = await GenericFunctions_1.microsoftApiRequestAllItems.call(this, 'value', 'GET', `/drive/items/${folderId}/children`);
                        returnData.push.apply(returnData, responseData);
                    }
                    if (operation === 'search') {
                        const query = this.getNodeParameter('query', i);
                        responseData = await GenericFunctions_1.microsoftApiRequestAllItems.call(this, 'value', 'GET', `/drive/root/search(q='${query}')`);
                        responseData = responseData.filter((item) => item.folder);
                        returnData.push.apply(returnData, responseData);
                    }
                    if (operation === 'share') {
                        const folderId = this.getNodeParameter('folderId', i);
                        const type = this.getNodeParameter('type', i);
                        const scope = this.getNodeParameter('scope', i);
                        const body = {
                            type,
                            scope,
                        };
                        responseData = await GenericFunctions_1.microsoftApiRequest.call(this, 'POST', `/drive/items/${folderId}/createLink`, body);
                        returnData.push(responseData);
                    }
                }
            }
            catch (error) {
                if (this.continueOnFail()) {
                    if (resource === 'file' && operation === 'download') {
                        items[i].json = { error: error.message };
                    }
                    else {
                        returnData.push({ error: error.message });
                    }
                    continue;
                }
                throw error;
            }
        }
        if (resource === 'file' && operation === 'download') {
            return this.prepareOutputData(items);
        }
        else {
            return [this.helpers.returnJsonArray(returnData)];
        }
    }
}
exports.MicrosoftOneDrive = MicrosoftOneDrive;
//# sourceMappingURL=MicrosoftOneDrive.node.js.map