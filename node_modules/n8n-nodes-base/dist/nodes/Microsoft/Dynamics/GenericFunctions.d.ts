import { IExecuteFunctions, IExecuteSingleFunctions, ILoadOptionsFunctions } from 'n8n-core';
import { IDataObject, INodePropertyOptions } from 'n8n-workflow';
export declare function microsoftApiRequest(this: IExecuteFunctions | IExecuteSingleFunctions | ILoadOptionsFunctions, method: string, resource: string, body?: any, qs?: IDataObject, uri?: string, option?: IDataObject): Promise<any>;
export declare function microsoftApiRequestAllItems(this: IExecuteFunctions | ILoadOptionsFunctions, propertyName: string, method: string, endpoint: string, body?: any, query?: IDataObject): Promise<any>;
export declare function getPicklistOptions(this: ILoadOptionsFunctions, entityName: string, attributeName: string): Promise<INodePropertyOptions[]>;
export declare function getEntityFields(this: ILoadOptionsFunctions, entityName: string): Promise<IField[]>;
export declare function adjustAddresses(addresses: [{
    [key: string]: string;
}]): {
    [key: string]: any;
};
export declare function getAccountFields(): ({
    displayName: string;
    name: string;
    type: string;
    typeOptions: {
        loadOptionsMethod: string;
        multipleValues?: undefined;
    };
    default: string;
    description: string;
    placeholder?: undefined;
    options?: undefined;
    displayOptions?: undefined;
} | {
    displayName: string;
    name: string;
    type: string;
    typeOptions: {
        loadOptionsMethod: string;
        multipleValues?: undefined;
    };
    default: string;
    description?: undefined;
    placeholder?: undefined;
    options?: undefined;
    displayOptions?: undefined;
} | {
    displayName: string;
    name: string;
    type: string;
    default: {};
    typeOptions: {
        multipleValues: boolean;
        loadOptionsMethod?: undefined;
    };
    placeholder: string;
    options: {
        displayName: string;
        name: string;
        values: ({
            displayName: string;
            name: string;
            type: string;
            typeOptions: {
                loadOptionsMethod: string;
            };
            default: string;
        } | {
            displayName: string;
            name: string;
            type: string;
            default: string;
            typeOptions?: undefined;
        })[];
    }[];
    description?: undefined;
    displayOptions?: undefined;
} | {
    displayName: string;
    name: string;
    type: string;
    default: string;
    description: string;
    typeOptions?: undefined;
    placeholder?: undefined;
    options?: undefined;
    displayOptions?: undefined;
} | {
    displayName: string;
    name: string;
    type: string;
    default: string;
    displayOptions: {
        show: {
            '/resource': string[];
            '/operation': string[];
        };
    };
    description: string;
    typeOptions?: undefined;
    placeholder?: undefined;
    options?: undefined;
} | {
    displayName: string;
    name: string;
    type: string;
    default: number;
    description: string;
    typeOptions?: undefined;
    placeholder?: undefined;
    options?: undefined;
    displayOptions?: undefined;
})[];
export declare const sort: (a: {
    name: string;
}, b: {
    name: string;
}) => 1 | -1 | 0;
export interface IField {
    IsRetrievable: boolean;
    LogicalName: string;
    IsSearchable: string;
    IsValidODataAttribute: string;
    IsValidForRead: string;
    CanBeSecuredForRead: string;
    AttributeType: string;
    IsSortableEnabled: {
        Value: boolean;
    };
    DisplayName: {
        UserLocalizedLabel: {
            Label: string;
        };
    };
}
