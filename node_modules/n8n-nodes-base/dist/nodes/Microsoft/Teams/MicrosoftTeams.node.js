"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.MicrosoftTeams = void 0;
const GenericFunctions_1 = require("./GenericFunctions");
const ChannelDescription_1 = require("./ChannelDescription");
const ChannelMessageDescription_1 = require("./ChannelMessageDescription");
const TaskDescription_1 = require("./TaskDescription");
class MicrosoftTeams {
    constructor() {
        this.description = {
            displayName: 'Microsoft Teams',
            name: 'microsoftTeams',
            icon: 'file:teams.svg',
            group: ['input'],
            version: 1,
            subtitle: '={{$parameter["operation"] + ": " + $parameter["resource"]}}',
            description: 'Consume Microsoft Teams API',
            defaults: {
                name: 'Microsoft Teams',
                color: '#555cc7',
            },
            inputs: ['main'],
            outputs: ['main'],
            credentials: [
                {
                    name: 'microsoftTeamsOAuth2Api',
                    required: true,
                },
            ],
            properties: [
                {
                    displayName: 'Resource',
                    name: 'resource',
                    type: 'options',
                    options: [
                        {
                            name: 'Channel',
                            value: 'channel',
                        },
                        {
                            name: 'Channel Message (Beta)',
                            value: 'channelMessage',
                        },
                        {
                            name: 'Task',
                            value: 'task',
                        },
                    ],
                    default: 'channel',
                    description: 'The resource to operate on.',
                },
                ...ChannelDescription_1.channelOperations,
                ...ChannelDescription_1.channelFields,
                ...ChannelMessageDescription_1.channelMessageOperations,
                ...ChannelMessageDescription_1.channelMessageFields,
                ...TaskDescription_1.taskOperations,
                ...TaskDescription_1.taskFields,
            ],
        };
        this.methods = {
            loadOptions: {
                async getChannels() {
                    const returnData = [];
                    const teamId = this.getCurrentNodeParameter('teamId');
                    const { value } = await GenericFunctions_1.microsoftApiRequest.call(this, 'GET', `/v1.0/teams/${teamId}/channels`);
                    for (const channel of value) {
                        const channelName = channel.displayName;
                        const channelId = channel.id;
                        returnData.push({
                            name: channelName,
                            value: channelId,
                        });
                    }
                    return returnData;
                },
                async getTeams() {
                    const returnData = [];
                    const { value } = await GenericFunctions_1.microsoftApiRequest.call(this, 'GET', '/v1.0/me/joinedTeams');
                    for (const team of value) {
                        const teamName = team.displayName;
                        const teamId = team.id;
                        returnData.push({
                            name: teamName,
                            value: teamId,
                        });
                    }
                    return returnData;
                },
                async getGroups() {
                    const returnData = [];
                    const { value } = await GenericFunctions_1.microsoftApiRequest.call(this, 'GET', '/v1.0/groups');
                    for (const group of value) {
                        returnData.push({
                            name: group.mail,
                            value: group.id,
                        });
                    }
                    return returnData;
                },
                async getPlans() {
                    const returnData = [];
                    const groupId = this.getCurrentNodeParameter('groupId');
                    const { value } = await GenericFunctions_1.microsoftApiRequest.call(this, 'GET', `/v1.0/groups/${groupId}/planner/plans`);
                    for (const plan of value) {
                        returnData.push({
                            name: plan.title,
                            value: plan.id,
                        });
                    }
                    return returnData;
                },
                async getBuckets() {
                    const returnData = [];
                    const planId = this.getCurrentNodeParameter('planId');
                    const { value } = await GenericFunctions_1.microsoftApiRequest.call(this, 'GET', `/v1.0/planner/plans/${planId}/buckets`);
                    for (const bucket of value) {
                        returnData.push({
                            name: bucket.name,
                            value: bucket.id,
                        });
                    }
                    return returnData;
                },
                async getMembers() {
                    const returnData = [];
                    const groupId = this.getCurrentNodeParameter('groupId');
                    const { value } = await GenericFunctions_1.microsoftApiRequest.call(this, 'GET', `/v1.0/groups/${groupId}/members`);
                    for (const member of value) {
                        returnData.push({
                            name: member.displayName,
                            value: member.id,
                        });
                    }
                    return returnData;
                },
                async getLabels() {
                    const returnData = [];
                    const planId = this.getCurrentNodeParameter('planId');
                    const { categoryDescriptions } = await GenericFunctions_1.microsoftApiRequest.call(this, 'GET', `/v1.0/planner/plans/${planId}/details`);
                    for (const key of Object.keys(categoryDescriptions)) {
                        if (categoryDescriptions[key] !== null) {
                            returnData.push({
                                name: categoryDescriptions[key],
                                value: key,
                            });
                        }
                    }
                    return returnData;
                },
            },
        };
    }
    async execute() {
        const items = this.getInputData();
        const returnData = [];
        const length = items.length;
        const qs = {};
        let responseData;
        const resource = this.getNodeParameter('resource', 0);
        const operation = this.getNodeParameter('operation', 0);
        for (let i = 0; i < length; i++) {
            try {
                if (resource === 'channel') {
                    if (operation === 'create') {
                        const teamId = this.getNodeParameter('teamId', i);
                        const name = this.getNodeParameter('name', i);
                        const options = this.getNodeParameter('options', i);
                        const body = {
                            displayName: name,
                        };
                        if (options.description) {
                            body.description = options.description;
                        }
                        if (options.type) {
                            body.membershipType = options.type;
                        }
                        responseData = await GenericFunctions_1.microsoftApiRequest.call(this, 'POST', `/v1.0/teams/${teamId}/channels`, body);
                    }
                    if (operation === 'delete') {
                        const teamId = this.getNodeParameter('teamId', i);
                        const channelId = this.getNodeParameter('channelId', i);
                        responseData = await GenericFunctions_1.microsoftApiRequest.call(this, 'DELETE', `/v1.0/teams/${teamId}/channels/${channelId}`);
                        responseData = { success: true };
                    }
                    if (operation === 'get') {
                        const teamId = this.getNodeParameter('teamId', i);
                        const channelId = this.getNodeParameter('channelId', i);
                        responseData = await GenericFunctions_1.microsoftApiRequest.call(this, 'GET', `/v1.0/teams/${teamId}/channels/${channelId}`);
                    }
                    if (operation === 'getAll') {
                        const teamId = this.getNodeParameter('teamId', i);
                        const returnAll = this.getNodeParameter('returnAll', i);
                        if (returnAll) {
                            responseData = await GenericFunctions_1.microsoftApiRequestAllItems.call(this, 'value', 'GET', `/v1.0/teams/${teamId}/channels`);
                        }
                        else {
                            qs.limit = this.getNodeParameter('limit', i);
                            responseData = await GenericFunctions_1.microsoftApiRequestAllItems.call(this, 'value', 'GET', `/v1.0/teams/${teamId}/channels`, {});
                            responseData = responseData.splice(0, qs.limit);
                        }
                    }
                    if (operation === 'update') {
                        const teamId = this.getNodeParameter('teamId', i);
                        const channelId = this.getNodeParameter('channelId', i);
                        const updateFields = this.getNodeParameter('updateFields', i);
                        const body = {};
                        if (updateFields.name) {
                            body.displayName = updateFields.name;
                        }
                        if (updateFields.description) {
                            body.description = updateFields.description;
                        }
                        responseData = await GenericFunctions_1.microsoftApiRequest.call(this, 'PATCH', `/v1.0/teams/${teamId}/channels/${channelId}`, body);
                        responseData = { success: true };
                    }
                }
                if (resource === 'channelMessage') {
                    if (operation === 'create') {
                        const teamId = this.getNodeParameter('teamId', i);
                        const channelId = this.getNodeParameter('channelId', i);
                        const messageType = this.getNodeParameter('messageType', i);
                        const message = this.getNodeParameter('message', i);
                        const options = this.getNodeParameter('options', i);
                        const body = {
                            body: {
                                contentType: messageType,
                                content: message,
                            },
                        };
                        if (options.makeReply) {
                            const replyToId = options.makeReply;
                            responseData = await GenericFunctions_1.microsoftApiRequest.call(this, 'POST', `/beta/teams/${teamId}/channels/${channelId}/messages/${replyToId}/replies`, body);
                        }
                        else {
                            responseData = await GenericFunctions_1.microsoftApiRequest.call(this, 'POST', `/beta/teams/${teamId}/channels/${channelId}/messages`, body);
                        }
                    }
                    if (operation === 'getAll') {
                        const teamId = this.getNodeParameter('teamId', i);
                        const channelId = this.getNodeParameter('channelId', i);
                        const returnAll = this.getNodeParameter('returnAll', i);
                        if (returnAll) {
                            responseData = await GenericFunctions_1.microsoftApiRequestAllItems.call(this, 'value', 'GET', `/beta/teams/${teamId}/channels/${channelId}/messages`);
                        }
                        else {
                            qs.limit = this.getNodeParameter('limit', i);
                            responseData = await GenericFunctions_1.microsoftApiRequestAllItems.call(this, 'value', 'GET', `/beta/teams/${teamId}/channels/${channelId}/messages`, {});
                            responseData = responseData.splice(0, qs.limit);
                        }
                    }
                }
                if (resource === 'task') {
                    if (operation === 'create') {
                        const planId = this.getNodeParameter('planId', i);
                        const bucketId = this.getNodeParameter('bucketId', i);
                        const title = this.getNodeParameter('title', i);
                        const additionalFields = this.getNodeParameter('additionalFields', i);
                        const body = {
                            planId,
                            bucketId,
                            title,
                        };
                        Object.assign(body, additionalFields);
                        if (body.assignedTo) {
                            body.assignments = {
                                [body.assignedTo]: {
                                    '@odata.type': 'microsoft.graph.plannerAssignment',
                                    'orderHint': ' !',
                                },
                            };
                            delete body.assignedTo;
                        }
                        if (Array.isArray(body.labels)) {
                            body.appliedCategories = body.labels.map((label) => ({ [label]: true }));
                        }
                        responseData = await GenericFunctions_1.microsoftApiRequest.call(this, 'POST', `/v1.0/planner/tasks`, body);
                    }
                    if (operation === 'delete') {
                        const taskId = this.getNodeParameter('taskId', i);
                        const task = await GenericFunctions_1.microsoftApiRequest.call(this, 'GET', `/v1.0/planner/tasks/${taskId}`);
                        responseData = await GenericFunctions_1.microsoftApiRequest.call(this, 'DELETE', `/v1.0/planner/tasks/${taskId}`, {}, {}, undefined, { 'If-Match': task['@odata.etag'] });
                        responseData = { success: true };
                    }
                    if (operation === 'get') {
                        const taskId = this.getNodeParameter('taskId', i);
                        responseData = await GenericFunctions_1.microsoftApiRequest.call(this, 'GET', `/v1.0/planner/tasks/${taskId}`);
                    }
                    if (operation === 'getAll') {
                        const memberId = this.getNodeParameter('memberId', i);
                        const returnAll = this.getNodeParameter('returnAll', i);
                        if (returnAll) {
                            responseData = await GenericFunctions_1.microsoftApiRequestAllItems.call(this, 'value', 'GET', `/v1.0/users/${memberId}/planner/tasks`);
                        }
                        else {
                            qs.limit = this.getNodeParameter('limit', i);
                            responseData = await GenericFunctions_1.microsoftApiRequestAllItems.call(this, 'value', 'GET', `/v1.0/users/${memberId}/planner/tasks`, {});
                            responseData = responseData.splice(0, qs.limit);
                        }
                    }
                    if (operation === 'update') {
                        const taskId = this.getNodeParameter('taskId', i);
                        const updateFields = this.getNodeParameter('updateFields', i);
                        const body = {};
                        Object.assign(body, updateFields);
                        if (body.assignedTo) {
                            body.assignments = {
                                [body.assignedTo]: {
                                    '@odata.type': 'microsoft.graph.plannerAssignment',
                                    'orderHint': ' !',
                                },
                            };
                            delete body.assignedTo;
                        }
                        if (Array.isArray(body.labels)) {
                            body.appliedCategories = body.labels.map((label) => ({ [label]: true }));
                        }
                        const task = await GenericFunctions_1.microsoftApiRequest.call(this, 'GET', `/v1.0/planner/tasks/${taskId}`);
                        responseData = await GenericFunctions_1.microsoftApiRequest.call(this, 'PATCH', `/v1.0/planner/tasks/${taskId}`, body, {}, undefined, { 'If-Match': task['@odata.etag'] });
                        responseData = { success: true };
                    }
                }
                if (Array.isArray(responseData)) {
                    returnData.push.apply(returnData, responseData);
                }
                else {
                    returnData.push(responseData);
                }
            }
            catch (error) {
                if (this.continueOnFail()) {
                    returnData.push({ error: error.message });
                    continue;
                }
                throw error;
            }
        }
        return [this.helpers.returnJsonArray(returnData)];
    }
}
exports.MicrosoftTeams = MicrosoftTeams;
//# sourceMappingURL=MicrosoftTeams.node.js.map