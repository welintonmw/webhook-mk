"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.execute = exports.description = exports.properties = void 0;
const utils_1 = require("../../helpers/utils");
const transport_1 = require("../../transport");
const descriptions_1 = require("../../descriptions");
const utilities_1 = require("../../../../../../utils/utilities");
exports.properties = [
    ...descriptions_1.returnAllOrLimit,
    {
        displayName: 'Output',
        name: 'output',
        type: 'options',
        default: 'simple',
        options: [
            {
                name: 'Simplified',
                value: 'simple',
            },
            {
                name: 'Raw',
                value: 'raw',
            },
            {
                name: 'Select Included Fields',
                value: 'fields',
            },
        ],
    },
    {
        displayName: 'Fields',
        name: 'fields',
        type: 'multiOptions',
        description: 'The fields to add to the output',
        displayOptions: {
            show: {
                output: ['fields'],
            },
        },
        options: utils_1.contactFields,
        default: [],
    },
    {
        displayName: 'Filters',
        name: 'filters',
        type: 'collection',
        placeholder: 'Add Filter',
        default: {},
        options: [
            {
                displayName: 'Filter Query',
                name: 'custom',
                type: 'string',
                default: '',
                placeholder: "e.g. displayName eq 'John Doe'",
                hint: 'Search query to filter contacts. <a href="https://learn.microsoft.com/en-us/graph/filter-query-parameter">More info</a>.',
            },
            {
                displayName: 'Email Address',
                name: 'emailAddress',
                type: 'string',
                default: '',
                description: 'If contacts that you want to retrieve have multiple email addresses, you can enter them separated by commas',
            },
        ],
    },
];
const displayOptions = {
    show: {
        resource: ['contact'],
        operation: ['getAll'],
    },
};
exports.description = (0, utilities_1.updateDisplayOptions)(displayOptions, exports.properties);
async function execute(index) {
    let responseData;
    const qs = {};
    const returnAll = this.getNodeParameter('returnAll', index);
    const filters = this.getNodeParameter('filters', index, {});
    const output = this.getNodeParameter('output', index);
    if (output === 'fields') {
        const fields = this.getNodeParameter('fields', index);
        qs.$select = fields.join(',');
    }
    if (output === 'simple') {
        qs.$select = 'id,displayName,emailAddresses,businessPhones,mobilePhone';
    }
    if (Object.keys(filters).length) {
        const filterString = [];
        if (filters.emailAddress) {
            const emails = filters.emailAddress
                .split(',')
                .map((email) => `emailAddresses/any(a:a/address eq '${email.trim()}')`);
            filterString.push(emails.join(' and '));
        }
        if (filters.custom) {
            filterString.push(filters.custom);
        }
        if (filterString.length) {
            qs.$filter = filterString.join(' and ');
        }
    }
    const endpoint = '/contacts';
    if (returnAll) {
        responseData = await transport_1.microsoftApiRequestAllItems.call(this, 'value', 'GET', endpoint, undefined, qs);
    }
    else {
        qs.$top = this.getNodeParameter('limit', index);
        responseData = await transport_1.microsoftApiRequest.call(this, 'GET', endpoint, undefined, qs);
        responseData = responseData.value;
    }
    const executionData = this.helpers.constructExecutionMetaData(this.helpers.returnJsonArray(responseData), { itemData: { item: index } });
    return executionData;
}
exports.execute = execute;
//# sourceMappingURL=getAll.operation.js.map