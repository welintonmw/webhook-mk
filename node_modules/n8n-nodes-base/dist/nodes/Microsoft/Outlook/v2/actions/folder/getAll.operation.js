"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.execute = exports.description = exports.properties = void 0;
const transport_1 = require("../../transport");
const descriptions_1 = require("../../descriptions");
const utilities_1 = require("../../../../../../utils/utilities");
exports.properties = [
    ...descriptions_1.returnAllOrLimit,
    {
        displayName: 'Filters',
        name: 'filters',
        type: 'collection',
        placeholder: 'Add Filter',
        default: {},
        options: [
            {
                displayName: 'Filter Query',
                name: 'filter',
                type: 'string',
                default: '',
                placeholder: "e.g. displayName eq 'My Folder'",
                hint: 'Search query to filter folders. <a href="https://docs.microsoft.com/en-us/graph/query-parameters#filter-parameter">More info</a>.',
            },
        ],
    },
    {
        displayName: 'Options',
        name: 'options',
        type: 'collection',
        placeholder: 'Add Field',
        default: {},
        options: [
            {
                displayName: 'Fields',
                name: 'fields',
                type: 'multiOptions',
                description: 'The fields to add to the output',
                options: descriptions_1.folderFields,
                default: [],
            },
            {
                displayName: 'Include Child Folders',
                name: 'includeChildFolders',
                type: 'boolean',
                default: false,
                description: 'Whether to include child folders in the response',
            },
            {
                ...descriptions_1.folderRLC,
                displayName: 'Parent Folder',
                required: false,
                description: 'The folder you want to search in',
            },
        ],
    },
];
const displayOptions = {
    show: {
        resource: ['folder'],
        operation: ['getAll'],
    },
};
exports.description = (0, utilities_1.updateDisplayOptions)(displayOptions, exports.properties);
async function execute(index) {
    let responseData;
    const qs = {};
    const returnAll = this.getNodeParameter('returnAll', index);
    const options = this.getNodeParameter('options', index);
    const filter = this.getNodeParameter('filters.filter', index, '');
    const parentFolderId = this.getNodeParameter('options.folderId', index, '', {
        extractValue: true,
    });
    if (options.fields) {
        qs.$select = options.fields.join(',');
    }
    if (filter) {
        qs.$filter = filter;
    }
    let endpoint;
    if (parentFolderId) {
        endpoint = `/mailFolders/${parentFolderId}/childFolders`;
    }
    else {
        endpoint = '/mailFolders';
    }
    if (returnAll) {
        responseData = await transport_1.microsoftApiRequestAllItems.call(this, 'value', 'GET', endpoint, {}, qs);
    }
    else {
        qs.$top = this.getNodeParameter('limit', index);
        responseData = await transport_1.microsoftApiRequest.call(this, 'GET', endpoint, {}, qs);
        responseData = responseData.value;
    }
    if (options.includeChildFolders) {
        responseData = await transport_1.getSubfolders.call(this, responseData);
    }
    const executionData = this.helpers.constructExecutionMetaData(this.helpers.returnJsonArray(responseData), { itemData: { item: index } });
    return executionData;
}
exports.execute = execute;
//# sourceMappingURL=getAll.operation.js.map