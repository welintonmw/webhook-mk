"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.KafkaTrigger = void 0;
const kafkajs_1 = require("kafkajs");
const n8n_workflow_1 = require("n8n-workflow");
class KafkaTrigger {
    constructor() {
        this.description = {
            displayName: 'Kafka Trigger',
            name: 'kafkaTrigger',
            icon: 'file:kafka.svg',
            group: ['trigger'],
            version: 1,
            description: 'Consume messages from a Kafka topic',
            defaults: {
                name: 'Kafka Trigger',
                color: '#000000',
            },
            inputs: [],
            outputs: ['main'],
            credentials: [
                {
                    name: 'kafka',
                    required: true,
                },
            ],
            properties: [
                {
                    displayName: 'Topic',
                    name: 'topic',
                    type: 'string',
                    default: '',
                    required: true,
                    placeholder: 'topic-name',
                    description: 'Name of the queue of topic to consume from.',
                },
                {
                    displayName: 'Group ID',
                    name: 'groupId',
                    type: 'string',
                    default: '',
                    required: true,
                    placeholder: 'n8n-kafka',
                    description: 'ID of the consumer group.',
                },
                {
                    displayName: 'Options',
                    name: 'options',
                    type: 'collection',
                    default: {},
                    placeholder: 'Add Option',
                    options: [
                        {
                            displayName: 'Allow Topic Creation',
                            name: 'allowAutoTopicCreation',
                            type: 'boolean',
                            default: false,
                            description: 'Allow sending message to a previously non exisiting topic .',
                        },
                        {
                            displayName: 'Read messages from beginning',
                            name: 'fromBeginning',
                            type: 'boolean',
                            default: true,
                            description: 'Read message from beginning .',
                        },
                        {
                            displayName: 'JSON Parse Message',
                            name: 'jsonParseMessage',
                            type: 'boolean',
                            default: false,
                            description: 'Try to parse the message to an object.',
                        },
                        {
                            displayName: 'Only Message',
                            name: 'onlyMessage',
                            type: 'boolean',
                            displayOptions: {
                                show: {
                                    jsonParseMessage: [
                                        true,
                                    ],
                                },
                            },
                            default: false,
                            description: 'Returns only the message property.',
                        },
                        {
                            displayName: 'Session Timeout',
                            name: 'sessionTimeout',
                            type: 'number',
                            default: 30000,
                            description: 'The time to await a response in ms.',
                        },
                    ],
                },
            ],
        };
    }
    async trigger() {
        const topic = this.getNodeParameter('topic');
        const groupId = this.getNodeParameter('groupId');
        const credentials = await this.getCredentials('kafka');
        const brokers = (credentials.brokers || '').split(',').map(item => item.trim());
        const clientId = credentials.clientId;
        const ssl = credentials.ssl;
        const config = {
            clientId,
            brokers,
            ssl,
            logLevel: kafkajs_1.logLevel.ERROR,
        };
        if (credentials.authentication === true) {
            if (!(credentials.username && credentials.password)) {
                throw new n8n_workflow_1.NodeOperationError(this.getNode(), 'Username and password are required for authentication');
            }
            config.sasl = {
                username: credentials.username,
                password: credentials.password,
                mechanism: credentials.saslMechanism,
            };
        }
        const kafka = new kafkajs_1.Kafka(config);
        const consumer = kafka.consumer({ groupId });
        await consumer.connect();
        const options = this.getNodeParameter('options', {});
        await consumer.subscribe({ topic, fromBeginning: (options.fromBeginning) ? true : false });
        const self = this;
        const startConsumer = async () => {
            await consumer.run({
                eachMessage: async ({ topic, message }) => {
                    var _a;
                    let data = {};
                    let value = (_a = message.value) === null || _a === void 0 ? void 0 : _a.toString();
                    if (options.jsonParseMessage) {
                        try {
                            value = JSON.parse(value);
                        }
                        catch (error) { }
                    }
                    data.message = value;
                    data.topic = topic;
                    if (options.onlyMessage) {
                        data = value;
                    }
                    self.emit([self.helpers.returnJsonArray([data])]);
                },
            });
        };
        startConsumer();
        async function closeFunction() {
            await consumer.disconnect();
        }
        async function manualTriggerFunction() {
            startConsumer();
        }
        return {
            closeFunction,
            manualTriggerFunction,
        };
    }
}
exports.KafkaTrigger = KafkaTrigger;
//# sourceMappingURL=KafkaTrigger.node.js.map