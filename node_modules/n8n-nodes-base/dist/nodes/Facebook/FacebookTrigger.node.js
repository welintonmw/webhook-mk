"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.FacebookTrigger = void 0;
const n8n_workflow_1 = require("n8n-workflow");
const uuid_1 = require("uuid");
const change_case_1 = require("change-case");
const GenericFunctions_1 = require("./GenericFunctions");
const crypto_1 = require("crypto");
class FacebookTrigger {
    constructor() {
        this.description = {
            displayName: 'Facebook Trigger',
            name: 'facebookTrigger',
            icon: 'file:facebook.svg',
            group: ['trigger'],
            version: 1,
            subtitle: '={{$parameter["appId"] +"/"+ $parameter["object"]}}',
            description: 'Starts the workflow when Facebook events occur',
            defaults: {
                name: 'Facebook Trigger',
                color: '#3B5998',
            },
            inputs: [],
            outputs: ['main'],
            credentials: [
                {
                    name: 'facebookGraphAppApi',
                    required: true,
                },
            ],
            webhooks: [
                {
                    name: 'setup',
                    httpMethod: 'GET',
                    responseMode: 'onReceived',
                    path: 'webhook',
                },
                {
                    name: 'default',
                    httpMethod: 'POST',
                    responseMode: 'onReceived',
                    path: 'webhook',
                },
            ],
            properties: [
                {
                    displayName: 'APP ID',
                    name: 'appId',
                    type: 'string',
                    required: true,
                    default: '',
                    description: 'Facebook APP ID',
                },
                {
                    displayName: 'Object',
                    name: 'object',
                    type: 'options',
                    options: [
                        {
                            name: 'Ad Account',
                            value: 'adAccount',
                            description: 'Get updates about Ad Account',
                        },
                        {
                            name: 'Application',
                            value: 'application',
                            description: 'Get updates about the app',
                        },
                        {
                            name: 'Certificate Transparency',
                            value: 'certificateTransparency',
                            description: 'Get updates about Certificate Transparency',
                        },
                        {
                            name: 'Group',
                            value: 'group',
                            description: 'Get updates about activity in groups and events in groups for Workplace',
                        },
                        {
                            name: 'Instagram',
                            value: 'instagram',
                            description: 'Get updates about comments on your media',
                        },
                        {
                            name: 'Link',
                            value: 'link',
                            description: 'Get updates about links for rich previews by an external provider',
                        },
                        {
                            name: 'Page',
                            value: 'page',
                            description: 'Page updates',
                        },
                        {
                            name: 'Permissions',
                            value: 'permissions',
                            description: 'Updates regarding granting or revoking permissions',
                        },
                        {
                            name: 'User',
                            value: 'user',
                            description: 'User profile updates',
                        },
                        {
                            name: 'Whatsapp Business Account',
                            value: 'whatsappBusinessAccount',
                            description: 'Get updates about Whatsapp business account',
                        },
                        {
                            name: 'Workplace Security',
                            value: 'workplaceSecurity',
                            description: 'Get updates about Workplace Security',
                        },
                    ],
                    required: true,
                    default: 'user',
                    description: 'The object to subscribe to',
                },
                {
                    displayName: 'Fields',
                    name: 'fields',
                    type: 'multiOptions',
                    typeOptions: {
                        loadOptionsMethod: 'getObjectFields',
                        loadOptionsDependsOn: [
                            'object',
                        ],
                    },
                    required: false,
                    default: [],
                    description: 'The set of fields in this object that are subscribed to',
                },
                {
                    displayName: 'Options',
                    name: 'options',
                    type: 'collection',
                    default: {},
                    placeholder: 'Add option',
                    options: [
                        {
                            displayName: 'Include values',
                            name: 'includeValues',
                            type: 'boolean',
                            default: true,
                            description: 'Indicates if change notifications should include the new values.',
                        },
                    ],
                },
            ],
        };
        this.methods = {
            loadOptions: {
                async getObjectFields() {
                    const object = this.getCurrentNodeParameter('object');
                    return GenericFunctions_1.getFields(object);
                },
            },
        };
        this.webhookMethods = {
            default: {
                async checkExists() {
                    const webhookUrl = this.getNodeWebhookUrl('default');
                    const object = this.getNodeParameter('object');
                    const appId = this.getNodeParameter('appId');
                    const { data } = await GenericFunctions_1.facebookApiRequest.call(this, 'GET', `/${appId}/subscriptions`, {});
                    for (const webhook of data) {
                        if (webhook.target === webhookUrl && webhook.object === object && webhook.status === true) {
                            return true;
                        }
                    }
                    return false;
                },
                async create() {
                    const webhookData = this.getWorkflowStaticData('node');
                    const webhookUrl = this.getNodeWebhookUrl('default');
                    const object = this.getNodeParameter('object');
                    const appId = this.getNodeParameter('appId');
                    const fields = this.getNodeParameter('fields');
                    const options = this.getNodeParameter('options');
                    const body = {
                        object: change_case_1.snakeCase(object),
                        callback_url: webhookUrl,
                        verify_token: uuid_1.v4(),
                        fields: (fields.includes('*')) ? GenericFunctions_1.getAllFields(object) : fields,
                    };
                    if (options.includeValues !== undefined) {
                        body.include_values = options.includeValues;
                    }
                    const responseData = await GenericFunctions_1.facebookApiRequest.call(this, 'POST', `/${appId}/subscriptions`, body);
                    webhookData.verifyToken = body.verify_token;
                    if (responseData.success !== true) {
                        throw new n8n_workflow_1.NodeApiError(this.getNode(), responseData, { message: 'Facebook webhook creation response did not contain the expected data.' });
                    }
                    return true;
                },
                async delete() {
                    const appId = this.getNodeParameter('appId');
                    const object = this.getNodeParameter('object');
                    try {
                        await GenericFunctions_1.facebookApiRequest.call(this, 'DELETE', `/${appId}/subscriptions`, { object: change_case_1.snakeCase(object) });
                    }
                    catch (error) {
                        return false;
                    }
                    return true;
                },
            },
        };
    }
    async webhook() {
        const bodyData = this.getBodyData();
        const query = this.getQueryData();
        const res = this.getResponseObject();
        const req = this.getRequestObject();
        const headerData = this.getHeaderData();
        const credentials = await this.getCredentials('facebookGraphAppApi');
        if (this.getWebhookName() === 'setup') {
            if (query['hub.challenge']) {
                res.status(200).send(query['hub.challenge']).end();
                return {
                    noWebhookResponse: true,
                };
            }
        }
        if (credentials.appSecret !== '') {
            const computedSignature = crypto_1.createHmac('sha1', credentials.appSecret).update(req.rawBody).digest('hex');
            if (headerData['x-hub-signature'] !== `sha1=${computedSignature}`) {
                return {};
            }
        }
        return {
            workflowData: [
                this.helpers.returnJsonArray(bodyData.entry),
            ],
        };
    }
}
exports.FacebookTrigger = FacebookTrigger;
//# sourceMappingURL=FacebookTrigger.node.js.map