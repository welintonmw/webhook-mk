"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ReadBinaryFile = void 0;
const n8n_workflow_1 = require("n8n-workflow");
const promises_1 = require("fs/promises");
class ReadBinaryFile {
    constructor() {
        this.description = {
            displayName: 'Read Binary File',
            name: 'readBinaryFile',
            icon: 'fa:file-import',
            group: ['input'],
            version: 1,
            description: 'Reads a binary file from disk',
            defaults: {
                name: 'Read Binary File',
                color: '#449922',
            },
            inputs: ['main'],
            outputs: ['main'],
            properties: [
                {
                    displayName: 'File Path',
                    name: 'filePath',
                    type: 'string',
                    default: '',
                    required: true,
                    placeholder: '/data/example.jpg',
                    description: 'Path of the file to read.',
                },
                {
                    displayName: 'Property Name',
                    name: 'dataPropertyName',
                    type: 'string',
                    default: 'data',
                    required: true,
                    description: 'Name of the binary property to which to write the data of the read file.',
                },
            ],
        };
    }
    async execute() {
        const items = this.getInputData();
        const returnData = [];
        const length = items.length;
        let item;
        for (let itemIndex = 0; itemIndex < length; itemIndex++) {
            try {
                item = items[itemIndex];
                const dataPropertyName = this.getNodeParameter('dataPropertyName', itemIndex);
                const filePath = this.getNodeParameter('filePath', itemIndex);
                let data;
                try {
                    data = await promises_1.readFile(filePath);
                }
                catch (error) {
                    if (error.code === 'ENOENT') {
                        throw new n8n_workflow_1.NodeOperationError(this.getNode(), `The file "${filePath}" could not be found.`);
                    }
                    throw error;
                }
                const newItem = {
                    json: item.json,
                    binary: {},
                };
                if (item.binary !== undefined) {
                    Object.assign(newItem.binary, item.binary);
                }
                newItem.binary[dataPropertyName] = await this.helpers.prepareBinaryData(data, filePath);
                returnData.push(newItem);
            }
            catch (error) {
                if (this.continueOnFail()) {
                    returnData.push({ json: { error: error.message } });
                    continue;
                }
                throw error;
            }
        }
        return this.prepareOutputData(returnData);
    }
}
exports.ReadBinaryFile = ReadBinaryFile;
//# sourceMappingURL=ReadBinaryFile.node.js.map