"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Clockify = void 0;
const GenericFunctions_1 = require("./GenericFunctions");
const ProjectDescription_1 = require("./ProjectDescription");
const TagDescription_1 = require("./TagDescription");
const TaskDescription_1 = require("./TaskDescription");
const TimeEntryDescription_1 = require("./TimeEntryDescription");
const moment = require("moment-timezone");
class Clockify {
    constructor() {
        this.description = {
            displayName: 'Clockify',
            name: 'clockify',
            icon: 'file:clockify.svg',
            group: ['transform'],
            version: 1,
            subtitle: '={{$parameter["operation"] + ": " + $parameter["resource"]}}',
            description: 'Consume Clockify REST API',
            defaults: {
                name: 'Clockify',
                color: '#000000',
            },
            inputs: ['main'],
            outputs: ['main'],
            credentials: [
                {
                    name: 'clockifyApi',
                    required: true,
                },
            ],
            properties: [
                {
                    displayName: 'Resource',
                    name: 'resource',
                    type: 'options',
                    options: [
                        {
                            name: 'Project',
                            value: 'project',
                        },
                        {
                            name: 'Tag',
                            value: 'tag',
                        },
                        {
                            name: 'Task',
                            value: 'task',
                        },
                        {
                            name: 'Time Entry',
                            value: 'timeEntry',
                        },
                    ],
                    default: 'project',
                    description: 'The resource to operate on.',
                },
                ...ProjectDescription_1.projectOperations,
                ...TagDescription_1.tagOperations,
                ...TaskDescription_1.taskOperations,
                ...TimeEntryDescription_1.timeEntryOperations,
                {
                    displayName: 'Workspace ID',
                    name: 'workspaceId',
                    type: 'options',
                    typeOptions: {
                        loadOptionsMethod: 'listWorkspaces',
                    },
                    required: true,
                    default: [],
                },
                ...ProjectDescription_1.projectFields,
                ...TagDescription_1.tagFields,
                ...TaskDescription_1.taskFields,
                ...TimeEntryDescription_1.timeEntryFields,
            ],
        };
        this.methods = {
            loadOptions: {
                async listWorkspaces() {
                    const rtv = [];
                    const workspaces = await GenericFunctions_1.clockifyApiRequest.call(this, 'GET', 'workspaces');
                    if (undefined !== workspaces) {
                        workspaces.forEach(value => {
                            rtv.push({
                                name: value.name,
                                value: value.id,
                            });
                        });
                    }
                    return rtv;
                },
                async loadUsersForWorkspace() {
                    const rtv = [];
                    const workspaceId = this.getCurrentNodeParameter('workspaceId');
                    if (undefined !== workspaceId) {
                        const resource = `workspaces/${workspaceId}/users`;
                        const users = await GenericFunctions_1.clockifyApiRequest.call(this, 'GET', resource);
                        if (undefined !== users) {
                            users.forEach(value => {
                                rtv.push({
                                    name: value.name,
                                    value: value.id,
                                });
                            });
                        }
                    }
                    return rtv;
                },
                async loadClientsForWorkspace() {
                    const rtv = [];
                    const workspaceId = this.getCurrentNodeParameter('workspaceId');
                    if (undefined !== workspaceId) {
                        const resource = `workspaces/${workspaceId}/clients`;
                        const clients = await GenericFunctions_1.clockifyApiRequest.call(this, 'GET', resource);
                        if (undefined !== clients) {
                            clients.forEach(value => {
                                rtv.push({
                                    name: value.name,
                                    value: value.id,
                                });
                            });
                        }
                    }
                    return rtv;
                },
                async loadProjectsForWorkspace() {
                    const rtv = [];
                    const workspaceId = this.getCurrentNodeParameter('workspaceId');
                    if (undefined !== workspaceId) {
                        const resource = `workspaces/${workspaceId}/projects`;
                        const users = await GenericFunctions_1.clockifyApiRequest.call(this, 'GET', resource);
                        if (undefined !== users) {
                            users.forEach(value => {
                                rtv.push({
                                    name: value.name,
                                    value: value.id,
                                });
                            });
                        }
                    }
                    return rtv;
                },
                async loadTagsForWorkspace() {
                    const rtv = [];
                    const workspaceId = this.getCurrentNodeParameter('workspaceId');
                    if (undefined !== workspaceId) {
                        const resource = `workspaces/${workspaceId}/tags`;
                        const users = await GenericFunctions_1.clockifyApiRequest.call(this, 'GET', resource);
                        if (undefined !== users) {
                            users.forEach(value => {
                                rtv.push({
                                    name: value.name,
                                    value: value.id,
                                });
                            });
                        }
                    }
                    return rtv;
                },
                async loadCustomFieldsForWorkspace() {
                    const rtv = [];
                    const workspaceId = this.getCurrentNodeParameter('workspaceId');
                    if (undefined !== workspaceId) {
                        const resource = `workspaces/${workspaceId}/custom-fields`;
                        const customFields = await GenericFunctions_1.clockifyApiRequest.call(this, 'GET', resource);
                        for (const customField of customFields) {
                            rtv.push({
                                name: customField.name,
                                value: customField.id,
                            });
                        }
                    }
                    return rtv;
                },
            },
        };
    }
    async execute() {
        const items = this.getInputData();
        const returnData = [];
        const length = items.length;
        const qs = {};
        let responseData;
        const resource = this.getNodeParameter('resource', 0);
        const operation = this.getNodeParameter('operation', 0);
        for (let i = 0; i < length; i++) {
            try {
                if (resource === 'project') {
                    if (operation === 'create') {
                        const workspaceId = this.getNodeParameter('workspaceId', i);
                        const name = this.getNodeParameter('name', i);
                        const additionalFields = this.getNodeParameter('additionalFields', i);
                        const body = {
                            name,
                        };
                        Object.assign(body, additionalFields);
                        if (body.estimateUi) {
                            body.estimate = body.estimateUi.estimateValues;
                            delete body.estimateUi;
                        }
                        responseData = await GenericFunctions_1.clockifyApiRequest.call(this, 'POST', `/workspaces/${workspaceId}/projects`, body, qs);
                    }
                    if (operation === 'delete') {
                        const workspaceId = this.getNodeParameter('workspaceId', i);
                        const projectId = this.getNodeParameter('projectId', i);
                        responseData = await GenericFunctions_1.clockifyApiRequest.call(this, 'DELETE', `/workspaces/${workspaceId}/projects/${projectId}`, {}, qs);
                        responseData = { success: true };
                    }
                    if (operation === 'get') {
                        const workspaceId = this.getNodeParameter('workspaceId', i);
                        const projectId = this.getNodeParameter('projectId', i);
                        responseData = await GenericFunctions_1.clockifyApiRequest.call(this, 'GET', `/workspaces/${workspaceId}/projects/${projectId}`, {}, qs);
                    }
                    if (operation === 'getAll') {
                        const returnAll = this.getNodeParameter('returnAll', i);
                        const workspaceId = this.getNodeParameter('workspaceId', i);
                        const additionalFields = this.getNodeParameter('additionalFields', i);
                        Object.assign(qs, additionalFields);
                        if (returnAll) {
                            responseData = await GenericFunctions_1.clockifyApiRequestAllItems.call(this, 'GET', `/workspaces/${workspaceId}/projects`, {}, qs);
                        }
                        else {
                            qs.limit = this.getNodeParameter('limit', i);
                            responseData = await GenericFunctions_1.clockifyApiRequestAllItems.call(this, 'GET', `/workspaces/${workspaceId}/projects`, {}, qs);
                            responseData = responseData.splice(0, qs.limit);
                        }
                    }
                    if (operation === 'update') {
                        const workspaceId = this.getNodeParameter('workspaceId', i);
                        const projectId = this.getNodeParameter('projectId', i);
                        const updateFields = this.getNodeParameter('updateFields', i);
                        const body = {};
                        Object.assign(body, updateFields);
                        if (body.estimateUi) {
                            body.estimate = body.estimateUi.estimateValues;
                            delete body.estimateUi;
                        }
                        responseData = await GenericFunctions_1.clockifyApiRequest.call(this, 'PUT', `/workspaces/${workspaceId}/projects/${projectId}`, body, qs);
                    }
                }
                if (resource === 'tag') {
                    if (operation === 'create') {
                        const workspaceId = this.getNodeParameter('workspaceId', i);
                        const name = this.getNodeParameter('name', i);
                        const body = {
                            name,
                        };
                        responseData = await GenericFunctions_1.clockifyApiRequest.call(this, 'POST', `/workspaces/${workspaceId}/tags`, body, qs);
                    }
                    if (operation === 'delete') {
                        const workspaceId = this.getNodeParameter('workspaceId', i);
                        const tagId = this.getNodeParameter('tagId', i);
                        responseData = await GenericFunctions_1.clockifyApiRequest.call(this, 'DELETE', `/workspaces/${workspaceId}/tags/${tagId}`, {}, qs);
                        responseData = { success: true };
                    }
                    if (operation === 'getAll') {
                        const returnAll = this.getNodeParameter('returnAll', i);
                        const workspaceId = this.getNodeParameter('workspaceId', i);
                        const additionalFields = this.getNodeParameter('additionalFields', i);
                        Object.assign(qs, additionalFields);
                        if (returnAll) {
                            responseData = await GenericFunctions_1.clockifyApiRequestAllItems.call(this, 'GET', `/workspaces/${workspaceId}/tags`, {}, qs);
                        }
                        else {
                            qs.limit = this.getNodeParameter('limit', i);
                            responseData = await GenericFunctions_1.clockifyApiRequestAllItems.call(this, 'GET', `/workspaces/${workspaceId}/tags`, {}, qs);
                            responseData = responseData.splice(0, qs.limit);
                        }
                    }
                    if (operation === 'update') {
                        const workspaceId = this.getNodeParameter('workspaceId', i);
                        const tagId = this.getNodeParameter('tagId', i);
                        const updateFields = this.getNodeParameter('updateFields', i);
                        const body = {};
                        Object.assign(body, updateFields);
                        responseData = await GenericFunctions_1.clockifyApiRequest.call(this, 'PUT', `/workspaces/${workspaceId}/tags/${tagId}`, body, qs);
                    }
                }
                if (resource === 'task') {
                    if (operation === 'create') {
                        const workspaceId = this.getNodeParameter('workspaceId', i);
                        const projectId = this.getNodeParameter('projectId', i);
                        const name = this.getNodeParameter('name', i);
                        const additionalFields = this.getNodeParameter('additionalFields', i);
                        const body = {
                            name,
                        };
                        Object.assign(body, additionalFields);
                        if (body.estimate) {
                            const [hour, minute] = body.estimate.split(':');
                            body.estimate = `PT${hour}H${minute}M`;
                        }
                        responseData = await GenericFunctions_1.clockifyApiRequest.call(this, 'POST', `/workspaces/${workspaceId}/projects/${projectId}/tasks`, body, qs);
                    }
                    if (operation === 'delete') {
                        const workspaceId = this.getNodeParameter('workspaceId', i);
                        const projectId = this.getNodeParameter('projectId', i);
                        const taskId = this.getNodeParameter('taskId', i);
                        responseData = await GenericFunctions_1.clockifyApiRequest.call(this, 'DELETE', `/workspaces/${workspaceId}/projects/${projectId}/tasks/${taskId}`, {}, qs);
                    }
                    if (operation === 'get') {
                        const workspaceId = this.getNodeParameter('workspaceId', i);
                        const projectId = this.getNodeParameter('projectId', i);
                        const taskId = this.getNodeParameter('taskId', i);
                        responseData = await GenericFunctions_1.clockifyApiRequest.call(this, 'GET', `/workspaces/${workspaceId}/projects/${projectId}/tasks/${taskId}`, {}, qs);
                    }
                    if (operation === 'getAll') {
                        const returnAll = this.getNodeParameter('returnAll', i);
                        const workspaceId = this.getNodeParameter('workspaceId', i);
                        const projectId = this.getNodeParameter('projectId', i);
                        const filters = this.getNodeParameter('filters', i);
                        Object.assign(qs, filters);
                        if (returnAll) {
                            responseData = await GenericFunctions_1.clockifyApiRequestAllItems.call(this, 'GET', `/workspaces/${workspaceId}/projects/${projectId}/tasks`, {}, qs);
                        }
                        else {
                            qs['page-size'] = this.getNodeParameter('limit', i);
                            responseData = await GenericFunctions_1.clockifyApiRequest.call(this, 'GET', `/workspaces/${workspaceId}/projects/${projectId}/tasks`, {}, qs);
                        }
                    }
                    if (operation === 'update') {
                        const workspaceId = this.getNodeParameter('workspaceId', i);
                        const projectId = this.getNodeParameter('projectId', i);
                        const taskId = this.getNodeParameter('taskId', i);
                        const updateFields = this.getNodeParameter('updateFields', i);
                        const body = {};
                        Object.assign(body, updateFields);
                        if (body.estimate) {
                            const [hour, minute] = body.estimate.split(':');
                            body.estimate = `PT${hour}H${minute}M`;
                        }
                        responseData = await GenericFunctions_1.clockifyApiRequest.call(this, 'PUT', `/workspaces/${workspaceId}/projects/${projectId}/tasks/${taskId}`, body, qs);
                    }
                }
                if (resource === 'timeEntry') {
                    if (operation === 'create') {
                        const timezone = this.getTimezone();
                        const workspaceId = this.getNodeParameter('workspaceId', i);
                        const start = this.getNodeParameter('start', i);
                        const additionalFields = this.getNodeParameter('additionalFields', i);
                        const body = {
                            start: moment.tz(start, timezone).utc().format(),
                        };
                        Object.assign(body, additionalFields);
                        if (body.end) {
                            body.end = moment.tz(body.end, timezone).utc().format();
                        }
                        if (body.customFieldsUi) {
                            const customFields = body.customFieldsUi.customFieldsValues;
                            body.customFields = customFields;
                        }
                        responseData = await GenericFunctions_1.clockifyApiRequest.call(this, 'POST', `/workspaces/${workspaceId}/time-entries`, body, qs);
                    }
                    if (operation === 'delete') {
                        const workspaceId = this.getNodeParameter('workspaceId', i);
                        const timeEntryId = this.getNodeParameter('timeEntryId', i);
                        responseData = await GenericFunctions_1.clockifyApiRequest.call(this, 'DELETE', `/workspaces/${workspaceId}/time-entries/${timeEntryId}`, {}, qs);
                        responseData = { success: true };
                    }
                    if (operation === 'get') {
                        const workspaceId = this.getNodeParameter('workspaceId', i);
                        const timeEntryId = this.getNodeParameter('timeEntryId', i);
                        responseData = await GenericFunctions_1.clockifyApiRequest.call(this, 'GET', `/workspaces/${workspaceId}/time-entries/${timeEntryId}`, {}, qs);
                    }
                    if (operation === 'update') {
                        const timezone = this.getTimezone();
                        const workspaceId = this.getNodeParameter('workspaceId', i);
                        const timeEntryId = this.getNodeParameter('timeEntryId', i);
                        const updateFields = this.getNodeParameter('updateFields', i);
                        const body = {};
                        Object.assign(body, updateFields);
                        if (body.end) {
                            body.end = moment.tz(body.end, timezone).utc().format();
                        }
                        if (body.start) {
                            body.start = moment.tz(body.start, timezone).utc().format();
                        }
                        else {
                            const { timeInterval: { start } } = await GenericFunctions_1.clockifyApiRequest.call(this, 'GET', `/workspaces/${workspaceId}/time-entries/${timeEntryId}`, {}, qs);
                            body.start = start;
                        }
                        responseData = await GenericFunctions_1.clockifyApiRequest.call(this, 'PUT', `/workspaces/${workspaceId}/time-entries/${timeEntryId}`, body, qs);
                    }
                }
                if (Array.isArray(responseData)) {
                    returnData.push.apply(returnData, responseData);
                }
                else if (responseData !== undefined) {
                    returnData.push(responseData);
                }
            }
            catch (error) {
                if (this.continueOnFail()) {
                    returnData.push({ error: error.message });
                    continue;
                }
                throw error;
            }
        }
        return [this.helpers.returnJsonArray(returnData)];
    }
}
exports.Clockify = Clockify;
//# sourceMappingURL=Clockify.node.js.map