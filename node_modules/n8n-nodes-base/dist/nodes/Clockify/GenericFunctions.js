"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.clockifyApiRequestAllItems = exports.clockifyApiRequest = void 0;
const n8n_workflow_1 = require("n8n-workflow");
async function clockifyApiRequest(method, resource, body = {}, qs = {}, uri, option = {}) {
    const credentials = await this.getCredentials('clockifyApi');
    if (credentials === undefined) {
        throw new n8n_workflow_1.NodeOperationError(this.getNode(), 'No credentials got returned!');
    }
    const BASE_URL = 'https://api.clockify.me/api/v1';
    const options = {
        headers: {
            'Content-Type': 'application/json',
            'X-Api-Key': credentials.apiKey,
        },
        method,
        qs,
        body,
        uri: `${BASE_URL}/${resource}`,
        json: true,
        useQuerystring: true,
    };
    try {
        return await this.helpers.request(options);
    }
    catch (error) {
        throw new n8n_workflow_1.NodeApiError(this.getNode(), error);
    }
}
exports.clockifyApiRequest = clockifyApiRequest;
async function clockifyApiRequestAllItems(method, endpoint, body = {}, query = {}) {
    const returnData = [];
    let responseData;
    query['page-size'] = 50;
    query.page = 1;
    do {
        responseData = await clockifyApiRequest.call(this, method, endpoint, body, query);
        returnData.push.apply(returnData, responseData);
        if (query.limit && (returnData.length >= query.limit)) {
            return returnData;
        }
        query.page++;
    } while (responseData.length !== 0);
    return returnData;
}
exports.clockifyApiRequestAllItems = clockifyApiRequestAllItems;
//# sourceMappingURL=GenericFunctions.js.map