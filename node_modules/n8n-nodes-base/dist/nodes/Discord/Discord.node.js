"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Discord = void 0;
const lodash_1 = require("lodash");
const n8n_workflow_1 = require("n8n-workflow");
class Discord {
    constructor() {
        this.description = {
            displayName: 'Discord',
            name: 'discord',
            icon: 'file:discord.png',
            group: ['output'],
            version: 1,
            description: 'Sends data to Discord',
            defaults: {
                name: 'Discord',
                color: '#7289da',
            },
            inputs: ['main'],
            outputs: ['main'],
            properties: [
                {
                    displayName: 'Webhook URL',
                    name: 'webhookUri',
                    type: 'string',
                    typeOptions: {
                        alwaysOpenEditWindow: true,
                    },
                    default: '',
                    description: 'The webhook url.',
                },
                {
                    displayName: 'Text',
                    name: 'text',
                    type: 'string',
                    typeOptions: {
                        alwaysOpenEditWindow: true,
                    },
                    default: '',
                    description: 'The text to send.',
                },
            ],
        };
    }
    async execute() {
        const items = this.getInputData();
        const returnData = [];
        const requestMethod = 'POST';
        let body;
        for (let i = 0; i < items.length; i++) {
            const webhookUri = this.getNodeParameter('webhookUri', i);
            body = {};
            body.content = this.getNodeParameter('text', i);
            const options = {
                method: requestMethod,
                body,
                uri: `${webhookUri}`,
                headers: {
                    'content-type': 'application/json; charset=utf-8',
                },
                json: true,
            };
            let maxTries = 5;
            do {
                try {
                    await this.helpers.request(options);
                    break;
                }
                catch (error) {
                    if (error.statusCode === 429) {
                        await new Promise((resolve) => {
                            setTimeout(async () => {
                                resolve();
                            }, lodash_1.get(error, 'response.body.retry_after', 150));
                        });
                    }
                    else {
                        throw new n8n_workflow_1.NodeApiError(this.getNode(), error);
                    }
                }
            } while (--maxTries);
            if (maxTries <= 0) {
                throw new n8n_workflow_1.NodeApiError(this.getNode(), { request: options }, { message: 'Could not send message. Max. amount of rate-limit retries got reached.' });
            }
            returnData.push({ success: true });
        }
        return [this.helpers.returnJsonArray(returnData)];
    }
}
exports.Discord = Discord;
//# sourceMappingURL=Discord.node.js.map