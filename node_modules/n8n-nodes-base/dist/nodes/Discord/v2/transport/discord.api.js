"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.discordApiMultiPartRequest = exports.discordApiRequest = void 0;
const n8n_workflow_1 = require("n8n-workflow");
const helpers_1 = require("./helpers");
async function discordApiRequest(method, endpoint, body, qs) {
    const authentication = this.getNodeParameter('authentication', 0, 'webhook');
    const headers = {};
    const credentialType = (0, helpers_1.getCredentialsType)(authentication);
    const options = {
        headers,
        method,
        qs,
        body,
        url: `https://discord.com/api/v10${endpoint}`,
        json: true,
    };
    if (credentialType === 'discordWebhookApi') {
        const credentials = await this.getCredentials('discordWebhookApi');
        options.url = credentials.webhookUri;
    }
    try {
        const response = await helpers_1.requestApi.call(this, options, credentialType, endpoint);
        const resetAfter = Number(response.headers['x-ratelimit-reset-after']);
        const remaining = Number(response.headers['x-ratelimit-remaining']);
        if (remaining === 0) {
            await (0, n8n_workflow_1.sleep)(resetAfter);
        }
        else {
            await (0, n8n_workflow_1.sleep)(20);
        }
        return response.body || { success: true };
    }
    catch (error) {
        throw new n8n_workflow_1.NodeApiError(this.getNode(), error);
    }
}
exports.discordApiRequest = discordApiRequest;
async function discordApiMultiPartRequest(method, endpoint, formData) {
    const headers = {
        'content-type': 'multipart/form-data; charset=utf-8',
    };
    const authentication = this.getNodeParameter('authentication', 0, 'webhook');
    const credentialType = (0, helpers_1.getCredentialsType)(authentication);
    const options = {
        headers,
        method,
        formData,
        url: `https://discord.com/api/v10${endpoint}`,
    };
    if (credentialType === 'discordWebhookApi') {
        const credentials = await this.getCredentials('discordWebhookApi');
        options.url = credentials.webhookUri;
    }
    try {
        const response = await helpers_1.requestApi.call(this, options, credentialType, endpoint);
        const resetAfter = Number(response.headers['x-ratelimit-reset-after']);
        const remaining = Number(response.headers['x-ratelimit-remaining']);
        if (remaining === 0) {
            await (0, n8n_workflow_1.sleep)(resetAfter);
        }
        else {
            await (0, n8n_workflow_1.sleep)(20);
        }
        return (0, n8n_workflow_1.jsonParse)(response.body);
    }
    catch (error) {
        throw new n8n_workflow_1.NodeApiError(this.getNode(), error);
    }
}
exports.discordApiMultiPartRequest = discordApiMultiPartRequest;
//# sourceMappingURL=discord.api.js.map