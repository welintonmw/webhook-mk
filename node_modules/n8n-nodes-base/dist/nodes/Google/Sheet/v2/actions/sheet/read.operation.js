"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.execute = exports.description = void 0;
const GoogleSheets_utils_1 = require("../../helpers/GoogleSheets.utils");
const commonDescription_1 = require("./commonDescription");
const combineFiltersOptions = {
    displayName: 'Combine Filters',
    name: 'combineFilters',
    type: 'options',
    description: 'How to combine the conditions defined in "Filters": AND requires all conditions to be true, OR requires at least one condition to be true',
    options: [
        {
            name: 'AND',
            value: 'AND',
            description: 'Only rows that meet all the conditions are selected',
        },
        {
            name: 'OR',
            value: 'OR',
            description: 'Rows that meet at least one condition are selected',
        },
    ],
    default: 'AND',
};
exports.description = [
    {
        displayName: 'Filters',
        name: 'filtersUI',
        placeholder: 'Add Filter',
        type: 'fixedCollection',
        typeOptions: {
            multipleValueButtonText: 'Add Filter',
            multipleValues: true,
        },
        default: {},
        options: [
            {
                displayName: 'Filter',
                name: 'values',
                values: [
                    {
                        displayName: 'Column',
                        name: 'lookupColumn',
                        type: 'options',
                        typeOptions: {
                            loadOptionsDependsOn: ['sheetName.value'],
                            loadOptionsMethod: 'getSheetHeaderRowWithGeneratedColumnNames',
                        },
                        default: '',
                        description: 'Choose from the list, or specify an ID using an <a href="https://docs.n8n.io/code-examples/expressions/">expression</a>',
                    },
                    {
                        displayName: 'Value',
                        name: 'lookupValue',
                        type: 'string',
                        default: '',
                        hint: 'The column must have this value to be matched',
                    },
                ],
            },
        ],
        displayOptions: {
            show: {
                resource: ['sheet'],
                operation: ['read'],
            },
            hide: {
                ...GoogleSheets_utils_1.untilSheetSelected,
            },
        },
    },
    {
        ...combineFiltersOptions,
        default: 'OR',
        displayOptions: {
            show: {
                '@version': [{ _cnd: { lt: 4.3 } }],
                resource: ['sheet'],
                operation: ['read'],
            },
            hide: {
                ...GoogleSheets_utils_1.untilSheetSelected,
            },
        },
    },
    {
        ...combineFiltersOptions,
        displayOptions: {
            show: {
                '@version': [{ _cnd: { gte: 4.3 } }],
                resource: ['sheet'],
                operation: ['read'],
            },
            hide: {
                ...GoogleSheets_utils_1.untilSheetSelected,
            },
        },
    },
    {
        displayName: 'Options',
        name: 'options',
        type: 'collection',
        placeholder: 'Add Option',
        default: {},
        displayOptions: {
            show: {
                resource: ['sheet'],
                operation: ['read'],
            },
            hide: {
                ...GoogleSheets_utils_1.untilSheetSelected,
            },
        },
        options: [
            commonDescription_1.dataLocationOnSheet,
            commonDescription_1.outputFormatting,
            {
                displayName: 'When Filter Has Multiple Matches',
                name: 'returnAllMatches',
                type: 'options',
                default: 'returnFirstMatch',
                options: [
                    {
                        name: 'Return First Match',
                        value: 'returnFirstMatch',
                        description: 'Return only the first match',
                    },
                    {
                        name: 'Return All Matches',
                        value: 'returnAllMatches',
                        description: 'Return all values that match',
                    },
                ],
                description: 'By default only the first result gets returned, Set to "Return All Matches" to get multiple matches',
            },
        ],
    },
];
async function execute(sheet, sheetName) {
    var _a, _b;
    const items = this.getInputData();
    const nodeVersion = this.getNode().typeVersion;
    let length = 1;
    if (nodeVersion > 4.1) {
        length = items.length;
    }
    const returnData = [];
    for (let itemIndex = 0; itemIndex < length; itemIndex++) {
        const options = this.getNodeParameter('options', itemIndex, {});
        const outputFormattingOption = ((_a = options.outputFormatting) === null || _a === void 0 ? void 0 : _a.values) || {};
        const dataLocationOnSheetOptions = ((_b = options.dataLocationOnSheet) === null || _b === void 0 ? void 0 : _b.values) || {};
        if (dataLocationOnSheetOptions.rangeDefinition === undefined) {
            dataLocationOnSheetOptions.rangeDefinition = 'detectAutomatically';
        }
        const range = (0, GoogleSheets_utils_1.getRangeString)(sheetName, dataLocationOnSheetOptions);
        const valueRenderMode = (outputFormattingOption.general ||
            'UNFORMATTED_VALUE');
        const dateTimeRenderOption = (outputFormattingOption.date || 'FORMATTED_STRING');
        const sheetData = (await sheet.getData(range, valueRenderMode, dateTimeRenderOption));
        if (sheetData === undefined || sheetData.length === 0) {
            return [];
        }
        const { data, headerRow, firstDataRow } = (0, GoogleSheets_utils_1.prepareSheetData)(sheetData, dataLocationOnSheetOptions);
        let responseData = [];
        const lookupValues = this.getNodeParameter('filtersUI.values', itemIndex, []);
        if (lookupValues.length) {
            const returnAllMatches = options.returnAllMatches === 'returnAllMatches' ? true : false;
            if (nodeVersion <= 4.1) {
                for (let i = 1; i < items.length; i++) {
                    const itemLookupValues = this.getNodeParameter('filtersUI.values', i, []);
                    if (itemLookupValues.length) {
                        lookupValues.push(...itemLookupValues);
                    }
                }
            }
            const combineFilters = this.getNodeParameter('combineFilters', itemIndex, 'OR');
            responseData = await sheet.lookupValues(data, headerRow, firstDataRow, lookupValues, returnAllMatches, combineFilters);
        }
        else {
            responseData = sheet.structureArrayDataByColumn(data, headerRow, firstDataRow);
        }
        returnData.push(...responseData.map((item) => {
            return {
                json: item,
                pairedItem: { item: itemIndex },
            };
        }));
    }
    return returnData;
}
exports.execute = execute;
//# sourceMappingURL=read.operation.js.map