import type { IDataObject, IExecuteFunctions, ILoadOptionsFunctions, INode, IPollFunctions } from 'n8n-workflow';
import type { ILookupValues, ISheetUpdateData, ResourceLocator, SheetRangeData, ValueInputOption, ValueRenderOption } from './GoogleSheets.types';
export declare class GoogleSheet {
    id: string;
    executeFunctions: IExecuteFunctions | ILoadOptionsFunctions | IPollFunctions;
    constructor(spreadsheetId: string, executeFunctions: IExecuteFunctions | ILoadOptionsFunctions | IPollFunctions);
    private encodeRange;
    clearData(range: string): Promise<object>;
    getData(range: string, valueRenderMode: ValueRenderOption, dateTimeRenderOption?: string): Promise<string[][] | undefined>;
    spreadsheetGetSheets(): Promise<any>;
    spreadsheetGetSheet(node: INode, mode: ResourceLocator, value: string): Promise<{
        title: string;
        sheetId: number;
    }>;
    getDataRange(sheetId: string): Promise<any>;
    spreadsheetBatchUpdate(requests: IDataObject[]): Promise<any>;
    batchUpdate(updateData: ISheetUpdateData[], valueInputMode: ValueInputOption): Promise<any>;
    appendEmptyRowsOrColumns(sheetId: string, rowsToAdd?: number, columnsToAdd?: number): Promise<any>;
    appendData(range: string, data: string[][], valueInputMode: ValueInputOption, lastRow?: number, useAppend?: boolean): Promise<any>;
    updateRows(sheetName: string, data: string[][], valueInputMode: ValueInputOption, row: number, rowsLength?: number, useAppend?: boolean): Promise<any>;
    convertSheetDataArrayToObjectArray(data: SheetRangeData, startRow: number, columnKeys: string[], addEmpty?: boolean): IDataObject[];
    structureArrayDataByColumn(inputData: string[][], keyRow: number, dataStartRow: number): IDataObject[];
    testFilter(inputData: string[][], keyRow: number, dataStartRow: number): string[];
    appendSheetData(inputData: IDataObject[], range: string, keyRowIndex: number, valueInputMode: ValueInputOption, usePathForKeyRow: boolean, columnNamesList?: string[][], lastRow?: number, useAppend?: boolean): Promise<string[][]>;
    getColumnWithOffset(startColumn: string, offset: number): string;
    getColumnValues(range: string, keyIndex: number, dataStartRowIndex: number, valueRenderMode: ValueRenderOption, sheetData?: string[][]): Promise<string[]>;
    prepareDataForUpdateOrUpsert(inputData: IDataObject[], indexKey: string, range: string, keyRowIndex: number, dataStartRowIndex: number, valueRenderMode: ValueRenderOption, upsert?: boolean, columnNamesList?: string[][], columnValuesList?: string[]): Promise<{
        updateData: ISheetUpdateData[];
        appendData: IDataObject[];
    }>;
    prepareDataForUpdatingByRowNumber(inputData: IDataObject[], range: string, columnNamesList: string[][]): {
        updateData: ISheetUpdateData[];
    };
    lookupValues(inputData: string[][], keyRowIndex: number, dataStartRowIndex: number, lookupValues: ILookupValues[], returnAllMatches?: boolean, combineFilters?: 'AND' | 'OR'): Promise<IDataObject[]>;
    private convertObjectArrayToSheetDataArray;
    private getDecodedSheetRange;
    private splitCellRange;
}
