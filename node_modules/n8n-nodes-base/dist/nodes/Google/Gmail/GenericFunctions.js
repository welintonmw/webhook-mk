"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.extractEmail = exports.googleApiRequestAllItems = exports.encodeEmail = exports.parseRawEmail = exports.googleApiRequest = void 0;
const mailparser_1 = require("mailparser");
const n8n_workflow_1 = require("n8n-workflow");
const moment = require("moment-timezone");
const jwt = require("jsonwebtoken");
const mailComposer = require('nodemailer/lib/mail-composer');
async function googleApiRequest(method, endpoint, body = {}, qs = {}, uri, option = {}) {
    const authenticationMethod = this.getNodeParameter('authentication', 0, 'serviceAccount');
    let options = {
        headers: {
            'Accept': 'application/json',
            'Content-Type': 'application/json',
        },
        method,
        body,
        qs,
        uri: uri || `https://www.googleapis.com${endpoint}`,
        qsStringifyOptions: {
            arrayFormat: 'repeat',
        },
        json: true,
    };
    options = Object.assign({}, options, option);
    try {
        if (Object.keys(body).length === 0) {
            delete options.body;
        }
        if (authenticationMethod === 'serviceAccount') {
            const credentials = await this.getCredentials('googleApi');
            if (credentials === undefined) {
                throw new n8n_workflow_1.NodeOperationError(this.getNode(), 'No credentials got returned!');
            }
            const { access_token } = await getAccessToken.call(this, credentials);
            options.headers.Authorization = `Bearer ${access_token}`;
            return await this.helpers.request(options);
        }
        else {
            return await this.helpers.requestOAuth2.call(this, 'gmailOAuth2', options);
        }
    }
    catch (error) {
        if (error.code === 'ERR_OSSL_PEM_NO_START_LINE') {
            error.statusCode = '401';
        }
        throw new n8n_workflow_1.NodeApiError(this.getNode(), error);
    }
}
exports.googleApiRequest = googleApiRequest;
async function parseRawEmail(messageData, dataPropertyNameDownload) {
    const messageEncoded = Buffer.from(messageData.raw, 'base64').toString('utf8');
    let responseData = await mailparser_1.simpleParser(messageEncoded);
    const headers = {};
    for (const header of responseData.headerLines) {
        headers[header.key] = header.line;
    }
    responseData.headers = headers;
    responseData.headerLines = undefined;
    const binaryData = {};
    if (responseData.attachments) {
        for (let i = 0; i < responseData.attachments.length; i++) {
            const attachment = responseData.attachments[i];
            binaryData[`${dataPropertyNameDownload}${i}`] = await this.helpers.prepareBinaryData(attachment.content, attachment.filename, attachment.contentType);
        }
        responseData.attachments = undefined;
    }
    const mailBaseData = {};
    const resolvedModeAddProperties = [
        'id',
        'threadId',
        'labelIds',
        'sizeEstimate',
    ];
    for (const key of resolvedModeAddProperties) {
        mailBaseData[key] = messageData[key];
    }
    responseData = Object.assign(mailBaseData, responseData);
    return {
        json: responseData,
        binary: Object.keys(binaryData).length ? binaryData : undefined,
    };
}
exports.parseRawEmail = parseRawEmail;
async function encodeEmail(email) {
    let mailBody;
    const mailOptions = {
        from: email.from,
        to: email.to,
        cc: email.cc,
        bcc: email.bcc,
        replyTo: email.inReplyTo,
        references: email.reference,
        subject: email.subject,
        text: email.body,
    };
    if (email.htmlBody) {
        mailOptions.html = email.htmlBody;
    }
    if (email.attachments !== undefined && Array.isArray(email.attachments) && email.attachments.length > 0) {
        const attachments = email.attachments.map((attachment) => ({
            filename: attachment.name,
            content: attachment.content,
            contentType: attachment.type,
            encoding: 'base64',
        }));
        mailOptions.attachments = attachments;
    }
    const mail = new mailComposer(mailOptions);
    mailBody = await new Promise((resolve) => {
        mail.compile().build(async (err, result) => {
            resolve(result);
        });
    });
    return mailBody.toString('base64').replace(/\+/g, '-').replace(/\//g, '_');
}
exports.encodeEmail = encodeEmail;
async function googleApiRequestAllItems(propertyName, method, endpoint, body = {}, query = {}) {
    const returnData = [];
    let responseData;
    query.maxResults = 100;
    do {
        responseData = await googleApiRequest.call(this, method, endpoint, body, query);
        query.pageToken = responseData['nextPageToken'];
        returnData.push.apply(returnData, responseData[propertyName]);
    } while (responseData['nextPageToken'] !== undefined &&
        responseData['nextPageToken'] !== '');
    return returnData;
}
exports.googleApiRequestAllItems = googleApiRequestAllItems;
function extractEmail(s) {
    const data = s.split('<')[1];
    return data.substring(0, data.length - 1);
}
exports.extractEmail = extractEmail;
function getAccessToken(credentials) {
    const scopes = [
        'https://www.googleapis.com/auth/gmail.labels',
        'https://www.googleapis.com/auth/gmail.addons.current.action.compose',
        'https://www.googleapis.com/auth/gmail.addons.current.message.action',
        'https://mail.google.com/',
        'https://www.googleapis.com/auth/gmail.modify',
        'https://www.googleapis.com/auth/gmail.compose',
    ];
    const now = moment().unix();
    const signature = jwt.sign({
        'iss': credentials.email,
        'sub': credentials.delegatedEmail || credentials.email,
        'scope': scopes.join(' '),
        'aud': `https://oauth2.googleapis.com/token`,
        'iat': now,
        'exp': now + 3600,
    }, credentials.privateKey, {
        algorithm: 'RS256',
        header: {
            'kid': credentials.privateKey,
            'typ': 'JWT',
            'alg': 'RS256',
        },
    });
    const options = {
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
        },
        method: 'POST',
        form: {
            grant_type: 'urn:ietf:params:oauth:grant-type:jwt-bearer',
            assertion: signature,
        },
        uri: 'https://oauth2.googleapis.com/token',
        json: true,
    };
    return this.helpers.request(options);
}
//# sourceMappingURL=GenericFunctions.js.map