"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.GoogleBigQuery = void 0;
const GenericFunctions_1 = require("./GenericFunctions");
const RecordDescription_1 = require("./RecordDescription");
const uuid_1 = require("uuid");
class GoogleBigQuery {
    constructor() {
        this.description = {
            displayName: 'Google BigQuery',
            name: 'googleBigQuery',
            icon: 'file:googleBigQuery.svg',
            group: ['input'],
            version: 1,
            subtitle: '={{$parameter["operation"] + ": " + $parameter["resource"]}}',
            description: 'Consume Google BigQuery API',
            defaults: {
                name: 'Google BigQuery',
                color: '#3E87E4',
            },
            inputs: ['main'],
            outputs: ['main'],
            credentials: [
                {
                    name: 'googleBigQueryOAuth2Api',
                    required: true,
                },
            ],
            properties: [
                {
                    displayName: 'Resource',
                    name: 'resource',
                    type: 'options',
                    options: [
                        {
                            name: 'Record',
                            value: 'record',
                        },
                    ],
                    default: 'record',
                    description: 'The resource to operate on.',
                },
                ...RecordDescription_1.recordOperations,
                ...RecordDescription_1.recordFields,
            ],
        };
        this.methods = {
            loadOptions: {
                async getProjects() {
                    const returnData = [];
                    const { projects } = await GenericFunctions_1.googleApiRequest.call(this, 'GET', '/v2/projects');
                    for (const project of projects) {
                        returnData.push({
                            name: project.friendlyName,
                            value: project.id,
                        });
                    }
                    return returnData;
                },
                async getDatasets() {
                    const projectId = this.getCurrentNodeParameter('projectId');
                    const returnData = [];
                    const { datasets } = await GenericFunctions_1.googleApiRequest.call(this, 'GET', `/v2/projects/${projectId}/datasets`);
                    for (const dataset of datasets) {
                        returnData.push({
                            name: dataset.datasetReference.datasetId,
                            value: dataset.datasetReference.datasetId,
                        });
                    }
                    return returnData;
                },
                async getTables() {
                    const projectId = this.getCurrentNodeParameter('projectId');
                    const datasetId = this.getCurrentNodeParameter('datasetId');
                    const returnData = [];
                    const { tables } = await GenericFunctions_1.googleApiRequest.call(this, 'GET', `/v2/projects/${projectId}/datasets/${datasetId}/tables`);
                    for (const table of tables) {
                        returnData.push({
                            name: table.tableReference.tableId,
                            value: table.tableReference.tableId,
                        });
                    }
                    return returnData;
                },
            },
        };
    }
    async execute() {
        const items = this.getInputData();
        const returnData = [];
        const length = items.length;
        const qs = {};
        let responseData;
        const resource = this.getNodeParameter('resource', 0);
        const operation = this.getNodeParameter('operation', 0);
        if (resource === 'record') {
            if (operation === 'create') {
                const projectId = this.getNodeParameter('projectId', 0);
                const datasetId = this.getNodeParameter('datasetId', 0);
                const tableId = this.getNodeParameter('tableId', 0);
                const rows = [];
                const body = {};
                for (let i = 0; i < length; i++) {
                    const options = this.getNodeParameter('options', i);
                    Object.assign(body, options);
                    if (body.traceId === undefined) {
                        body.traceId = uuid_1.v4();
                    }
                    const columns = this.getNodeParameter('columns', i);
                    const columnList = columns.split(',').map(column => column.trim());
                    const record = {};
                    for (const key of Object.keys(items[i].json)) {
                        if (columnList.includes(key)) {
                            record[`${key}`] = items[i].json[key];
                        }
                    }
                    rows.push({ json: record });
                }
                body.rows = rows;
                responseData = await GenericFunctions_1.googleApiRequest.call(this, 'POST', `/v2/projects/${projectId}/datasets/${datasetId}/tables/${tableId}/insertAll`, body);
                returnData.push(responseData);
            }
            else if (operation === 'getAll') {
                const returnAll = this.getNodeParameter('returnAll', 0);
                const projectId = this.getNodeParameter('projectId', 0);
                const datasetId = this.getNodeParameter('datasetId', 0);
                const tableId = this.getNodeParameter('tableId', 0);
                const simple = this.getNodeParameter('simple', 0);
                let fields;
                if (simple === true) {
                    const { schema } = await GenericFunctions_1.googleApiRequest.call(this, 'GET', `/v2/projects/${projectId}/datasets/${datasetId}/tables/${tableId}`, {});
                    fields = schema.fields.map((field) => field.name);
                }
                for (let i = 0; i < length; i++) {
                    const options = this.getNodeParameter('options', i);
                    Object.assign(qs, options);
                    if (qs.selectedFields) {
                        fields = qs.selectedFields.split(',');
                    }
                    if (returnAll) {
                        responseData = await GenericFunctions_1.googleApiRequestAllItems.call(this, 'rows', 'GET', `/v2/projects/${projectId}/datasets/${datasetId}/tables/${tableId}/data`, {}, qs);
                        returnData.push.apply(returnData, (simple) ? GenericFunctions_1.simplify(responseData, fields) : responseData);
                    }
                    else {
                        qs.maxResults = this.getNodeParameter('limit', i);
                        responseData = await GenericFunctions_1.googleApiRequest.call(this, 'GET', `/v2/projects/${projectId}/datasets/${datasetId}/tables/${tableId}/data`, {}, qs);
                        returnData.push.apply(returnData, (simple) ? GenericFunctions_1.simplify(responseData.rows, fields) : responseData.rows);
                    }
                }
            }
        }
        return [this.helpers.returnJsonArray(returnData)];
    }
}
exports.GoogleBigQuery = GoogleBigQuery;
//# sourceMappingURL=GoogleBigQuery.node.js.map