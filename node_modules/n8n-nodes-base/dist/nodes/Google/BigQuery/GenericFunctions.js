"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.simplify = exports.googleApiRequestAllItems = exports.googleApiRequest = void 0;
async function googleApiRequest(method, resource, body = {}, qs = {}, uri, headers = {}) {
    const options = {
        headers: {
            'Content-Type': 'application/json',
        },
        method,
        body,
        qs,
        uri: uri || `https://bigquery.googleapis.com/bigquery${resource}`,
        json: true,
    };
    try {
        if (Object.keys(headers).length !== 0) {
            options.headers = Object.assign({}, options.headers, headers);
        }
        if (Object.keys(body).length === 0) {
            delete options.body;
        }
        return await this.helpers.requestOAuth2.call(this, 'googleBigQueryOAuth2Api', options);
    }
    catch (error) {
        if (error.response && error.response.body && error.response.body.error) {
            let errors = error.response.body.error.errors;
            errors = errors.map((e) => e.message);
            throw new Error(`Google BigQuery error response [${error.statusCode}]: ${errors.join('|')}`);
        }
        throw error;
    }
}
exports.googleApiRequest = googleApiRequest;
async function googleApiRequestAllItems(propertyName, method, endpoint, body = {}, query = {}) {
    const returnData = [];
    let responseData;
    query.maxResults = 100;
    do {
        responseData = await googleApiRequest.call(this, method, endpoint, body, query);
        query.pageToken = responseData['nextPageToken'];
        returnData.push.apply(returnData, responseData[propertyName]);
    } while (responseData['nextPageToken'] !== undefined &&
        responseData['nextPageToken'] !== '');
    return returnData;
}
exports.googleApiRequestAllItems = googleApiRequestAllItems;
function simplify(rows, fields) {
    const results = [];
    for (const row of rows) {
        const record = {};
        for (const [index, field] of fields.entries()) {
            record[field] = row.f[index].v;
        }
        results.push(record);
    }
    return results;
}
exports.simplify = simplify;
//# sourceMappingURL=GenericFunctions.js.map