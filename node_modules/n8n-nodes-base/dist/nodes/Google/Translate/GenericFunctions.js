"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.googleApiRequestAllItems = exports.googleApiRequest = void 0;
const n8n_workflow_1 = require("n8n-workflow");
const moment = require("moment-timezone");
const jwt = require("jsonwebtoken");
async function googleApiRequest(method, resource, body = {}, qs = {}, uri, headers = {}) {
    const authenticationMethod = this.getNodeParameter('authentication', 0, 'serviceAccount');
    const options = {
        headers: {
            'Content-Type': 'application/json',
        },
        method,
        body,
        qs,
        uri: uri || `https://translation.googleapis.com${resource}`,
        json: true,
    };
    try {
        if (Object.keys(headers).length !== 0) {
            options.headers = Object.assign({}, options.headers, headers);
        }
        if (Object.keys(body).length === 0) {
            delete options.body;
        }
        if (authenticationMethod === 'serviceAccount') {
            const credentials = await this.getCredentials('googleApi');
            if (credentials === undefined) {
                throw new n8n_workflow_1.NodeOperationError(this.getNode(), 'No credentials got returned!');
            }
            const { access_token } = await getAccessToken.call(this, credentials);
            options.headers.Authorization = `Bearer ${access_token}`;
            return await this.helpers.request(options);
        }
        else {
            return await this.helpers.requestOAuth2.call(this, 'googleTranslateOAuth2Api', options);
        }
    }
    catch (error) {
        throw new n8n_workflow_1.NodeApiError(this.getNode(), error);
    }
}
exports.googleApiRequest = googleApiRequest;
async function googleApiRequestAllItems(propertyName, method, endpoint, body = {}, query = {}) {
    const returnData = [];
    let responseData;
    query.maxResults = 100;
    do {
        responseData = await googleApiRequest.call(this, method, endpoint, body, query);
        query.pageToken = responseData['nextPageToken'];
        returnData.push.apply(returnData, responseData[propertyName]);
    } while (responseData['nextPageToken'] !== undefined &&
        responseData['nextPageToken'] !== '');
    return returnData;
}
exports.googleApiRequestAllItems = googleApiRequestAllItems;
function getAccessToken(credentials) {
    const scopes = [
        'https://www.googleapis.com/auth/cloud-translation',
        'https://www.googleapis.com/auth/cloud-platform',
    ];
    const now = moment().unix();
    const signature = jwt.sign({
        'iss': credentials.email,
        'sub': credentials.email,
        'scope': scopes.join(' '),
        'aud': `https://oauth2.googleapis.com/token`,
        'iat': now,
        'exp': now + 3600,
    }, credentials.privateKey, {
        algorithm: 'RS256',
        header: {
            'kid': credentials.privateKey,
            'typ': 'JWT',
            'alg': 'RS256',
        },
    });
    const options = {
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
        },
        method: 'POST',
        form: {
            grant_type: 'urn:ietf:params:oauth:grant-type:jwt-bearer',
            assertion: signature,
        },
        uri: 'https://oauth2.googleapis.com/token',
        json: true,
    };
    return this.helpers.request(options);
}
//# sourceMappingURL=GenericFunctions.js.map