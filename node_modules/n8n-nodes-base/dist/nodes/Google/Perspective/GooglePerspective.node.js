"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.GooglePerspective = void 0;
const n8n_workflow_1 = require("n8n-workflow");
const GenericFunctions_1 = require("./GenericFunctions");
const ISO6391 = require('iso-639-1');
class GooglePerspective {
    constructor() {
        this.description = {
            displayName: 'Google Perspective',
            name: 'googlePerspective',
            icon: 'file:perspective.svg',
            group: [
                'transform',
            ],
            version: 1,
            description: 'Consume Google Perspective API',
            subtitle: '={{$parameter["operation"]}}',
            defaults: {
                name: 'Google Perspective',
                color: '#200647',
            },
            inputs: [
                'main',
            ],
            outputs: [
                'main',
            ],
            credentials: [
                {
                    name: 'googlePerspectiveOAuth2Api',
                    required: true,
                },
            ],
            properties: [
                {
                    displayName: 'Operation',
                    name: 'operation',
                    type: 'options',
                    options: [
                        {
                            name: 'Analyze Comment',
                            value: 'analyzeComment',
                        },
                    ],
                    default: 'analyzeComment',
                },
                {
                    displayName: 'Text',
                    name: 'text',
                    type: 'string',
                    default: '',
                    required: true,
                    displayOptions: {
                        show: {
                            operation: [
                                'analyzeComment',
                            ],
                        },
                    },
                },
                {
                    displayName: 'Attributes to Analyze',
                    name: 'requestedAttributesUi',
                    type: 'fixedCollection',
                    default: '',
                    typeOptions: {
                        multipleValues: true,
                    },
                    placeholder: 'Add Atrribute',
                    required: true,
                    displayOptions: {
                        show: {
                            operation: [
                                'analyzeComment',
                            ],
                        },
                    },
                    options: [
                        {
                            displayName: 'Properties',
                            name: 'requestedAttributesValues',
                            values: [
                                {
                                    displayName: 'Attribute Name',
                                    name: 'attributeName',
                                    type: 'options',
                                    options: [
                                        {
                                            name: 'Flirtation',
                                            value: 'flirtation',
                                        },
                                        {
                                            name: 'Identity Attack',
                                            value: 'identity_attack',
                                        },
                                        {
                                            name: 'Insult',
                                            value: 'insult',
                                        },
                                        {
                                            name: 'Profanity',
                                            value: 'profanity',
                                        },
                                        {
                                            name: 'Severe Toxicity',
                                            value: 'severe_toxicity',
                                        },
                                        {
                                            name: 'Sexually Explicit',
                                            value: 'sexually_explicit',
                                        },
                                        {
                                            name: 'Threat',
                                            value: 'threat',
                                        },
                                        {
                                            name: 'Toxicity',
                                            value: 'toxicity',
                                        },
                                    ],
                                    description: 'Attribute to analyze in the text. Details <a href="https://developers.perspectiveapi.com/s/about-the-api-attributes-and-languages">here</a>',
                                    default: 'flirtation',
                                },
                                {
                                    displayName: 'Score Threshold',
                                    name: 'scoreThreshold',
                                    type: 'number',
                                    typeOptions: {
                                        numberStepSize: 0.1,
                                        numberPrecision: 2,
                                        minValue: 0,
                                        maxValue: 1,
                                    },
                                    description: 'Score above which to return results. At zero, all scores are returned.',
                                    default: 0,
                                },
                            ],
                        },
                    ],
                },
                {
                    displayName: 'Options',
                    name: 'options',
                    type: 'collection',
                    displayOptions: {
                        show: {
                            operation: [
                                'analyzeComment',
                            ],
                        },
                    },
                    default: {},
                    placeholder: 'Add Option',
                    options: [
                        {
                            displayName: 'Languages',
                            name: 'languages',
                            type: 'options',
                            typeOptions: {
                                loadOptionsMethod: 'getLanguages',
                            },
                            default: '',
                            description: 'Languages of the text input. If unspecified, the API will auto-detect the comment language',
                        },
                    ],
                },
            ],
        };
        this.methods = {
            loadOptions: {
                async getLanguages() {
                    const returnData = [];
                    const supportedLanguages = [
                        'English',
                        'Spanish',
                        'French',
                        'German',
                        'Portuguese',
                        'Italian',
                        'Russian',
                    ];
                    const languages = ISO6391.getAllNames().filter((language) => supportedLanguages.includes(language));
                    for (const language of languages) {
                        const languageName = language;
                        const languageId = ISO6391.getCode(language);
                        returnData.push({
                            name: languageName,
                            value: languageId,
                        });
                    }
                    return returnData;
                },
            },
        };
    }
    async execute() {
        const items = this.getInputData();
        const operation = this.getNodeParameter('operation', 0);
        const returnData = [];
        let responseData;
        for (let i = 0; i < items.length; i++) {
            try {
                if (operation === 'analyzeComment') {
                    const attributes = this.getNodeParameter('requestedAttributesUi.requestedAttributesValues', i, []);
                    if (!attributes.length) {
                        throw new n8n_workflow_1.NodeOperationError(this.getNode(), 'Please enter at least one attribute to analyze.');
                    }
                    const requestedAttributes = attributes.reduce((acc, cur) => {
                        return Object.assign(acc, {
                            [cur.attributeName.toUpperCase()]: {
                                scoreType: 'probability',
                                scoreThreshold: cur.scoreThreshold,
                            },
                        });
                    }, {});
                    const body = {
                        comment: {
                            type: 'PLAIN_TEXT',
                            text: this.getNodeParameter('text', i),
                        },
                        requestedAttributes,
                    };
                    const { languages } = this.getNodeParameter('options', i);
                    if (languages === null || languages === void 0 ? void 0 : languages.length) {
                        body.languages = languages;
                    }
                    responseData = await GenericFunctions_1.googleApiRequest.call(this, 'POST', '/v1alpha1/comments:analyze', body);
                }
            }
            catch (error) {
                if (this.continueOnFail()) {
                    returnData.push({ error: error.message });
                    continue;
                }
                throw error;
            }
            Array.isArray(responseData)
                ? returnData.push(...responseData)
                : returnData.push(responseData);
        }
        return [this.helpers.returnJsonArray(responseData)];
    }
}
exports.GooglePerspective = GooglePerspective;
//# sourceMappingURL=GooglePerspective.node.js.map