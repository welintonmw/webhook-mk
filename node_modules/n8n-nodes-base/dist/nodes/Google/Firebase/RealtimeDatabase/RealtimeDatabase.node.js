"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.RealtimeDatabase = void 0;
const n8n_workflow_1 = require("n8n-workflow");
const GenericFunctions_1 = require("./GenericFunctions");
class RealtimeDatabase {
    constructor() {
        this.description = {
            displayName: 'Google Cloud Realtime Database',
            name: 'googleFirebaseRealtimeDatabase',
            icon: 'file:googleFirebaseRealtimeDatabase.png',
            group: ['input'],
            version: 1,
            subtitle: '={{$parameter["operation"]}}',
            description: 'Interact with Google Firebase - Realtime Database API',
            defaults: {
                name: 'Google Cloud Realtime Database',
                color: '#ffcb2d',
            },
            inputs: ['main'],
            outputs: ['main'],
            credentials: [
                {
                    name: 'googleFirebaseRealtimeDatabaseOAuth2Api',
                },
            ],
            properties: [
                {
                    displayName: 'Project ID',
                    name: 'projectId',
                    type: 'options',
                    default: '',
                    typeOptions: {
                        loadOptionsMethod: 'getProjects',
                    },
                    description: 'As displayed in firebase console URL',
                    required: true,
                },
                {
                    displayName: 'Operation',
                    name: 'operation',
                    type: 'options',
                    options: [
                        {
                            name: 'Create',
                            value: 'create',
                            description: 'Write data to a database',
                        },
                        {
                            name: 'Delete',
                            value: 'delete',
                            description: 'Delete data from a database',
                        },
                        {
                            name: 'Get',
                            value: 'get',
                            description: 'Get a record from a database',
                        },
                        {
                            name: 'Push',
                            value: 'push',
                            description: 'Append to a list of data',
                        },
                        {
                            name: 'Update',
                            value: 'update',
                            description: 'Update item on a database',
                        },
                    ],
                    default: 'create',
                    description: 'The operation to perform.',
                    required: true,
                },
                {
                    displayName: 'Object Path',
                    name: 'path',
                    type: 'string',
                    default: '',
                    placeholder: '/app/users',
                    description: 'Object path on database. With leading slash. Do not append .json.',
                    required: true,
                },
                {
                    displayName: 'Columns / Attributes',
                    name: 'attributes',
                    type: 'string',
                    default: '',
                    displayOptions: {
                        show: {
                            operation: [
                                'create',
                                'push',
                                'update',
                            ],
                        },
                    },
                    description: 'Attributes to save',
                    required: true,
                    placeholder: 'age, name, city',
                },
            ],
        };
        this.methods = {
            loadOptions: {
                async getProjects() {
                    const projects = await GenericFunctions_1.googleApiRequestAllItems.call(this, 'projects', 'GET', 'results', {}, {}, {}, 'https://firebase.googleapis.com/v1beta1/projects');
                    const returnData = projects.map((o) => ({ name: o.projectId, value: o.projectId }));
                    return returnData;
                },
            },
        };
    }
    async execute() {
        const items = this.getInputData();
        const returnData = [];
        const length = items.length;
        let responseData;
        const operation = this.getNodeParameter('operation', 0);
        if (['push', 'create', 'update'].includes(operation) && items.length === 1 && Object.keys(items[0].json).length === 0) {
            throw new n8n_workflow_1.NodeOperationError(this.getNode(), `The ${operation} operation needs input data`);
        }
        for (let i = 0; i < length; i++) {
            try {
                const projectId = this.getNodeParameter('projectId', i);
                let method = 'GET', attributes = '';
                const document = {};
                if (operation === 'create') {
                    method = 'PUT';
                    attributes = this.getNodeParameter('attributes', i);
                }
                else if (operation === 'delete') {
                    method = 'DELETE';
                }
                else if (operation === 'get') {
                    method = 'GET';
                }
                else if (operation === 'push') {
                    method = 'POST';
                    attributes = this.getNodeParameter('attributes', i);
                }
                else if (operation === 'update') {
                    method = 'PATCH';
                    attributes = this.getNodeParameter('attributes', i);
                }
                if (attributes) {
                    const attributeList = attributes.split(',').map(el => el.trim());
                    attributeList.map((attribute) => {
                        if (items[i].json.hasOwnProperty(attribute)) {
                            document[attribute] = items[i].json[attribute];
                        }
                    });
                }
                responseData = await GenericFunctions_1.googleApiRequest.call(this, projectId, method, this.getNodeParameter('path', i), document);
                if (responseData === null) {
                    if (operation === 'get') {
                        throw new n8n_workflow_1.NodeApiError(this.getNode(), responseData, { message: `Requested entity was not found.` });
                    }
                    else if (method === 'DELETE') {
                        responseData = { success: true };
                    }
                }
            }
            catch (error) {
                if (this.continueOnFail()) {
                    returnData.push({ error: error.message });
                    continue;
                }
                throw error;
            }
            if (Array.isArray(responseData)) {
                returnData.push.apply(returnData, responseData);
            }
            else if (typeof responseData === 'string' || typeof responseData === 'number') {
                returnData.push({ [this.getNodeParameter('path', i)]: responseData });
            }
            else {
                returnData.push(responseData);
            }
        }
        return [this.helpers.returnJsonArray(returnData)];
    }
}
exports.RealtimeDatabase = RealtimeDatabase;
//# sourceMappingURL=RealtimeDatabase.node.js.map