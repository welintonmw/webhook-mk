"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.TheHiveTrigger = void 0;
class TheHiveTrigger {
    constructor() {
        this.description = {
            displayName: 'TheHive Trigger',
            name: 'theHiveTrigger',
            icon: 'file:thehive.svg',
            group: ['trigger'],
            version: 1,
            description: 'Starts the workflow when TheHive events occur',
            defaults: {
                name: 'TheHive Trigger',
                color: '#f3d02f',
            },
            inputs: [],
            outputs: ['main'],
            webhooks: [
                {
                    name: 'default',
                    httpMethod: 'POST',
                    reponseMode: 'onReceived',
                    path: 'webhook',
                },
            ],
            properties: [
                {
                    displayName: 'Events',
                    name: 'events',
                    type: 'multiOptions',
                    default: [],
                    required: true,
                    description: 'Events types',
                    options: [
                        {
                            name: '*',
                            value: '*',
                            description: 'Any time any event is triggered (Wildcard Event).',
                        },
                        {
                            name: 'Alert Created',
                            value: 'alert_create',
                            description: 'Triggered when an alert is created',
                        },
                        {
                            name: 'Alert Updated',
                            value: 'alert_update',
                            description: 'Triggered when an alert is updated',
                        },
                        {
                            name: 'Alert Deleted',
                            value: 'alert_delete',
                            description: 'Triggered when an alert is deleted',
                        },
                        {
                            name: 'Observable Created',
                            value: 'case_artifact_create',
                            description: 'Triggered when an observable is created',
                        },
                        {
                            name: 'Observable Updated',
                            value: 'case_artifact_update',
                            description: 'Triggered when an observable is updated',
                        },
                        {
                            name: 'Observable Deleted',
                            value: 'case_artifact_delete',
                            description: 'Triggered when an observable is deleted',
                        },
                        {
                            name: 'Case Created',
                            value: 'case_create',
                            description: 'Triggered when a case is created',
                        },
                        {
                            name: 'Case Updated',
                            value: 'case_update',
                            description: 'Triggered when a case is updated',
                        },
                        {
                            name: 'Case Deleted',
                            value: 'case_delete',
                            description: 'Triggered when a case is deleted',
                        },
                        {
                            name: 'Task Created',
                            value: 'case_task_create',
                            description: 'Triggered when a task is created',
                        },
                        {
                            name: 'Task Updated',
                            value: 'case_task_update',
                            description: 'Triggered when a task is updated',
                        },
                        {
                            name: 'Task Deleted',
                            value: 'case_task_delete',
                            description: 'Triggered when a task is deleted',
                        },
                        {
                            name: 'Log Created',
                            value: 'case_task_log_create',
                            description: 'Triggered when a task log is created',
                        },
                        {
                            name: 'Log Updated',
                            value: 'case_task_log_update',
                            description: 'Triggered when a task log is updated',
                        },
                        {
                            name: 'Log Deleted',
                            value: 'case_task_log_delete',
                            description: 'Triggered when a task log is deleted',
                        },
                    ],
                },
            ],
        };
        this.webhookMethods = {
            default: {
                async checkExists() {
                    return true;
                },
                async create() {
                    return true;
                },
                async delete() {
                    return true;
                },
            },
        };
    }
    async webhook() {
        const bodyData = this.getBodyData();
        const events = this.getNodeParameter('events', []);
        if (!bodyData.operation || !bodyData.objectType) {
            return {};
        }
        const operation = bodyData.operation.replace('Creation', 'Create');
        const event = `${bodyData.objectType.toLowerCase()}_${operation.toLowerCase()}`;
        if (events.indexOf('*') === -1 && events.indexOf(event) === -1) {
            return {};
        }
        const returnData = [];
        returnData.push({
            event,
            body: this.getBodyData(),
            headers: this.getHeaderData(),
            query: this.getQueryData(),
        });
        return {
            workflowData: [
                this.helpers.returnJsonArray(returnData),
            ],
        };
    }
}
exports.TheHiveTrigger = TheHiveTrigger;
//# sourceMappingURL=TheHiveTrigger.node.js.map