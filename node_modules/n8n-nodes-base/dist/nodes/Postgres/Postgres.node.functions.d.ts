import { IDataObject, INodeExecutionData } from 'n8n-workflow';
import pgPromise = require('pg-promise');
import pg = require('pg-promise/typescript/pg-subset');
export declare function getItemsCopy(items: INodeExecutionData[], properties: string[]): IDataObject[];
export declare function getItemCopy(item: INodeExecutionData, properties: string[]): IDataObject;
export declare function generateReturning(pgp: pgPromise.IMain<{}, pg.IClient>, returning: string): string;
export declare function pgQuery(getNodeParam: Function, pgp: pgPromise.IMain<{}, pg.IClient>, db: pgPromise.IDatabase<{}, pg.IClient>, items: INodeExecutionData[], continueOnFail: boolean, overrideMode?: string): Promise<IDataObject[]>;
export declare function pgInsert(getNodeParam: Function, pgp: pgPromise.IMain<{}, pg.IClient>, db: pgPromise.IDatabase<{}, pg.IClient>, items: INodeExecutionData[], continueOnFail: boolean, overrideMode?: string): Promise<IDataObject[]>;
export declare function pgUpdate(getNodeParam: Function, pgp: pgPromise.IMain<{}, pg.IClient>, db: pgPromise.IDatabase<{}, pg.IClient>, items: INodeExecutionData[], continueOnFail?: boolean): Promise<IDataObject[]>;
