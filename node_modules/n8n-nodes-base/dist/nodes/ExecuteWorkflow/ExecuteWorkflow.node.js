"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ExecuteWorkflow = void 0;
const n8n_workflow_1 = require("n8n-workflow");
const utilities_1 = require("../../utils/utilities");
const GenericFunctions_1 = require("./GenericFunctions");
class ExecuteWorkflow {
    constructor() {
        this.description = {
            displayName: 'Execute Workflow',
            name: 'executeWorkflow',
            icon: 'fa:sign-in-alt',
            iconColor: 'orange-red',
            group: ['transform'],
            version: 1,
            subtitle: '={{"Workflow: " + $parameter["workflowId"]}}',
            description: 'Execute another workflow',
            defaults: {
                name: 'Execute Workflow',
                color: '#ff6d5a',
            },
            inputs: ['main'],
            outputs: ['main'],
            properties: [
                {
                    displayName: 'Operation',
                    name: 'operation',
                    type: 'hidden',
                    noDataExpression: true,
                    default: 'call_workflow',
                    options: [
                        {
                            name: 'Call Another Workflow',
                            value: 'call_workflow',
                        },
                    ],
                },
                {
                    displayName: 'Source',
                    name: 'source',
                    type: 'options',
                    options: [
                        {
                            name: 'Database',
                            value: 'database',
                            description: 'Load the workflow from the database by ID',
                        },
                        {
                            name: 'Local File',
                            value: 'localFile',
                            description: 'Load the workflow from a locally saved file',
                        },
                        {
                            name: 'Parameter',
                            value: 'parameter',
                            description: 'Load the workflow from a parameter',
                        },
                        {
                            name: 'URL',
                            value: 'url',
                            description: 'Load the workflow from an URL',
                        },
                    ],
                    default: 'database',
                    description: 'Where to get the workflow to execute from',
                },
                {
                    displayName: 'Workflow ID',
                    name: 'workflowId',
                    type: 'string',
                    displayOptions: {
                        show: {
                            source: ['database'],
                        },
                    },
                    default: '',
                    required: true,
                    hint: 'Can be found in the URL of the workflow',
                    description: "Note on using an expression here: if this node is set to run once with all items, they will all be sent to the <em>same</em> workflow. That workflow's ID will be calculated by evaluating the expression for the <strong>first input item</strong>.",
                },
                {
                    displayName: 'Workflow Path',
                    name: 'workflowPath',
                    type: 'string',
                    displayOptions: {
                        show: {
                            source: ['localFile'],
                        },
                    },
                    default: '',
                    placeholder: '/data/workflow.json',
                    required: true,
                    description: 'The path to local JSON workflow file to execute',
                },
                {
                    displayName: 'Workflow JSON',
                    name: 'workflowJson',
                    type: 'json',
                    typeOptions: {
                        rows: 10,
                    },
                    displayOptions: {
                        show: {
                            source: ['parameter'],
                        },
                    },
                    default: '\n\n\n',
                    required: true,
                    description: 'The workflow JSON code to execute',
                },
                {
                    displayName: 'Workflow URL',
                    name: 'workflowUrl',
                    type: 'string',
                    displayOptions: {
                        show: {
                            source: ['url'],
                        },
                    },
                    default: '',
                    placeholder: 'https://example.com/workflow.json',
                    required: true,
                    description: 'The URL from which to load the workflow from',
                },
                {
                    displayName: 'Any data you pass into this node will be output by the Execute Workflow Trigger. <a href="https://docs.n8n.io/integrations/builtin/core-nodes/n8n-nodes-base.executeworkflow/" target="_blank">More info</a>',
                    name: 'executeWorkflowNotice',
                    type: 'notice',
                    default: '',
                },
                {
                    displayName: 'Mode',
                    name: 'mode',
                    type: 'options',
                    noDataExpression: true,
                    options: [
                        {
                            name: 'Run once with all items',
                            value: 'once',
                            description: 'Pass all items into a single execution of the sub-workflow',
                        },
                        {
                            name: 'Run once for each item',
                            value: 'each',
                            description: 'Call the sub-workflow individually for each item',
                        },
                    ],
                    default: 'once',
                },
                {
                    displayName: 'Options',
                    name: 'options',
                    type: 'collection',
                    default: {},
                    placeholder: 'Add Option',
                    options: [
                        {
                            displayName: 'Wait For Sub-Workflow Completion',
                            name: 'waitForSubWorkflow',
                            type: 'boolean',
                            default: true,
                            description: 'Whether the main workflow should wait for the sub-workflow to complete its execution before proceeding',
                        },
                    ],
                },
            ],
        };
    }
    async execute() {
        const source = this.getNodeParameter('source', 0);
        const mode = this.getNodeParameter('mode', 0, false);
        const items = this.getInputData();
        if (mode === 'each') {
            let returnData = [];
            for (let i = 0; i < items.length; i++) {
                try {
                    const waitForSubWorkflow = this.getNodeParameter('options.waitForSubWorkflow', i, true);
                    const workflowInfo = await GenericFunctions_1.getWorkflowInfo.call(this, source, i);
                    if (waitForSubWorkflow) {
                        const workflowResult = await this.executeWorkflow(workflowInfo, [items[i]]);
                        for (const [outputIndex, outputData] of workflowResult.entries()) {
                            for (const item of outputData) {
                                item.pairedItem = { item: i };
                            }
                            if (returnData[outputIndex] === undefined) {
                                returnData[outputIndex] = [];
                            }
                            returnData[outputIndex].push(...outputData);
                        }
                    }
                    else {
                        void this.executeWorkflow(workflowInfo, [items[i]]);
                        returnData = [items];
                    }
                }
                catch (error) {
                    if (this.continueOnFail(error)) {
                        return [[{ json: { error: error.message }, pairedItem: { item: i } }]];
                    }
                    throw new n8n_workflow_1.NodeOperationError(this.getNode(), error, {
                        message: `Error executing workflow with item at index ${i}`,
                        description: error.message,
                        itemIndex: i,
                    });
                }
            }
            return returnData;
        }
        else {
            try {
                const waitForSubWorkflow = this.getNodeParameter('options.waitForSubWorkflow', 0, true);
                const workflowInfo = await GenericFunctions_1.getWorkflowInfo.call(this, source);
                if (!waitForSubWorkflow) {
                    void this.executeWorkflow(workflowInfo, items);
                    return [items];
                }
                const workflowResult = await this.executeWorkflow(workflowInfo, items);
                const fallbackPairedItemData = (0, utilities_1.generatePairedItemData)(items.length);
                for (const output of workflowResult) {
                    const sameLength = output.length === items.length;
                    for (const [itemIndex, item] of output.entries()) {
                        if (item.pairedItem)
                            continue;
                        if (sameLength) {
                            item.pairedItem = { item: itemIndex };
                        }
                        else {
                            item.pairedItem = fallbackPairedItemData;
                        }
                    }
                }
                return workflowResult;
            }
            catch (error) {
                const pairedItem = (0, utilities_1.generatePairedItemData)(items.length);
                if (this.continueOnFail(error)) {
                    return [[{ json: { error: error.message }, pairedItem }]];
                }
                throw error;
            }
        }
    }
}
exports.ExecuteWorkflow = ExecuteWorkflow;
//# sourceMappingURL=ExecuteWorkflow.node.js.map