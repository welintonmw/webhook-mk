"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ReadPdf = void 0;
const n8n_core_1 = require("n8n-core");
const pdf = require('pdf-parse');
class ReadPdf {
    constructor() {
        this.description = {
            displayName: 'Read PDF',
            name: 'readPDF',
            icon: 'fa:file-pdf',
            group: ['input'],
            version: 1,
            description: 'Reads a PDF and extracts its content',
            defaults: {
                name: 'Read PDF',
                color: '#003355',
            },
            inputs: ['main'],
            outputs: ['main'],
            properties: [
                {
                    displayName: 'Binary Property',
                    name: 'binaryPropertyName',
                    type: 'string',
                    default: 'data',
                    required: true,
                    description: 'Name of the binary property from which to read the PDF file.',
                },
            ],
        };
    }
    async execute() {
        const items = this.getInputData();
        const returnData = [];
        const length = items.length;
        let item;
        for (let itemIndex = 0; itemIndex < length; itemIndex++) {
            try {
                item = items[itemIndex];
                const binaryPropertyName = this.getNodeParameter('binaryPropertyName', itemIndex);
                if (item.binary === undefined) {
                    item.binary = {};
                }
                const binaryData = Buffer.from(item.binary[binaryPropertyName].data, n8n_core_1.BINARY_ENCODING);
                returnData.push({
                    binary: item.binary,
                    json: await pdf(binaryData),
                });
            }
            catch (error) {
                if (this.continueOnFail()) {
                    returnData.push({ json: { error: error.message } });
                    continue;
                }
                throw error;
            }
        }
        return this.prepareOutputData(returnData);
    }
}
exports.ReadPdf = ReadPdf;
//# sourceMappingURL=ReadPdf.node.js.map