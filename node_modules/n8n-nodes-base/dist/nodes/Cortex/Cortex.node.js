"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Cortex = void 0;
const n8n_core_1 = require("n8n-core");
const GenericFunctions_1 = require("./GenericFunctions");
const AnalyzerDescriptions_1 = require("./AnalyzerDescriptions");
const n8n_workflow_1 = require("n8n-workflow");
const ResponderDescription_1 = require("./ResponderDescription");
const JobDescription_1 = require("./JobDescription");
const lodash_1 = require("lodash");
const crypto_1 = require("crypto");
const changeCase = require("change-case");
class Cortex {
    constructor() {
        this.description = {
            displayName: 'Cortex',
            name: 'cortex',
            icon: 'file:cortex.svg',
            group: ['transform'],
            subtitle: '={{$parameter["resource"]+ ": " + $parameter["operation"]}}',
            version: 1,
            description: 'Apply the Cortex analyzer/responder on the given entity',
            defaults: {
                name: 'Cortex',
                color: '#54c4c3',
            },
            inputs: ['main'],
            outputs: ['main'],
            credentials: [
                {
                    name: 'cortexApi',
                    required: true,
                },
            ],
            properties: [
                {
                    displayName: 'Resource',
                    name: 'resource',
                    type: 'options',
                    options: [
                        {
                            name: 'Analyzer',
                            value: 'analyzer',
                        },
                        {
                            name: 'Job',
                            value: 'job',
                        },
                        {
                            name: 'Responder',
                            value: 'responder',
                        },
                    ],
                    default: 'analyzer',
                    description: 'Choose a resource',
                    required: true,
                },
                ...AnalyzerDescriptions_1.analyzersOperations,
                ...AnalyzerDescriptions_1.analyzerFields,
                ...ResponderDescription_1.respondersOperations,
                ...ResponderDescription_1.responderFields,
                ...JobDescription_1.jobOperations,
                ...JobDescription_1.jobFields,
            ],
        };
        this.methods = {
            loadOptions: {
                async loadActiveAnalyzers() {
                    const requestResult = await GenericFunctions_1.cortexApiRequest.call(this, 'POST', `/analyzer/_search`);
                    const returnData = [];
                    for (const analyzer of requestResult) {
                        returnData.push({
                            name: analyzer.name,
                            value: `${analyzer.id}::${analyzer.name}`,
                            description: analyzer.description,
                        });
                    }
                    return returnData;
                },
                async loadActiveResponders() {
                    const requestResult = await GenericFunctions_1.cortexApiRequest.call(this, 'GET', `/responder`);
                    const returnData = [];
                    for (const responder of requestResult) {
                        returnData.push({
                            name: responder.name,
                            value: `${responder.id}::${responder.name}`,
                            description: responder.description,
                        });
                    }
                    return returnData;
                },
                async loadObservableOptions() {
                    const selectedAnalyzerId = this.getNodeParameter('analyzer').split('::')[0];
                    const requestResult = await GenericFunctions_1.cortexApiRequest.call(this, 'GET', `/analyzer/${selectedAnalyzerId}`);
                    const returnData = [];
                    for (const dataType of requestResult.dataTypeList) {
                        returnData.push({
                            name: lodash_1.upperFirst(dataType),
                            value: dataType,
                        });
                    }
                    return returnData;
                },
                async loadDataTypeOptions() {
                    const selectedResponderId = this.getNodeParameter('responder').split('::')[0];
                    const requestResult = await GenericFunctions_1.cortexApiRequest.call(this, 'GET', `/responder/${selectedResponderId}`);
                    const returnData = [];
                    for (const dataType of requestResult.dataTypeList) {
                        returnData.push({
                            value: dataType.split(':')[1],
                            name: changeCase.capitalCase(dataType.split(':')[1]),
                        });
                    }
                    return returnData;
                },
            },
        };
    }
    async execute() {
        const items = this.getInputData();
        const returnData = [];
        const length = items.length;
        const qs = {};
        let responseData;
        const resource = this.getNodeParameter('resource', 0);
        const operation = this.getNodeParameter('operation', 0);
        for (let i = 0; i < length; i++) {
            try {
                if (resource === 'analyzer') {
                    if (operation === 'execute') {
                        let force = false;
                        const analyzer = this.getNodeParameter('analyzer', i);
                        const observableType = this.getNodeParameter('observableType', i);
                        const additionalFields = this.getNodeParameter('additionalFields', i);
                        const tlp = this.getNodeParameter('tlp', i);
                        const body = {
                            dataType: observableType,
                            tlp,
                        };
                        if (additionalFields.force === true) {
                            force = true;
                        }
                        if (observableType === 'file') {
                            const item = items[i];
                            if (item.binary === undefined) {
                                throw new n8n_workflow_1.NodeOperationError(this.getNode(), 'No binary data exists on item!');
                            }
                            const binaryPropertyName = this.getNodeParameter('binaryPropertyName', i);
                            if (item.binary[binaryPropertyName] === undefined) {
                                throw new n8n_workflow_1.NodeOperationError(this.getNode(), `No binary data property "${binaryPropertyName}" does not exists on item!`);
                            }
                            const fileBufferData = Buffer.from(item.binary[binaryPropertyName].data, n8n_core_1.BINARY_ENCODING);
                            const options = {
                                formData: {
                                    data: {
                                        value: fileBufferData,
                                        options: {
                                            contentType: item.binary[binaryPropertyName].mimeType,
                                            filename: item.binary[binaryPropertyName].fileName,
                                        },
                                    },
                                    _json: JSON.stringify({
                                        dataType: observableType,
                                        tlp,
                                    }),
                                },
                            };
                            responseData = await GenericFunctions_1.cortexApiRequest.call(this, 'POST', `/analyzer/${analyzer.split('::')[0]}/run`, {}, { force }, '', options);
                            continue;
                        }
                        else {
                            const observableValue = this.getNodeParameter('observableValue', i);
                            body.data = observableValue;
                            responseData = await GenericFunctions_1.cortexApiRequest.call(this, 'POST', `/analyzer/${analyzer.split('::')[0]}/run`, body, { force });
                        }
                        if (additionalFields.timeout) {
                            responseData = await GenericFunctions_1.cortexApiRequest.call(this, 'GET', `/job/${responseData.id}/waitreport`, {}, { atMost: `${additionalFields.timeout}second` });
                        }
                    }
                }
                if (resource === 'job') {
                    if (operation === 'get') {
                        const jobId = this.getNodeParameter('jobId', i);
                        responseData = await GenericFunctions_1.cortexApiRequest.call(this, 'GET', `/job/${jobId}`);
                    }
                    if (operation === 'report') {
                        const jobId = this.getNodeParameter('jobId', i);
                        responseData = await GenericFunctions_1.cortexApiRequest.call(this, 'GET', `/job/${jobId}/report`);
                    }
                }
                if (resource === 'responder') {
                    if (operation === 'execute') {
                        const responderId = this.getNodeParameter('responder', i).split('::')[0];
                        const entityType = this.getNodeParameter('entityType', i);
                        const isJSON = this.getNodeParameter('jsonObject', i);
                        let body;
                        if (isJSON) {
                            const entityJson = JSON.parse(this.getNodeParameter('objectData', i));
                            body = {
                                responderId,
                                label: GenericFunctions_1.getEntityLabel(entityJson),
                                dataType: `thehive:${entityType}`,
                                data: entityJson,
                                tlp: entityJson.tlp || 2,
                                pap: entityJson.pap || 2,
                                message: entityJson.message || '',
                                parameters: [],
                            };
                        }
                        else {
                            const values = this.getNodeParameter('parameters', i).values;
                            body = {
                                responderId,
                                dataType: `thehive:${entityType}`,
                                data: Object.assign({ _type: entityType }, GenericFunctions_1.prepareParameters(values)),
                            };
                            if (entityType === 'alert') {
                                const artifacts = body.data.artifacts;
                                if (artifacts) {
                                    const artifactValues = artifacts.artifactValues;
                                    if (artifactValues) {
                                        const artifactData = [];
                                        for (const artifactvalue of artifactValues) {
                                            const element = {};
                                            element.message = artifactvalue.message;
                                            element.tags = GenericFunctions_1.splitTags(artifactvalue.tags);
                                            element.dataType = artifactvalue.dataType;
                                            element.data = artifactvalue.data;
                                            if (artifactvalue.dataType === 'file') {
                                                const item = items[i];
                                                if (item.binary === undefined) {
                                                    throw new n8n_workflow_1.NodeOperationError(this.getNode(), 'No binary data exists on item!');
                                                }
                                                const binaryPropertyName = artifactvalue.binaryProperty;
                                                if (item.binary[binaryPropertyName] === undefined) {
                                                    throw new n8n_workflow_1.NodeOperationError(this.getNode(), `No binary data property '${binaryPropertyName}' does not exists on item!`);
                                                }
                                                const binaryData = item.binary[binaryPropertyName];
                                                element.data = `${binaryData.fileName};${binaryData.mimeType};${binaryData.data}`;
                                            }
                                            artifactData.push(element);
                                        }
                                        body.data.artifacts = artifactData;
                                    }
                                }
                            }
                            if (entityType === 'case_artifact') {
                                if (body.data.dataType === 'file') {
                                    const item = items[i];
                                    if (item.binary === undefined) {
                                        throw new n8n_workflow_1.NodeOperationError(this.getNode(), 'No binary data exists on item!');
                                    }
                                    const binaryPropertyName = body.data.binaryPropertyName;
                                    if (item.binary[binaryPropertyName] === undefined) {
                                        throw new n8n_workflow_1.NodeOperationError(this.getNode(), `No binary data property "${binaryPropertyName}" does not exists on item!`);
                                    }
                                    const fileBufferData = Buffer.from(item.binary[binaryPropertyName].data, n8n_core_1.BINARY_ENCODING);
                                    const sha256 = crypto_1.createHash('sha256').update(fileBufferData).digest('hex');
                                    body.data.attachment = {
                                        name: item.binary[binaryPropertyName].fileName,
                                        hashes: [
                                            sha256,
                                            crypto_1.createHash('sha1').update(fileBufferData).digest('hex'),
                                            crypto_1.createHash('md5').update(fileBufferData).digest('hex'),
                                        ],
                                        size: fileBufferData.byteLength,
                                        contentType: item.binary[binaryPropertyName].mimeType,
                                        id: sha256,
                                    };
                                    delete body.data.binaryPropertyName;
                                }
                            }
                            body = Object.assign({ label: GenericFunctions_1.getEntityLabel(body.data) }, body);
                        }
                        responseData = await GenericFunctions_1.cortexApiRequest.call(this, 'POST', `/responder/${responderId}/run`, body);
                    }
                }
                if (Array.isArray(responseData)) {
                    returnData.push.apply(returnData, responseData);
                }
                else if (responseData !== undefined) {
                    returnData.push(responseData);
                }
            }
            catch (error) {
                if (this.continueOnFail()) {
                    returnData.push({ error: error.message });
                    continue;
                }
                throw error;
            }
        }
        return [this.helpers.returnJsonArray(returnData)];
    }
}
exports.Cortex = Cortex;
//# sourceMappingURL=Cortex.node.js.map