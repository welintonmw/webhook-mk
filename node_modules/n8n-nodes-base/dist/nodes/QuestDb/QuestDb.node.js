"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.QuestDb = void 0;
const n8n_workflow_1 = require("n8n-workflow");
const pgPromise = require("pg-promise");
const Postgres_node_functions_1 = require("../Postgres/Postgres.node.functions");
class QuestDb {
    constructor() {
        this.description = {
            displayName: 'QuestDB',
            name: 'questDb',
            icon: 'file:questdb.png',
            group: ['input'],
            version: 1,
            description: 'Get, add and update data in QuestDB',
            defaults: {
                name: 'QuestDB',
                color: '#2C4A79',
            },
            inputs: ['main'],
            outputs: ['main'],
            credentials: [
                {
                    name: 'questDb',
                    required: true,
                },
            ],
            properties: [
                {
                    displayName: 'Operation',
                    name: 'operation',
                    type: 'options',
                    options: [
                        {
                            name: 'Execute Query',
                            value: 'executeQuery',
                            description: 'Executes a SQL query.',
                        },
                        {
                            name: 'Insert',
                            value: 'insert',
                            description: 'Insert rows in database.',
                        },
                    ],
                    default: 'insert',
                    description: 'The operation to perform.',
                },
                {
                    displayName: 'Query',
                    name: 'query',
                    type: 'string',
                    typeOptions: {
                        alwaysOpenEditWindow: true,
                    },
                    displayOptions: {
                        show: {
                            operation: [
                                'executeQuery',
                            ],
                        },
                    },
                    default: '',
                    placeholder: 'SELECT id, name FROM product WHERE quantity > $1 AND price <= $2',
                    required: true,
                    description: 'The SQL query to execute. You can use n8n expressions or $1 and $2 in conjunction with query parameters.',
                },
                {
                    displayName: 'Schema',
                    name: 'schema',
                    type: 'hidden',
                    displayOptions: {
                        show: {
                            operation: [
                                'insert',
                            ],
                        },
                    },
                    default: '',
                    description: 'Name of the schema the table belongs to',
                },
                {
                    displayName: 'Table',
                    name: 'table',
                    type: 'string',
                    displayOptions: {
                        show: {
                            operation: [
                                'insert',
                            ],
                        },
                    },
                    default: '',
                    required: true,
                    description: 'Name of the table in which to insert data to.',
                },
                {
                    displayName: 'Columns',
                    name: 'columns',
                    type: 'string',
                    displayOptions: {
                        show: {
                            operation: ['insert'],
                        },
                    },
                    default: '',
                    placeholder: 'id,name,description',
                    description: 'Comma separated list of the properties which should used as columns for the new rows.',
                },
                {
                    displayName: 'Return Fields',
                    name: 'returnFields',
                    type: 'string',
                    displayOptions: {
                        show: {
                            operation: ['insert'],
                        },
                    },
                    default: '*',
                    description: 'Comma separated list of the fields that the operation will return',
                },
                {
                    displayName: 'Additional Fields',
                    name: 'additionalFields',
                    type: 'collection',
                    placeholder: 'Add Field',
                    default: {},
                    displayOptions: {
                        show: {
                            operation: [
                                'executeQuery',
                            ],
                        },
                    },
                    options: [
                        {
                            displayName: 'Mode',
                            name: 'mode',
                            type: 'options',
                            options: [
                                {
                                    name: 'Independently',
                                    value: 'independently',
                                    description: 'Execute each query independently',
                                },
                                {
                                    name: 'Transaction',
                                    value: 'transaction',
                                    description: 'Executes all queries in a single transaction',
                                },
                            ],
                            default: 'independently',
                            description: [
                                'The way queries should be sent to database.',
                                'Can be used in conjunction with <b>Continue on Fail</b>.',
                                'See the docs for more examples',
                            ].join('<br>'),
                        },
                        {
                            displayName: 'Query Parameters',
                            name: 'queryParams',
                            type: 'string',
                            displayOptions: {
                                show: {
                                    '/operation': [
                                        'executeQuery',
                                    ],
                                },
                            },
                            default: '',
                            placeholder: 'quantity,price',
                            description: 'Comma separated list of properties which should be used as query parameters.',
                        },
                    ],
                },
                {
                    displayName: 'Additional Fields',
                    name: 'additionalFields',
                    type: 'hidden',
                    default: {},
                    displayOptions: {
                        show: {
                            operation: [
                                'insert',
                            ],
                        },
                    },
                },
            ],
        };
    }
    async execute() {
        const credentials = await this.getCredentials('questDb');
        if (credentials === undefined) {
            throw new n8n_workflow_1.NodeOperationError(this.getNode(), 'No credentials got returned!');
        }
        const pgp = pgPromise();
        const config = {
            host: credentials.host,
            port: credentials.port,
            database: credentials.database,
            user: credentials.user,
            password: credentials.password,
            ssl: !['disable', undefined].includes(credentials.ssl),
            sslmode: credentials.ssl || 'disable',
        };
        const db = pgp(config);
        let returnItems = [];
        const items = this.getInputData();
        const operation = this.getNodeParameter('operation', 0);
        if (operation === 'executeQuery') {
            const additionalFields = this.getNodeParameter('additionalFields', 0);
            const mode = (additionalFields.mode || 'independently');
            const queryResult = await Postgres_node_functions_1.pgQuery(this.getNodeParameter, pgp, db, items, this.continueOnFail(), mode);
            returnItems = this.helpers.returnJsonArray(queryResult);
        }
        else if (operation === 'insert') {
            await Postgres_node_functions_1.pgInsert(this.getNodeParameter, pgp, db, items, this.continueOnFail(), 'independently');
            const returnFields = this.getNodeParameter('returnFields', 0);
            const table = this.getNodeParameter('table', 0);
            const insertData = await db.any('SELECT ${columns:name} from ${table:name}', {
                columns: returnFields.split(',').map(value => value.trim()).filter(value => !!value),
                table,
            });
            returnItems = this.helpers.returnJsonArray(insertData);
        }
        else {
            await pgp.end();
            throw new n8n_workflow_1.NodeOperationError(this.getNode(), `The operation "${operation}" is not supported!`);
        }
        await pgp.end();
        return this.prepareOutputData(returnItems);
    }
}
exports.QuestDb = QuestDb;
//# sourceMappingURL=QuestDb.node.js.map