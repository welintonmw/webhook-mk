"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.WhatsAppTrigger = void 0;
const crypto_1 = require("crypto");
const n8n_workflow_1 = require("n8n-workflow");
const GenericFunctions_1 = require("./GenericFunctions");
const WhatsappDescription_1 = require("./WhatsappDescription");
class WhatsAppTrigger {
    constructor() {
        this.description = {
            displayName: 'WhatsApp Trigger',
            name: 'whatsAppTrigger',
            icon: 'file:whatsapp.svg',
            group: ['trigger'],
            version: 1,
            subtitle: '={{$parameter["event"]}}',
            description: 'Handle WhatsApp events via webhooks',
            defaults: {
                name: 'WhatsApp Trigger',
            },
            inputs: [],
            outputs: ['main'],
            credentials: [
                {
                    name: 'whatsAppTriggerApi',
                    required: true,
                },
            ],
            webhooks: [
                {
                    name: 'setup',
                    httpMethod: 'GET',
                    responseMode: 'onReceived',
                    path: 'webhook',
                },
                {
                    name: 'default',
                    httpMethod: 'POST',
                    responseMode: 'onReceived',
                    path: 'webhook',
                },
            ],
            properties: [
                {
                    displayName: 'Due to Facebook API limitations, you can use just one WhatsApp trigger for each Facebook App',
                    name: 'whatsAppNotice',
                    type: 'notice',
                    default: '',
                },
                ...WhatsappDescription_1.whatsappTriggerDescription,
            ],
        };
        this.webhookMethods = {
            default: {
                async checkExists() {
                    const webhookUrl = this.getNodeWebhookUrl('default');
                    const credentials = await this.getCredentials('whatsAppTriggerApi');
                    const updates = this.getNodeParameter('updates', []);
                    const subscribedEvents = updates.sort().join(',');
                    const appId = credentials.clientId;
                    const webhooks = await GenericFunctions_1.appWebhookSubscriptionList.call(this, appId);
                    const subscription = webhooks.find((webhook) => webhook.object === 'whatsapp_business_account' &&
                        webhook.fields
                            .map((x) => x.name)
                            .sort()
                            .join(',') === subscribedEvents &&
                        webhook.active);
                    if (!subscription) {
                        return false;
                    }
                    if (subscription.callback_url !== webhookUrl) {
                        throw new n8n_workflow_1.NodeOperationError(this.getNode(), `The WhatsApp App ID ${appId} already has a webhook subscription. Delete it or use another App before executing the trigger. Due to WhatsApp API limitations, you can have just one trigger per App.`, { level: 'warning' });
                    }
                    if ((subscription === null || subscription === void 0 ? void 0 : subscription.fields.map((x) => x.name).sort().join(',')) !== subscribedEvents) {
                        await GenericFunctions_1.appWebhookSubscriptionDelete.call(this, appId, 'whatsapp_business_account');
                        return false;
                    }
                    return true;
                },
                async create() {
                    const webhookUrl = this.getNodeWebhookUrl('default');
                    const credentials = await this.getCredentials('whatsAppTriggerApi');
                    const appId = credentials.clientId;
                    const updates = this.getNodeParameter('updates', []);
                    const verifyToken = this.getNode().id;
                    await GenericFunctions_1.appWebhookSubscriptionCreate.call(this, appId, {
                        object: 'whatsapp_business_account',
                        callback_url: webhookUrl,
                        verify_token: verifyToken,
                        fields: JSON.stringify(updates),
                        include_values: true,
                    });
                    return true;
                },
                async delete() {
                    const credentials = await this.getCredentials('whatsAppTriggerApi');
                    const appId = credentials.clientId;
                    await GenericFunctions_1.appWebhookSubscriptionDelete.call(this, appId, 'whatsapp_business_account');
                    return true;
                },
            },
        };
    }
    async webhook() {
        const bodyData = this.getBodyData();
        const query = this.getQueryData();
        const res = this.getResponseObject();
        const req = this.getRequestObject();
        const headerData = this.getHeaderData();
        const credentials = await this.getCredentials('whatsAppTriggerApi');
        if (this.getWebhookName() === 'setup') {
            if (query['hub.challenge']) {
                if (this.getNode().id !== query['hub.verify_token']) {
                    return {};
                }
                res.status(200).send(query['hub.challenge']).end();
                return { noWebhookResponse: true };
            }
        }
        const computedSignature = (0, crypto_1.createHmac)('sha256', credentials.clientSecret)
            .update(req.rawBody)
            .digest('hex');
        if (headerData['x-hub-signature-256'] !== `sha256=${computedSignature}`) {
            return {};
        }
        if (bodyData.object !== 'whatsapp_business_account') {
            return {};
        }
        const events = await Promise.all(bodyData.entry
            .map((entry) => entry.changes)
            .flat()
            .map((change) => ({ ...change.value, field: change.field })));
        if (events.length === 0) {
            return {};
        }
        return {
            workflowData: [this.helpers.returnJsonArray(events)],
        };
    }
}
exports.WhatsAppTrigger = WhatsAppTrigger;
//# sourceMappingURL=WhatsAppTrigger.node.js.map