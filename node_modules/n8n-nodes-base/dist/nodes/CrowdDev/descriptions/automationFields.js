"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.automationFields = exports.automationOperations = void 0;
const GenericFunctions_1 = require("../GenericFunctions");
const utils_1 = require("./utils");
const displayOpts = (0, utils_1.showFor)(['automation']);
const displayFor = {
    resource: displayOpts(),
    createOrUpdate: displayOpts(['create', 'update']),
    id: displayOpts(['destroy', 'find', 'update']),
};
const automationOperations = {
    displayName: 'Operation',
    name: 'operation',
    type: 'options',
    displayOptions: displayFor.resource.displayOptions,
    noDataExpression: true,
    default: 'list',
    options: [
        {
            name: 'Create',
            value: 'create',
            description: 'Create a new automation for the tenant',
            action: 'Create a new automation for the tenant',
            routing: {
                send: { preSend: [GenericFunctions_1.automationPresend] },
                request: {
                    method: 'POST',
                    url: '/automation',
                },
            },
        },
        {
            name: 'Destroy',
            value: 'destroy',
            description: 'Destroy an existing automation for the tenant',
            action: 'Destroy an existing automation for the tenant',
            routing: {
                request: {
                    method: 'DELETE',
                    url: '=/automation/{{$parameter["id"]}}',
                },
            },
        },
        {
            name: 'Find',
            value: 'find',
            description: 'Get an existing automation data for the tenant',
            action: 'Get an existing automation data for the tenant',
            routing: {
                request: {
                    method: 'GET',
                    url: '=/automation/{{$parameter["id"]}}',
                },
            },
        },
        {
            name: 'List',
            value: 'list',
            description: 'Get all existing automation data for tenant',
            action: 'Get all existing automation data for tenant',
            routing: {
                request: {
                    method: 'GET',
                    url: '/automation',
                },
            },
        },
        {
            name: 'Update',
            value: 'update',
            description: 'Updates an existing automation for the tenant',
            action: 'Updates an existing automation for the tenant',
            routing: {
                send: { preSend: [GenericFunctions_1.automationPresend] },
                request: {
                    method: 'PUT',
                    url: '=/automation/{{$parameter["id"]}}',
                },
            },
        },
    ],
};
exports.automationOperations = automationOperations;
const idField = {
    displayName: 'ID',
    name: 'id',
    description: 'The ID of the automation',
    type: 'string',
    required: true,
    default: '',
};
const commonFields = [
    {
        displayName: 'Trigger',
        name: 'trigger',
        description: 'What will trigger an automation',
        type: 'options',
        required: true,
        default: 'new_activity',
        options: [
            {
                name: 'New Activity',
                value: 'new_activity',
            },
            {
                name: 'New Member',
                value: 'new_member',
            },
        ],
    },
    {
        displayName: 'URL',
        name: 'url',
        description: 'URL to POST webhook data to',
        type: 'string',
        required: true,
        default: '',
    },
];
const automationFields = [
    Object.assign({}, idField, displayFor.id),
    ...commonFields.map((0, utils_1.mapWith)(displayFor.createOrUpdate)),
];
exports.automationFields = automationFields;
//# sourceMappingURL=automationFields.js.map