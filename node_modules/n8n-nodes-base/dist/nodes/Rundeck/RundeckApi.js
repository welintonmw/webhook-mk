"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.RundeckApi = void 0;
const n8n_workflow_1 = require("n8n-workflow");
class RundeckApi {
    constructor(executeFunctions) {
        this.executeFunctions = executeFunctions;
    }
    async request(method, endpoint, body, query) {
        var _a, _b;
        const options = {
            headers: {
                'user-agent': 'n8n',
                'X-Rundeck-Auth-Token': (_a = this.credentials) === null || _a === void 0 ? void 0 : _a.token,
            },
            rejectUnauthorized: false,
            method,
            qs: query,
            uri: ((_b = this.credentials) === null || _b === void 0 ? void 0 : _b.url) + endpoint,
            body,
            json: true,
        };
        try {
            return await this.executeFunctions.helpers.request(options);
        }
        catch (error) {
            throw new n8n_workflow_1.NodeApiError(this.executeFunctions.getNode(), error);
        }
    }
    async init() {
        const credentials = await this.executeFunctions.getCredentials('rundeckApi');
        if (credentials === undefined) {
            throw new n8n_workflow_1.NodeOperationError(this.executeFunctions.getNode(), 'No credentials got returned!');
        }
        this.credentials = credentials;
    }
    executeJob(jobId, args) {
        let params = '';
        if (args) {
            for (const arg of args) {
                params += '-' + arg.name + ' ' + arg.value + ' ';
            }
        }
        const body = {
            argString: params,
        };
        return this.request('POST', `/api/14/job/${jobId}/run`, body, {});
    }
    getJobMetadata(jobId) {
        return this.request('GET', `/api/18/job/${jobId}/info`, {}, {});
    }
}
exports.RundeckApi = RundeckApi;
//# sourceMappingURL=RundeckApi.js.map