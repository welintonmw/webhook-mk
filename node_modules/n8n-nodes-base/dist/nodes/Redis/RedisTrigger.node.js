"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.RedisTrigger = void 0;
const n8n_workflow_1 = require("n8n-workflow");
const utils_1 = require("./utils");
class RedisTrigger {
    constructor() {
        this.description = {
            displayName: 'Redis Trigger',
            name: 'redisTrigger',
            icon: 'file:redis.svg',
            group: ['trigger'],
            version: 1,
            description: 'Subscribe to redis channel',
            defaults: {
                name: 'Redis Trigger',
            },
            inputs: [],
            outputs: ['main'],
            credentials: [
                {
                    name: 'redis',
                    required: true,
                    testedBy: 'redisConnectionTest',
                },
            ],
            properties: [
                {
                    displayName: 'Channels',
                    name: 'channels',
                    type: 'string',
                    default: '',
                    required: true,
                    description: 'Channels to subscribe to, multiple channels be defined with comma. Wildcard character(*) is supported.',
                },
                {
                    displayName: 'Options',
                    name: 'options',
                    type: 'collection',
                    placeholder: 'Add Option',
                    default: {},
                    options: [
                        {
                            displayName: 'JSON Parse Body',
                            name: 'jsonParseBody',
                            type: 'boolean',
                            default: false,
                            description: 'Whether to try to parse the message to an object',
                        },
                        {
                            displayName: 'Only Message',
                            name: 'onlyMessage',
                            type: 'boolean',
                            default: false,
                            description: 'Whether to return only the message property',
                        },
                    ],
                },
            ],
        };
        this.methods = {
            credentialTest: { redisConnectionTest: utils_1.redisConnectionTest },
        };
    }
    async trigger() {
        const credentials = await this.getCredentials('redis');
        const channels = this.getNodeParameter('channels').split(',');
        const options = this.getNodeParameter('options');
        if (!channels) {
            throw new n8n_workflow_1.NodeOperationError(this.getNode(), 'Channels are mandatory!');
        }
        const client = (0, utils_1.setupRedisClient)(credentials);
        const manualTriggerFunction = async () => {
            await client.connect();
            await client.ping();
            try {
                for (const channel of channels) {
                    await client.pSubscribe(channel, (message) => {
                        if (options.jsonParseBody) {
                            try {
                                message = JSON.parse(message);
                            }
                            catch (error) { }
                        }
                        if (options.onlyMessage) {
                            this.emit([this.helpers.returnJsonArray({ message })]);
                            return;
                        }
                        this.emit([this.helpers.returnJsonArray({ channel, message })]);
                    });
                }
            }
            catch (error) {
                throw new n8n_workflow_1.NodeOperationError(this.getNode(), error);
            }
        };
        if (this.getMode() === 'trigger') {
            void manualTriggerFunction();
        }
        async function closeFunction() {
            await client.quit();
        }
        return {
            closeFunction,
            manualTriggerFunction,
        };
    }
}
exports.RedisTrigger = RedisTrigger;
//# sourceMappingURL=RedisTrigger.node.js.map