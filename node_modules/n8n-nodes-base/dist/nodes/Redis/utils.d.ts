import type { ICredentialDataDecryptedObject, ICredentialTestFunctions, ICredentialsDecrypted, IDataObject, IExecuteFunctions, INodeCredentialTestResult } from 'n8n-workflow';
import { createClient } from 'redis';
export type RedisClientType = ReturnType<typeof createClient>;
export declare function setupRedisClient(credentials: ICredentialDataDecryptedObject): RedisClientType;
export declare function redisConnectionTest(this: ICredentialTestFunctions, credential: ICredentialsDecrypted): Promise<INodeCredentialTestResult>;
export declare function convertInfoToObject(stringData: string): IDataObject;
export declare function getValue(client: RedisClientType, keyName: string, type?: string): Promise<string | {
    [x: string]: string;
} | string[] | null | undefined>;
export declare function setValue(this: IExecuteFunctions, client: RedisClientType, keyName: string, value: string | number | object | string[] | number[], expire: boolean, ttl: number, type?: string, valueIsJSON?: boolean): Promise<void>;
