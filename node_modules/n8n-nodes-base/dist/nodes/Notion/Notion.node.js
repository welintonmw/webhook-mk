"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Notion = void 0;
const GenericFunctions_1 = require("./GenericFunctions");
const DatabaseDescription_1 = require("./DatabaseDescription");
const UserDescription_1 = require("./UserDescription");
const PageDescription_1 = require("./PageDescription");
const BlockDescription_1 = require("./BlockDescription");
const DatabasePageDescription_1 = require("./DatabasePageDescription");
const moment = require("moment-timezone");
class Notion {
    constructor() {
        this.description = {
            displayName: 'Notion (Beta)',
            name: 'notion',
            icon: 'file:notion.svg',
            group: ['output'],
            version: 1,
            subtitle: '={{$parameter["operation"] + ": " + $parameter["resource"]}}',
            description: 'Consume Notion API (Beta)',
            defaults: {
                name: 'Notion',
                color: '#000000',
            },
            inputs: ['main'],
            outputs: ['main'],
            credentials: [
                {
                    name: 'notionApi',
                    required: true,
                },
            ],
            properties: [
                {
                    displayName: 'Resource',
                    name: 'resource',
                    type: 'options',
                    options: [
                        {
                            name: 'Block',
                            value: 'block',
                        },
                        {
                            name: 'Database',
                            value: 'database',
                        },
                        {
                            name: 'Database Page',
                            value: 'databasePage',
                        },
                        {
                            name: 'Page',
                            value: 'page',
                        },
                        {
                            name: 'User',
                            value: 'user',
                        },
                    ],
                    default: 'page',
                    description: 'Resource to consume.',
                },
                ...BlockDescription_1.blockOperations,
                ...BlockDescription_1.blockFields,
                ...DatabaseDescription_1.databaseOperations,
                ...DatabaseDescription_1.databaseFields,
                ...DatabasePageDescription_1.databasePageOperations,
                ...DatabasePageDescription_1.databasePageFields,
                ...PageDescription_1.pageOperations,
                ...PageDescription_1.pageFields,
                ...UserDescription_1.userOperations,
                ...UserDescription_1.userFields,
            ],
        };
        this.methods = {
            loadOptions: {
                async getDatabases() {
                    var _a;
                    const returnData = [];
                    const body = {
                        page_size: 100,
                        filter: { property: 'object', value: 'database' },
                    };
                    const databases = await GenericFunctions_1.notionApiRequestAllItems.call(this, 'results', 'POST', `/search`, body);
                    for (const database of databases) {
                        returnData.push({
                            name: ((_a = database.title[0]) === null || _a === void 0 ? void 0 : _a.plain_text) || database.id,
                            value: database.id,
                        });
                    }
                    returnData.sort((a, b) => {
                        if (a.name.toLocaleLowerCase() < b.name.toLocaleLowerCase()) {
                            return -1;
                        }
                        if (a.name.toLocaleLowerCase() > b.name.toLocaleLowerCase()) {
                            return 1;
                        }
                        return 0;
                    });
                    return returnData;
                },
                async getDatabaseProperties() {
                    const returnData = [];
                    const databaseId = this.getCurrentNodeParameter('databaseId');
                    const { properties } = await GenericFunctions_1.notionApiRequest.call(this, 'GET', `/databases/${databaseId}`);
                    for (const key of Object.keys(properties)) {
                        if (!['created_time', 'last_edited_time', 'created_by', 'last_edited_by', 'formula', 'files'].includes(properties[key].type)) {
                            returnData.push({
                                name: `${key} - (${properties[key].type})`,
                                value: `${key}|${properties[key].type}`,
                            });
                        }
                    }
                    returnData.sort((a, b) => {
                        if (a.name.toLocaleLowerCase() < b.name.toLocaleLowerCase()) {
                            return -1;
                        }
                        if (a.name.toLocaleLowerCase() > b.name.toLocaleLowerCase()) {
                            return 1;
                        }
                        return 0;
                    });
                    return returnData;
                },
                async getFilterProperties() {
                    const returnData = [];
                    const databaseId = this.getCurrentNodeParameter('databaseId');
                    const { properties } = await GenericFunctions_1.notionApiRequest.call(this, 'GET', `/databases/${databaseId}`);
                    for (const key of Object.keys(properties)) {
                        returnData.push({
                            name: `${key} - (${properties[key].type})`,
                            value: `${key}|${properties[key].type}`,
                        });
                    }
                    returnData.sort((a, b) => {
                        if (a.name.toLocaleLowerCase() < b.name.toLocaleLowerCase()) {
                            return -1;
                        }
                        if (a.name.toLocaleLowerCase() > b.name.toLocaleLowerCase()) {
                            return 1;
                        }
                        return 0;
                    });
                    return returnData;
                },
                async getBlockTypes() {
                    return GenericFunctions_1.getBlockTypes();
                },
                async getPropertySelectValues() {
                    const [name, type] = this.getCurrentNodeParameter('&key').split('|');
                    const databaseId = this.getCurrentNodeParameter('databaseId');
                    const resource = this.getCurrentNodeParameter('resource');
                    const operation = this.getCurrentNodeParameter('operation');
                    const { properties } = await GenericFunctions_1.notionApiRequest.call(this, 'GET', `/databases/${databaseId}`);
                    if (resource === 'databasePage') {
                        if (['multi_select', 'select'].includes(type) && operation === 'getAll') {
                            return (properties[name][type].options)
                                .map((option) => ({ name: option.name, value: option.name }));
                        }
                        else if (['multi_select'].includes(type) && ['create', 'update'].includes(operation)) {
                            return (properties[name][type].options)
                                .map((option) => ({ name: option.name, value: option.name }));
                        }
                    }
                    return (properties[name][type].options).map((option) => ({ name: option.name, value: option.id }));
                },
                async getUsers() {
                    const returnData = [];
                    const users = await GenericFunctions_1.notionApiRequestAllItems.call(this, 'results', 'GET', '/users');
                    for (const user of users) {
                        returnData.push({
                            name: user.name,
                            value: user.id,
                        });
                    }
                    return returnData;
                },
                async getDatabaseIdFromPage() {
                    const returnData = [];
                    const pageId = this.getCurrentNodeParameter('pageId');
                    const { parent: { database_id: databaseId } } = await GenericFunctions_1.notionApiRequest.call(this, 'GET', `/pages/${pageId}`);
                    const { properties } = await GenericFunctions_1.notionApiRequest.call(this, 'GET', `/databases/${databaseId}`);
                    for (const key of Object.keys(properties)) {
                        if (!['created_time', 'last_edited_time', 'created_by', 'last_edited_by', 'formula', 'files'].includes(properties[key].type)) {
                            returnData.push({
                                name: `${key} - (${properties[key].type})`,
                                value: `${key}|${properties[key].type}`,
                            });
                        }
                    }
                    returnData.sort((a, b) => {
                        if (a.name.toLocaleLowerCase() < b.name.toLocaleLowerCase()) {
                            return -1;
                        }
                        if (a.name.toLocaleLowerCase() > b.name.toLocaleLowerCase()) {
                            return 1;
                        }
                        return 0;
                    });
                    return returnData;
                },
                async getDatabaseOptionsFromPage() {
                    const pageId = this.getCurrentNodeParameter('pageId');
                    const [name, type] = this.getCurrentNodeParameter('&key').split('|');
                    const { parent: { database_id: databaseId } } = await GenericFunctions_1.notionApiRequest.call(this, 'GET', `/pages/${pageId}`);
                    const { properties } = await GenericFunctions_1.notionApiRequest.call(this, 'GET', `/databases/${databaseId}`);
                    return (properties[name][type].options).map((option) => ({ name: option.name, value: option.id }));
                },
                async getTimezones() {
                    const returnData = [];
                    for (const timezone of moment.tz.names()) {
                        const timezoneName = timezone;
                        const timezoneId = timezone;
                        returnData.push({
                            name: timezoneName,
                            value: timezoneId,
                        });
                    }
                    returnData.unshift({
                        name: 'Default',
                        value: 'default',
                        description: 'Timezone set in n8n',
                    });
                    return returnData;
                },
            },
        };
    }
    async execute() {
        const items = this.getInputData();
        const returnData = [];
        const length = items.length;
        let responseData;
        const qs = {};
        const timezone = this.getTimezone();
        const resource = this.getNodeParameter('resource', 0);
        const operation = this.getNodeParameter('operation', 0);
        if (resource === 'block') {
            if (operation === 'append') {
                for (let i = 0; i < length; i++) {
                    const blockId = this.getNodeParameter('blockId', i);
                    const body = {
                        children: GenericFunctions_1.formatBlocks(this.getNodeParameter('blockUi.blockValues', i, [])),
                    };
                    const block = await GenericFunctions_1.notionApiRequest.call(this, 'PATCH', `/blocks/${blockId}/children`, body);
                    returnData.push(block);
                }
            }
            if (operation === 'getAll') {
                for (let i = 0; i < length; i++) {
                    const blockId = this.getNodeParameter('blockId', i);
                    const returnAll = this.getNodeParameter('returnAll', i);
                    if (returnAll) {
                        responseData = await GenericFunctions_1.notionApiRequestAllItems.call(this, 'results', 'GET', `/blocks/${blockId}/children`, {});
                    }
                    else {
                        qs.page_size = this.getNodeParameter('limit', i);
                        responseData = await GenericFunctions_1.notionApiRequest.call(this, 'GET', `/blocks/${blockId}/children`, {});
                        responseData = responseData.results;
                    }
                    returnData.push.apply(returnData, responseData);
                }
            }
        }
        if (resource === 'database') {
            if (operation === 'get') {
                for (let i = 0; i < length; i++) {
                    const databaseId = this.getNodeParameter('databaseId', i);
                    responseData = await GenericFunctions_1.notionApiRequest.call(this, 'GET', `/databases/${databaseId}`);
                    returnData.push(responseData);
                }
            }
            if (operation === 'getAll') {
                for (let i = 0; i < length; i++) {
                    const body = {
                        filter: { property: 'object', value: 'database' },
                    };
                    const returnAll = this.getNodeParameter('returnAll', i);
                    if (returnAll) {
                        responseData = await GenericFunctions_1.notionApiRequestAllItems.call(this, 'results', 'POST', `/search`, body);
                    }
                    else {
                        body['page_size'] = this.getNodeParameter('limit', i);
                        responseData = await GenericFunctions_1.notionApiRequest.call(this, 'POST', `/search`, body);
                        responseData = responseData.results;
                    }
                    returnData.push.apply(returnData, responseData);
                }
            }
        }
        if (resource === 'databasePage') {
            if (operation === 'create') {
                for (let i = 0; i < length; i++) {
                    const simple = this.getNodeParameter('simple', i);
                    const body = {
                        parent: {},
                        properties: {},
                    };
                    body.parent['database_id'] = this.getNodeParameter('databaseId', i);
                    const properties = this.getNodeParameter('propertiesUi.propertyValues', i, []);
                    if (properties.length !== 0) {
                        body.properties = GenericFunctions_1.mapProperties(properties, timezone);
                    }
                    body.children = GenericFunctions_1.formatBlocks(this.getNodeParameter('blockUi.blockValues', i, []));
                    responseData = await GenericFunctions_1.notionApiRequest.call(this, 'POST', '/pages', body);
                    if (simple === true) {
                        responseData = GenericFunctions_1.simplifyObjects(responseData);
                    }
                    returnData.push.apply(returnData, Array.isArray(responseData) ? responseData : [responseData]);
                }
            }
            if (operation === 'getAll') {
                for (let i = 0; i < length; i++) {
                    const simple = this.getNodeParameter('simple', 0);
                    const databaseId = this.getNodeParameter('databaseId', i);
                    const returnAll = this.getNodeParameter('returnAll', i);
                    const filters = this.getNodeParameter('options.filter', i, {});
                    const sort = this.getNodeParameter('options.sort.sortValue', i, []);
                    const body = {
                        filter: {},
                    };
                    if (filters.singleCondition) {
                        body['filter'] = GenericFunctions_1.mapFilters([filters.singleCondition], timezone);
                    }
                    if (filters.multipleCondition) {
                        const { or, and } = filters.multipleCondition.condition;
                        if (Array.isArray(or) && or.length !== 0) {
                            Object.assign(body.filter, { or: or.map((data) => GenericFunctions_1.mapFilters([data], timezone)) });
                        }
                        if (Array.isArray(and) && and.length !== 0) {
                            Object.assign(body.filter, { and: and.map((data) => GenericFunctions_1.mapFilters([data], timezone)) });
                        }
                    }
                    if (!Object.keys(body.filter).length) {
                        delete body.filter;
                    }
                    if (sort) {
                        body['sorts'] = GenericFunctions_1.mapSorting(sort);
                    }
                    if (returnAll) {
                        responseData = await GenericFunctions_1.notionApiRequestAllItems.call(this, 'results', 'POST', `/databases/${databaseId}/query`, body, {});
                    }
                    else {
                        body.page_size = this.getNodeParameter('limit', i);
                        responseData = await GenericFunctions_1.notionApiRequest.call(this, 'POST', `/databases/${databaseId}/query`, body, qs);
                        responseData = responseData.results;
                    }
                    if (simple === true) {
                        responseData = GenericFunctions_1.simplifyObjects(responseData);
                    }
                    returnData.push.apply(returnData, responseData);
                }
            }
            if (operation === 'update') {
                for (let i = 0; i < length; i++) {
                    const pageId = this.getNodeParameter('pageId', i);
                    const simple = this.getNodeParameter('simple', i);
                    const properties = this.getNodeParameter('propertiesUi.propertyValues', i, []);
                    const body = {
                        properties: {},
                    };
                    if (properties.length !== 0) {
                        body.properties = GenericFunctions_1.mapProperties(properties, timezone);
                    }
                    responseData = await GenericFunctions_1.notionApiRequest.call(this, 'PATCH', `/pages/${pageId}`, body);
                    if (simple === true) {
                        responseData = GenericFunctions_1.simplifyObjects(responseData);
                    }
                    returnData.push.apply(returnData, Array.isArray(responseData) ? responseData : [responseData]);
                }
            }
        }
        if (resource === 'user') {
            if (operation === 'get') {
                for (let i = 0; i < length; i++) {
                    const userId = this.getNodeParameter('userId', i);
                    responseData = await GenericFunctions_1.notionApiRequest.call(this, 'GET', `/users/${userId}`);
                    returnData.push(responseData);
                }
            }
            if (operation === 'getAll') {
                for (let i = 0; i < length; i++) {
                    const returnAll = this.getNodeParameter('returnAll', i);
                    if (returnAll) {
                        responseData = await GenericFunctions_1.notionApiRequestAllItems.call(this, 'results', 'GET', '/users');
                    }
                    else {
                        qs.limit = this.getNodeParameter('limit', i);
                        responseData = await GenericFunctions_1.notionApiRequestAllItems.call(this, 'results', 'GET', '/users');
                        responseData = responseData.splice(0, qs.limit);
                    }
                    returnData.push.apply(returnData, responseData);
                }
            }
        }
        if (resource === 'page') {
            if (operation === 'create') {
                for (let i = 0; i < length; i++) {
                    const simple = this.getNodeParameter('simple', i);
                    const body = {
                        parent: {},
                        properties: {},
                    };
                    body.parent['page_id'] = this.getNodeParameter('pageId', i);
                    body.properties = GenericFunctions_1.formatTitle(this.getNodeParameter('title', i));
                    body.children = GenericFunctions_1.formatBlocks(this.getNodeParameter('blockUi.blockValues', i, []));
                    responseData = await GenericFunctions_1.notionApiRequest.call(this, 'POST', '/pages', body);
                    if (simple === true) {
                        responseData = GenericFunctions_1.simplifyObjects(responseData);
                    }
                    returnData.push.apply(returnData, Array.isArray(responseData) ? responseData : [responseData]);
                }
            }
            if (operation === 'get') {
                for (let i = 0; i < length; i++) {
                    const pageId = this.getNodeParameter('pageId', i);
                    const simple = this.getNodeParameter('simple', i);
                    responseData = await GenericFunctions_1.notionApiRequest.call(this, 'GET', `/pages/${pageId}`);
                    if (simple === true) {
                        responseData = GenericFunctions_1.simplifyObjects(responseData);
                    }
                    returnData.push.apply(returnData, Array.isArray(responseData) ? responseData : [responseData]);
                }
            }
            if (operation === 'search') {
                for (let i = 0; i < length; i++) {
                    const text = this.getNodeParameter('text', i);
                    const options = this.getNodeParameter('options', i);
                    const returnAll = this.getNodeParameter('returnAll', i);
                    const simple = this.getNodeParameter('simple', i);
                    const body = {};
                    if (text) {
                        body['query'] = text;
                    }
                    if (options.filter) {
                        const filter = (options.filter || {}).filters || [];
                        body['filter'] = filter;
                    }
                    if (options.sort) {
                        const sort = (options.sort || {}).sortValue || {};
                        body['sort'] = sort;
                    }
                    if (returnAll) {
                        responseData = await GenericFunctions_1.notionApiRequestAllItems.call(this, 'results', 'POST', '/search', body);
                    }
                    else {
                        qs.limit = this.getNodeParameter('limit', i);
                        responseData = await GenericFunctions_1.notionApiRequestAllItems.call(this, 'results', 'POST', '/search', body);
                        responseData = responseData.splice(0, qs.limit);
                    }
                    if (simple === true) {
                        responseData = GenericFunctions_1.simplifyObjects(responseData);
                    }
                    returnData.push.apply(returnData, responseData);
                }
            }
        }
        return [this.helpers.returnJsonArray(returnData)];
    }
}
exports.Notion = Notion;
//# sourceMappingURL=Notion.node.js.map