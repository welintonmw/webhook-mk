"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.NotionTrigger = void 0;
const GenericFunctions_1 = require("./GenericFunctions");
const moment = require("moment");
class NotionTrigger {
    constructor() {
        this.description = {
            displayName: 'Notion Trigger (Beta)',
            name: 'notionTrigger',
            icon: 'file:notion.svg',
            group: ['trigger'],
            version: 1,
            description: 'Starts the workflow when Notion events occur',
            subtitle: '={{$parameter["event"]}}',
            defaults: {
                name: 'Notion Trigger',
                color: '#000000',
            },
            credentials: [
                {
                    name: 'notionApi',
                    required: true,
                },
            ],
            polling: true,
            inputs: [],
            outputs: ['main'],
            properties: [
                {
                    displayName: 'Event',
                    name: 'event',
                    type: 'options',
                    options: [
                        {
                            name: 'Page Added to Database',
                            value: 'pageAddedToDatabase',
                        },
                    ],
                    required: true,
                    default: '',
                },
                {
                    displayName: 'Database',
                    name: 'databaseId',
                    type: 'options',
                    typeOptions: {
                        loadOptionsMethod: 'getDatabases',
                    },
                    displayOptions: {
                        show: {
                            event: [
                                'pageAddedToDatabase',
                            ],
                        },
                    },
                    default: '',
                    required: true,
                    description: 'The ID of this database.',
                },
                {
                    displayName: 'Simple',
                    name: 'simple',
                    type: 'boolean',
                    displayOptions: {
                        show: {
                            event: [
                                'pageAddedToDatabase',
                            ],
                        },
                    },
                    default: true,
                    description: 'When set to true a simplify version of the response will be used else the raw data.',
                },
            ],
        };
        this.methods = {
            loadOptions: {
                async getDatabases() {
                    var _a;
                    const returnData = [];
                    const { results: databases } = await GenericFunctions_1.notionApiRequest.call(this, 'POST', `/search`, { page_size: 100, filter: { property: 'object', value: 'database' } });
                    for (const database of databases) {
                        returnData.push({
                            name: ((_a = database.title[0]) === null || _a === void 0 ? void 0 : _a.plain_text) || database.id,
                            value: database.id,
                        });
                    }
                    returnData.sort((a, b) => {
                        if (a.name.toLocaleLowerCase() < b.name.toLocaleLowerCase()) {
                            return -1;
                        }
                        if (a.name.toLocaleLowerCase() > b.name.toLocaleLowerCase()) {
                            return 1;
                        }
                        return 0;
                    });
                    return returnData;
                },
            },
        };
    }
    async poll() {
        const webhookData = this.getWorkflowStaticData('node');
        const databaseId = this.getNodeParameter('databaseId');
        const event = this.getNodeParameter('event');
        const simple = this.getNodeParameter('simple');
        const now = moment().utc().format();
        const startDate = webhookData.lastTimeChecked || now;
        const endDate = now;
        webhookData.lastTimeChecked = endDate;
        const sortProperty = (event === 'pageAddedToDatabase') ? 'created_time' : 'last_edited_time';
        const body = {
            page_size: 1,
            sorts: [
                {
                    timestamp: sortProperty,
                    direction: 'descending',
                },
            ],
        };
        let records = [];
        let hasMore = true;
        let { results: data } = await GenericFunctions_1.notionApiRequest.call(this, 'POST', `/databases/${databaseId}/query`, body);
        if (this.getMode() === 'manual') {
            if (simple === true) {
                data = GenericFunctions_1.simplifyObjects(data);
            }
            if (Array.isArray(data) && data.length) {
                return [this.helpers.returnJsonArray(data)];
            }
        }
        if (Object.keys(data[0]).length !== 0 && webhookData.lastRecordProccesed !== data[0].id) {
            do {
                body.page_size = 10;
                const { results, has_more, next_cursor } = await GenericFunctions_1.notionApiRequest.call(this, 'POST', `/databases/${databaseId}/query`, body);
                records.push.apply(records, results);
                hasMore = has_more;
                if (next_cursor !== null) {
                    body['start_cursor'] = next_cursor;
                }
            } while (!moment(records[records.length - 1][sortProperty]).isSameOrBefore(startDate) && hasMore === true);
            if (this.getMode() !== 'manual') {
                records = records.filter((record) => moment(record[sortProperty]).isBetween(startDate, endDate));
            }
            if (simple === true) {
                records = GenericFunctions_1.simplifyObjects(records);
            }
            webhookData.lastRecordProccesed = data[0].id;
            if (Array.isArray(records) && records.length) {
                return [this.helpers.returnJsonArray(records)];
            }
        }
        return null;
    }
}
exports.NotionTrigger = NotionTrigger;
//# sourceMappingURL=NotionTrigger.node.js.map