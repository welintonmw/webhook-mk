"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.cleanData = exports.mindeeApiRequest = void 0;
const n8n_workflow_1 = require("n8n-workflow");
async function mindeeApiRequest(method, path, body = {}, qs = {}, option = {}) {
    const resource = this.getNodeParameter('resource', 0);
    let credentials;
    if (resource === 'receipt') {
        credentials = await this.getCredentials('mindeeReceiptApi');
    }
    else {
        credentials = await this.getCredentials('mindeeInvoiceApi');
    }
    const options = {
        headers: {
            'X-Inferuser-Token': credentials.apiKey,
        },
        method,
        body,
        qs,
        uri: `https://api.mindee.net/products${path}`,
        json: true,
    };
    try {
        if (Object.keys(body).length === 0) {
            delete options.body;
        }
        if (Object.keys(qs).length === 0) {
            delete options.qs;
        }
        if (Object.keys(option).length !== 0) {
            Object.assign(options, option);
        }
        return await this.helpers.request.call(this, options);
    }
    catch (error) {
        throw new n8n_workflow_1.NodeApiError(this.getNode(), error);
    }
}
exports.mindeeApiRequest = mindeeApiRequest;
function cleanData(predictions) {
    const newData = {};
    for (const key of Object.keys(predictions[0])) {
        const data = predictions[0][key];
        if (key === 'taxes' && data.length) {
            newData[key] = {
                amount: data[0].amount,
                rate: data[0].rate,
            };
        }
        else if (key === 'locale') {
            newData['currency'] = data.currency;
            newData['locale'] = data.value;
        }
        else {
            newData[key] = data.value || data.name || data.raw || data.degrees || data.amount || data.iban;
        }
    }
    return newData;
}
exports.cleanData = cleanData;
//# sourceMappingURL=GenericFunctions.js.map