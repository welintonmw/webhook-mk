"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getTaskFields = exports.getWorkspaces = exports.asanaApiRequestAllItems = exports.asanaApiRequest = void 0;
const n8n_workflow_1 = require("n8n-workflow");
const lodash_1 = require("lodash");
async function asanaApiRequest(method, endpoint, body, query, uri) {
    const authenticationMethod = this.getNodeParameter('authentication', 0);
    const options = {
        headers: {},
        method,
        body: { data: body },
        qs: query,
        uri: uri || `https://app.asana.com/api/1.0${endpoint}`,
        json: true,
    };
    try {
        if (authenticationMethod === 'accessToken') {
            const credentials = await this.getCredentials('asanaApi');
            if (credentials === undefined) {
                throw new n8n_workflow_1.NodeOperationError(this.getNode(), 'No credentials got returned!');
            }
            options.headers['Authorization'] = `Bearer ${credentials.accessToken}`;
            return await this.helpers.request(options);
        }
        else {
            return await this.helpers.requestOAuth2.call(this, 'asanaOAuth2Api', options);
        }
    }
    catch (error) {
        throw new n8n_workflow_1.NodeApiError(this.getNode(), error);
    }
}
exports.asanaApiRequest = asanaApiRequest;
async function asanaApiRequestAllItems(method, endpoint, body = {}, query = {}) {
    const returnData = [];
    let responseData;
    let uri;
    query.limit = 100;
    do {
        responseData = await asanaApiRequest.call(this, method, endpoint, body, query, uri);
        uri = lodash_1.get(responseData, 'next_page.uri');
        returnData.push.apply(returnData, responseData['data']);
    } while (responseData['next_page'] !== null);
    return returnData;
}
exports.asanaApiRequestAllItems = asanaApiRequestAllItems;
async function getWorkspaces() {
    const endpoint = '/workspaces';
    const responseData = await asanaApiRequestAllItems.call(this, 'GET', endpoint, {});
    const returnData = [];
    for (const workspaceData of responseData) {
        if (workspaceData.resource_type !== 'workspace') {
            continue;
        }
        returnData.push({
            name: workspaceData.name,
            value: workspaceData.gid,
        });
    }
    returnData.sort((a, b) => {
        if (a.name < b.name) {
            return -1;
        }
        if (a.name > b.name) {
            return 1;
        }
        return 0;
    });
    return returnData;
}
exports.getWorkspaces = getWorkspaces;
function getTaskFields() {
    return [
        '*',
        'GID',
        'Resource Type',
        'name',
        'Approval Status',
        'Assignee Status',
        'Completed',
        'Completed At',
        'Completed By',
        'Created At',
        'Dependencies',
        'Dependents',
        'Due At',
        'Due On',
        'External',
        'HTML Notes',
        'Liked',
        'Likes',
        'Memberships',
        'Modified At',
        'Notes',
        'Num Likes',
        'Resource Subtype',
        'Start On',
        'Assignee',
        'Custom Fields',
        'Followers',
        'Parent',
        'Permalink URL',
        'Projects',
        'Tags',
        'Workspace',
    ];
}
exports.getTaskFields = getTaskFields;
//# sourceMappingURL=GenericFunctions.js.map