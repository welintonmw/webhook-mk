"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.erpNextApiRequestAllItems = exports.erpNextApiRequest = void 0;
const n8n_workflow_1 = require("n8n-workflow");
async function erpNextApiRequest(method, resource, body = {}, query = {}, uri, option = {}) {
    const credentials = await this.getCredentials('erpNextApi');
    const baseUrl = getBaseUrl(credentials);
    if (credentials === undefined) {
        throw new n8n_workflow_1.NodeOperationError(this.getNode(), 'No credentials got returned!');
    }
    let options = {
        headers: {
            'Accept': 'application/json',
            'Content-Type': 'application/json',
            Authorization: `token ${credentials.apiKey}:${credentials.apiSecret}`,
        },
        method,
        body,
        qs: query,
        uri: uri || `${baseUrl}${resource}`,
        json: true,
    };
    options = Object.assign({}, options, option);
    if (!Object.keys(options.body).length) {
        delete options.body;
    }
    if (!Object.keys(options.qs).length) {
        delete options.qs;
    }
    try {
        return await this.helpers.request(options);
    }
    catch (error) {
        if (error.statusCode === 403) {
            throw new n8n_workflow_1.NodeApiError(this.getNode(), { message: 'DocType unavailable.' });
        }
        if (error.statusCode === 307) {
            throw new n8n_workflow_1.NodeApiError(this.getNode(), { message: 'Please ensure the subdomain is correct.' });
        }
        throw new n8n_workflow_1.NodeApiError(this.getNode(), error);
    }
}
exports.erpNextApiRequest = erpNextApiRequest;
async function erpNextApiRequestAllItems(propertyName, method, resource, body, query = {}) {
    const returnData = [];
    let responseData;
    query.limit_start = 0;
    query.limit_page_length = 1000;
    do {
        responseData = await erpNextApiRequest.call(this, method, resource, body, query);
        returnData.push.apply(returnData, responseData[propertyName]);
        query.limit_start += query.limit_page_length - 1;
    } while (responseData.data.length > 0);
    return returnData;
}
exports.erpNextApiRequestAllItems = erpNextApiRequestAllItems;
const getBaseUrl = ({ environment, domain, subdomain }) => environment === 'cloudHosted'
    ? `https://${subdomain}.erpnext.com`
    : domain;
//# sourceMappingURL=GenericFunctions.js.map