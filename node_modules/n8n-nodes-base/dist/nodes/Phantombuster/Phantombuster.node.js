"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Phantombuster = void 0;
const GenericFunctions_1 = require("./GenericFunctions");
const AgentDescription_1 = require("./AgentDescription");
class Phantombuster {
    constructor() {
        this.description = {
            displayName: 'Phantombuster',
            name: 'phantombuster',
            icon: 'file:phantombuster.png',
            group: ['input'],
            version: 1,
            subtitle: '={{$parameter["operation"] + ": " + $parameter["resource"]}}',
            description: 'Consume Phantombuster API',
            defaults: {
                name: 'Phantombuster',
                color: '#62bfd7',
            },
            inputs: ['main'],
            outputs: ['main'],
            credentials: [
                {
                    name: 'phantombusterApi',
                    required: true,
                },
            ],
            properties: [
                {
                    displayName: 'Resource',
                    name: 'resource',
                    type: 'options',
                    options: [
                        {
                            name: 'Agent',
                            value: 'agent',
                        },
                    ],
                    default: 'agent',
                    description: 'The resource to operate on.',
                },
                ...AgentDescription_1.agentOperations,
                ...AgentDescription_1.agentFields,
            ],
        };
        this.methods = {
            loadOptions: {
                async getAgents() {
                    const returnData = [];
                    const responseData = await GenericFunctions_1.phantombusterApiRequest.call(this, 'GET', '/agents/fetch-all');
                    for (const item of responseData) {
                        returnData.push({
                            name: item.name,
                            value: item.id,
                        });
                    }
                    return returnData;
                },
            },
        };
    }
    async execute() {
        const items = this.getInputData();
        const returnData = [];
        const length = items.length;
        const qs = {};
        let responseData;
        const resource = this.getNodeParameter('resource', 0);
        const operation = this.getNodeParameter('operation', 0);
        for (let i = 0; i < length; i++) {
            try {
                if (resource === 'agent') {
                    if (operation === 'delete') {
                        const agentId = this.getNodeParameter('agentId', i);
                        responseData = await GenericFunctions_1.phantombusterApiRequest.call(this, 'POST', '/agents/delete', { id: agentId });
                        responseData = { success: true };
                    }
                    if (operation === 'get') {
                        const agentId = this.getNodeParameter('agentId', i);
                        responseData = await GenericFunctions_1.phantombusterApiRequest.call(this, 'GET', '/agents/fetch', {}, { id: agentId });
                    }
                    if (operation === 'getOutput') {
                        const agentId = this.getNodeParameter('agentId', i);
                        const resolveData = this.getNodeParameter('resolveData', i);
                        const additionalFields = this.getNodeParameter('additionalFields', i);
                        Object.assign(qs, additionalFields);
                        qs.id = agentId;
                        responseData = await GenericFunctions_1.phantombusterApiRequest.call(this, 'GET', '/agents/fetch-output', {}, qs);
                        if (resolveData === true) {
                            const { resultObject } = await GenericFunctions_1.phantombusterApiRequest.call(this, 'GET', '/containers/fetch-result-object', {}, { id: responseData.containerId });
                            if (resultObject === null) {
                                responseData = {};
                            }
                            else {
                                responseData = JSON.parse(resultObject);
                            }
                        }
                    }
                    if (operation === 'getAll') {
                        const returnAll = this.getNodeParameter('returnAll', i);
                        responseData = await GenericFunctions_1.phantombusterApiRequest.call(this, 'GET', '/agents/fetch-all');
                        if (returnAll === false) {
                            const limit = this.getNodeParameter('limit', 0);
                            responseData = responseData.splice(0, limit);
                        }
                    }
                    if (operation === 'launch') {
                        const agentId = this.getNodeParameter('agentId', i);
                        const jsonParameters = this.getNodeParameter('jsonParameters', i);
                        const resolveData = this.getNodeParameter('resolveData', i);
                        const additionalFields = this.getNodeParameter('additionalFields', i);
                        const body = {
                            id: agentId,
                        };
                        if (jsonParameters) {
                            if (additionalFields.argumentsJson) {
                                body.arguments = GenericFunctions_1.validateJSON(this, additionalFields.argumentsJson, 'Arguments');
                                delete additionalFields.argumentsJson;
                            }
                            if (additionalFields.bonusArgumentJson) {
                                body.bonusArgument = GenericFunctions_1.validateJSON(this, additionalFields.bonusArgumentJson, 'Bonus Argument');
                                delete additionalFields.bonusArgumentJson;
                            }
                        }
                        else {
                            const argumentParameters = (additionalFields.argumentsUi || {}).argumentValues || [];
                            body.arguments = argumentParameters.reduce((object, currentValue) => {
                                object[currentValue.key] = currentValue.value;
                                return object;
                            }, {});
                            delete additionalFields.argumentsUi;
                            const bonusParameters = (additionalFields.bonusArgumentUi || {}).bonusArgumentValue || [];
                            body.bonusArgument = bonusParameters.reduce((object, currentValue) => {
                                object[currentValue.key] = currentValue.value;
                                return object;
                            }, {});
                            delete additionalFields.bonusArgumentUi;
                        }
                        Object.assign(body, additionalFields);
                        responseData = await GenericFunctions_1.phantombusterApiRequest.call(this, 'POST', '/agents/launch', body);
                        if (resolveData === true) {
                            responseData = await GenericFunctions_1.phantombusterApiRequest.call(this, 'GET', '/containers/fetch', {}, { id: responseData.containerId });
                        }
                    }
                }
                if (Array.isArray(responseData)) {
                    returnData.push.apply(returnData, responseData);
                }
                else if (responseData !== undefined) {
                    returnData.push(responseData);
                }
            }
            catch (error) {
                if (this.continueOnFail()) {
                    returnData.push({ error: error.message });
                    continue;
                }
                throw error;
            }
        }
        return [this.helpers.returnJsonArray(returnData)];
    }
}
exports.Phantombuster = Phantombuster;
//# sourceMappingURL=Phantombuster.node.js.map