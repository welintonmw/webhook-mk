"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.addBinariesToItem = void 0;
const isBinaryUniqueSetup = () => {
    const binaries = [];
    return (binary) => {
        for (const existingBinary of binaries) {
            if (existingBinary.mimeType === binary.mimeType &&
                existingBinary.fileType === binary.fileType &&
                existingBinary.fileSize === binary.fileSize &&
                existingBinary.fileExtension === binary.fileExtension) {
                return false;
            }
        }
        binaries.push({
            mimeType: binary.mimeType,
            fileType: binary.fileType,
            fileSize: binary.fileSize,
            fileExtension: binary.fileExtension,
        });
        return true;
    };
};
function addBinariesToItem(newItem, items, uniqueOnly) {
    const isBinaryUnique = uniqueOnly ? isBinaryUniqueSetup() : undefined;
    for (const item of items) {
        if (item.binary === undefined)
            continue;
        for (const key of Object.keys(item.binary)) {
            if (!newItem.binary)
                newItem.binary = {};
            let binaryKey = key;
            const binary = item.binary[key];
            if (isBinaryUnique && !isBinaryUnique(binary)) {
                continue;
            }
            let i = 1;
            while (newItem.binary[binaryKey] !== undefined) {
                binaryKey = `${key}_${i}`;
                i++;
            }
            newItem.binary[binaryKey] = binary;
        }
    }
    return newItem;
}
exports.addBinariesToItem = addBinariesToItem;
//# sourceMappingURL=utils.js.map