"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.RemoveDuplicates = void 0;
const get_1 = __importDefault(require("lodash/get"));
const isEqual_1 = __importDefault(require("lodash/isEqual"));
const lt_1 = __importDefault(require("lodash/lt"));
const pick_1 = __importDefault(require("lodash/pick"));
const n8n_workflow_1 = require("n8n-workflow");
const utils_1 = require("../utils/utils");
const utils_2 = require("./utils");
const utilities_1 = require("../../../utils/utilities");
class RemoveDuplicates {
    constructor() {
        this.description = {
            displayName: 'Remove Duplicates',
            name: 'removeDuplicates',
            icon: 'file:removeDuplicates.svg',
            group: ['transform'],
            subtitle: '',
            version: [1, 1.1],
            description: 'Delete items with matching field values',
            defaults: {
                name: 'Remove Duplicates',
            },
            inputs: ['main'],
            outputs: ['main'],
            properties: [
                {
                    displayName: 'Compare',
                    name: 'compare',
                    type: 'options',
                    options: [
                        {
                            name: 'All Fields',
                            value: 'allFields',
                        },
                        {
                            name: 'All Fields Except',
                            value: 'allFieldsExcept',
                        },
                        {
                            name: 'Selected Fields',
                            value: 'selectedFields',
                        },
                    ],
                    default: 'allFields',
                    description: 'The fields of the input items to compare to see if they are the same',
                },
                {
                    displayName: 'Fields To Exclude',
                    name: 'fieldsToExclude',
                    type: 'string',
                    placeholder: 'e.g. email, name',
                    requiresDataPath: 'multiple',
                    description: 'Fields in the input to exclude from the comparison',
                    default: '',
                    displayOptions: {
                        show: {
                            compare: ['allFieldsExcept'],
                        },
                    },
                },
                {
                    displayName: 'Fields To Compare',
                    name: 'fieldsToCompare',
                    type: 'string',
                    placeholder: 'e.g. email, name',
                    requiresDataPath: 'multiple',
                    description: 'Fields in the input to add to the comparison',
                    default: '',
                    displayOptions: {
                        show: {
                            compare: ['selectedFields'],
                        },
                    },
                },
                {
                    displayName: 'Options',
                    name: 'options',
                    type: 'collection',
                    placeholder: 'Add Field',
                    default: {},
                    displayOptions: {
                        show: {
                            compare: ['allFieldsExcept', 'selectedFields'],
                        },
                    },
                    options: [
                        {
                            displayName: 'Disable Dot Notation',
                            name: 'disableDotNotation',
                            type: 'boolean',
                            default: false,
                            description: 'Whether to disallow referencing child fields using `parent.child` in the field name',
                        },
                        {
                            displayName: 'Remove Other Fields',
                            name: 'removeOtherFields',
                            type: 'boolean',
                            default: false,
                            description: 'Whether to remove any fields that are not being compared. If disabled, will keep the values from the first of the duplicates.',
                        },
                    ],
                },
            ],
        };
    }
    async execute() {
        const items = this.getInputData();
        const compare = this.getNodeParameter('compare', 0);
        const disableDotNotation = this.getNodeParameter('options.disableDotNotation', 0, false);
        const removeOtherFields = this.getNodeParameter('options.removeOtherFields', 0, false);
        let keys = disableDotNotation
            ? Object.keys(items[0].json)
            : Object.keys((0, utilities_1.flattenKeys)(items[0].json));
        for (const item of items) {
            for (const key of disableDotNotation
                ? Object.keys(item.json)
                : Object.keys((0, utilities_1.flattenKeys)(item.json))) {
                if (!keys.includes(key)) {
                    keys.push(key);
                }
            }
        }
        if (compare === 'allFieldsExcept') {
            const fieldsToExclude = (0, utils_1.prepareFieldsArray)(this.getNodeParameter('fieldsToExclude', 0, ''), 'Fields To Exclude');
            if (!fieldsToExclude.length) {
                throw new n8n_workflow_1.NodeOperationError(this.getNode(), 'No fields specified. Please add a field to exclude from comparison');
            }
            if (!disableDotNotation) {
                keys = Object.keys((0, utilities_1.flattenKeys)(items[0].json));
            }
            keys = keys.filter((key) => !fieldsToExclude.includes(key));
        }
        if (compare === 'selectedFields') {
            const fieldsToCompare = (0, utils_1.prepareFieldsArray)(this.getNodeParameter('fieldsToCompare', 0, ''), 'Fields To Compare');
            if (!fieldsToCompare.length) {
                throw new n8n_workflow_1.NodeOperationError(this.getNode(), 'No fields specified. Please add a field to compare on');
            }
            if (!disableDotNotation) {
                keys = Object.keys((0, utilities_1.flattenKeys)(items[0].json));
            }
            keys = fieldsToCompare.map((key) => key.trim());
        }
        const newItems = items.map((item, index) => ({
            json: { ...item.json, __INDEX: index },
            pairedItem: { item: index },
        }));
        newItems.sort((a, b) => {
            let result = 0;
            for (const key of keys) {
                let equal;
                if (!disableDotNotation) {
                    equal = (0, isEqual_1.default)((0, get_1.default)(a.json, key), (0, get_1.default)(b.json, key));
                }
                else {
                    equal = (0, isEqual_1.default)(a.json[key], b.json[key]);
                }
                if (!equal) {
                    let lessThan;
                    if (!disableDotNotation) {
                        lessThan = (0, lt_1.default)((0, get_1.default)(a.json, key), (0, get_1.default)(b.json, key));
                    }
                    else {
                        lessThan = (0, lt_1.default)(a.json[key], b.json[key]);
                    }
                    result = lessThan ? -1 : 1;
                    break;
                }
            }
            return result;
        });
        (0, utils_2.validateInputData)(this.getNode(), newItems, keys, disableDotNotation);
        const removedIndexes = [];
        let temp = newItems[0];
        for (let index = 1; index < newItems.length; index++) {
            if ((0, utilities_1.compareItems)(newItems[index], temp, keys, disableDotNotation)) {
                removedIndexes.push(newItems[index].json.__INDEX);
            }
            else {
                temp = newItems[index];
            }
        }
        let returnData = items.filter((_, index) => !removedIndexes.includes(index));
        if (removeOtherFields) {
            returnData = returnData.map((item, index) => ({
                json: (0, pick_1.default)(item.json, ...keys),
                pairedItem: { item: index },
            }));
        }
        return [returnData];
    }
}
exports.RemoveDuplicates = RemoveDuplicates;
//# sourceMappingURL=RemoveDuplicates.node.js.map