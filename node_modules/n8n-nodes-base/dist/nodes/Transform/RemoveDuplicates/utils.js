"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.validateInputData = void 0;
const get_1 = __importDefault(require("lodash/get"));
const n8n_workflow_1 = require("n8n-workflow");
const validateInputData = (node, items, keysToCompare, disableDotNotation) => {
    for (const key of keysToCompare) {
        let type = undefined;
        for (const [i, item] of items.entries()) {
            if (key === '') {
                throw new n8n_workflow_1.NodeOperationError(node, 'Name of field to compare is blank');
            }
            const value = !disableDotNotation ? (0, get_1.default)(item.json, key) : item.json[key];
            if (value === null && node.typeVersion > 1)
                continue;
            if (value === undefined && disableDotNotation && key.includes('.')) {
                throw new n8n_workflow_1.NodeOperationError(node, `'${key}' field is missing from some input items`, {
                    description: "If you're trying to use a nested field, make sure you turn off 'disable dot notation' in the node options",
                });
            }
            else if (value === undefined) {
                throw new n8n_workflow_1.NodeOperationError(node, `'${key}' field is missing from some input items`);
            }
            if (type !== undefined && value !== undefined && type !== typeof value) {
                const description = 'The type of this field varies between items' +
                    (node.typeVersion > 1
                        ? `, in item [${i - 1}] it's a ${type} and in item [${i}] it's a ${typeof value} `
                        : '');
                throw new n8n_workflow_1.NodeOperationError(node, `'${key}' isn't always the same type`, {
                    description,
                });
            }
            else {
                type = typeof value;
            }
        }
    }
};
exports.validateInputData = validateInputData;
//# sourceMappingURL=utils.js.map