import { type IDataObject, type GenericValue, type IExecuteFunctions } from 'n8n-workflow';
type AggregationType = 'append' | 'average' | 'concatenate' | 'count' | 'countUnique' | 'max' | 'min' | 'sum';
export type Aggregation = {
    aggregation: AggregationType;
    field: string;
    includeEmpty?: boolean;
    separateBy?: string;
    customSeparator?: string;
};
export type Aggregations = Aggregation[];
export declare const NUMERICAL_AGGREGATIONS: string[];
export type SummarizeOptions = {
    continueIfFieldNotFound: boolean;
    disableDotNotation?: boolean;
    outputFormat?: 'separateItems' | 'singleItem';
    skipEmptySplitFields?: boolean;
};
export type ValueGetterFn = (item: IDataObject, field: string) => IDataObject | IDataObject[] | GenericValue | GenericValue[];
export declare const fieldValueGetter: (disableDotNotation?: boolean) => (item: IDataObject, field: string) => IDataObject | IDataObject[] | GenericValue | GenericValue[];
export declare function checkIfFieldExists(this: IExecuteFunctions, items: IDataObject[], aggregations: Aggregations, getValue: ValueGetterFn): void;
export declare function splitData(splitKeys: string[], data: IDataObject[], fieldsToSummarize: Aggregations, options: SummarizeOptions, getValue: ValueGetterFn): IDataObject;
export declare function aggregationToArray(aggregationResult: IDataObject, fieldsToSplitBy: string[], previousStage?: IDataObject): IDataObject[];
export {};
