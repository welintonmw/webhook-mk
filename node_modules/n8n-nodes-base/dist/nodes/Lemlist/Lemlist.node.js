"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Lemlist = void 0;
const descriptions_1 = require("./descriptions");
const GenericFunctions_1 = require("./GenericFunctions");
const lodash_1 = require("lodash");
class Lemlist {
    constructor() {
        this.description = {
            displayName: 'Lemlist',
            name: 'lemlist',
            icon: 'file:lemlist.svg',
            group: ['transform'],
            version: 1,
            subtitle: '={{$parameter["operation"] + ": " + $parameter["resource"]}}',
            description: 'Consume the Lemlist API',
            defaults: {
                name: 'Lemlist',
                color: '#4d19ff',
            },
            inputs: ['main'],
            outputs: ['main'],
            credentials: [
                {
                    name: 'lemlistApi',
                    required: true,
                },
            ],
            properties: [
                {
                    displayName: 'Resource',
                    name: 'resource',
                    type: 'options',
                    options: [
                        {
                            name: 'Activity',
                            value: 'activity',
                        },
                        {
                            name: 'Campaign',
                            value: 'campaign',
                        },
                        {
                            name: 'Lead',
                            value: 'lead',
                        },
                        {
                            name: 'Team',
                            value: 'team',
                        },
                        {
                            name: 'Unsubscribes',
                            value: 'unsubscribe',
                        },
                    ],
                    default: 'activity',
                    description: 'Resource to consume',
                },
                ...descriptions_1.activityOperations,
                ...descriptions_1.activityFields,
                ...descriptions_1.campaignOperations,
                ...descriptions_1.campaignFields,
                ...descriptions_1.leadOperations,
                ...descriptions_1.leadFields,
                ...descriptions_1.teamOperations,
                ...descriptions_1.teamFields,
                ...descriptions_1.unsubscribeOperations,
                ...descriptions_1.unsubscribeFields,
            ],
        };
        this.methods = {
            loadOptions: {
                async getCampaigns() {
                    const campaigns = await GenericFunctions_1.lemlistApiRequest.call(this, 'GET', '/campaigns');
                    return campaigns.map(({ _id, name }) => ({
                        name,
                        value: _id,
                    }));
                },
            },
        };
    }
    async execute() {
        const items = this.getInputData();
        const resource = this.getNodeParameter('resource', 0);
        const operation = this.getNodeParameter('operation', 0);
        let responseData;
        const returnData = [];
        for (let i = 0; i < items.length; i++) {
            try {
                if (resource === 'activity') {
                    if (operation === 'getAll') {
                        const returnAll = this.getNodeParameter('returnAll', 0);
                        const qs = {};
                        const filters = this.getNodeParameter('filters', i);
                        if (!lodash_1.isEmpty(filters)) {
                            Object.assign(qs, filters);
                        }
                        responseData = await GenericFunctions_1.lemlistApiRequest.call(this, 'GET', '/activities', {}, qs);
                        if (returnAll === false) {
                            const limit = this.getNodeParameter('limit', 0);
                            responseData = responseData.slice(0, limit);
                        }
                    }
                }
                else if (resource === 'campaign') {
                    if (operation === 'getAll') {
                        responseData = await GenericFunctions_1.lemlistApiRequest.call(this, 'GET', '/campaigns');
                        const returnAll = this.getNodeParameter('returnAll', i);
                        if (!returnAll) {
                            const limit = this.getNodeParameter('limit', i);
                            responseData = responseData.slice(0, limit);
                        }
                    }
                }
                else if (resource === 'lead') {
                    if (operation === 'create') {
                        const qs = {};
                        const additionalFields = this.getNodeParameter('additionalFields', i);
                        if (additionalFields.deduplicate !== undefined) {
                            qs.deduplicate = additionalFields.deduplicate;
                        }
                        const body = {};
                        const remainingAdditionalFields = lodash_1.omit(additionalFields, 'deduplicate');
                        if (!lodash_1.isEmpty(remainingAdditionalFields)) {
                            Object.assign(body, remainingAdditionalFields);
                        }
                        const campaignId = this.getNodeParameter('campaignId', i);
                        const email = this.getNodeParameter('email', i);
                        const endpoint = `/campaigns/${campaignId}/leads/${email}`;
                        responseData = await GenericFunctions_1.lemlistApiRequest.call(this, 'POST', endpoint, body, qs);
                    }
                    else if (operation === 'delete') {
                        const campaignId = this.getNodeParameter('campaignId', i);
                        const email = this.getNodeParameter('email', i);
                        const endpoint = `/campaigns/${campaignId}/leads/${email}`;
                        responseData = await GenericFunctions_1.lemlistApiRequest.call(this, 'DELETE', endpoint, {}, { action: 'remove' });
                    }
                    else if (operation === 'get') {
                        const email = this.getNodeParameter('email', i);
                        responseData = await GenericFunctions_1.lemlistApiRequest.call(this, 'GET', `/leads/${email}`);
                    }
                    else if (operation === 'unsubscribe') {
                        const campaignId = this.getNodeParameter('campaignId', i);
                        const email = this.getNodeParameter('email', i);
                        const endpoint = `/campaigns/${campaignId}/leads/${email}`;
                        responseData = await GenericFunctions_1.lemlistApiRequest.call(this, 'DELETE', endpoint);
                    }
                }
                else if (resource === 'team') {
                    if (operation === 'get') {
                        responseData = await GenericFunctions_1.lemlistApiRequest.call(this, 'GET', '/team');
                    }
                }
                else if (resource === 'unsubscribe') {
                    if (operation === 'add') {
                        const email = this.getNodeParameter('email', i);
                        responseData = await GenericFunctions_1.lemlistApiRequest.call(this, 'POST', `/unsubscribes/${email}`);
                    }
                    else if (operation === 'delete') {
                        const email = this.getNodeParameter('email', i);
                        responseData = await GenericFunctions_1.lemlistApiRequest.call(this, 'DELETE', `/unsubscribes/${email}`);
                    }
                    else if (operation === 'getAll') {
                        const returnAll = this.getNodeParameter('returnAll', i);
                        if (returnAll) {
                            responseData = await GenericFunctions_1.lemlistApiRequestAllItems.call(this, 'GET', '/unsubscribes');
                        }
                        else {
                            const qs = {
                                limit: this.getNodeParameter('limit', i),
                            };
                            responseData = await GenericFunctions_1.lemlistApiRequest.call(this, 'GET', '/unsubscribes', {}, qs);
                        }
                    }
                }
            }
            catch (error) {
                if (this.continueOnFail()) {
                    returnData.push({ error: error.toString() });
                    continue;
                }
                throw error;
            }
            Array.isArray(responseData)
                ? returnData.push(...responseData)
                : returnData.push(responseData);
        }
        return [this.helpers.returnJsonArray(returnData)];
    }
}
exports.Lemlist = Lemlist;
//# sourceMappingURL=Lemlist.node.js.map