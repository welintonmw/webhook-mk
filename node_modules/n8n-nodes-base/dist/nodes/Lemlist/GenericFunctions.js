"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getEvents = exports.lemlistApiRequestAllItems = exports.lemlistApiRequest = void 0;
const n8n_workflow_1 = require("n8n-workflow");
const change_case_1 = require("change-case");
async function lemlistApiRequest(method, endpoint, body = {}, qs = {}, option = {}) {
    const { apiKey } = await this.getCredentials('lemlistApi');
    const encodedApiKey = Buffer.from(':' + apiKey).toString('base64');
    const options = {
        headers: {
            'user-agent': 'n8n',
            'Authorization': `Basic ${encodedApiKey}`,
        },
        method,
        uri: `https://api.lemlist.com/api${endpoint}`,
        qs,
        body,
        json: true,
    };
    if (!Object.keys(body).length) {
        delete options.body;
    }
    if (!Object.keys(qs).length) {
        delete options.qs;
    }
    if (Object.keys(option)) {
        Object.assign(options, option);
    }
    try {
        return await this.helpers.request(options);
    }
    catch (error) {
        throw new n8n_workflow_1.NodeApiError(this.getNode(), error);
    }
}
exports.lemlistApiRequest = lemlistApiRequest;
async function lemlistApiRequestAllItems(method, endpoint) {
    const returnData = [];
    let responseData;
    const qs = {};
    qs.limit = 100;
    qs.offset = 0;
    do {
        responseData = await lemlistApiRequest.call(this, method, endpoint, {}, qs);
        returnData.push(...responseData);
        qs.offset += qs.limit;
    } while (responseData.length !== 0);
    return returnData;
}
exports.lemlistApiRequestAllItems = lemlistApiRequestAllItems;
function getEvents() {
    const events = [
        '*',
        'emailsBounced',
        'emailsClicked',
        'emailsFailed',
        'emailsInterested',
        'emailsNotInterested',
        'emailsOpened',
        'emailsReplied',
        'emailsSendFailed',
        'emailsSent',
        'emailsUnsubscribed',
    ];
    return events.map((event) => ({ name: (event === '*') ? '*' : change_case_1.capitalCase(event), value: event }));
}
exports.getEvents = getEvents;
//# sourceMappingURL=GenericFunctions.js.map