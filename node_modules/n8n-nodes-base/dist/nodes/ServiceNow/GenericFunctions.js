"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.sortData = exports.mapEndpoint = exports.serviceNowRequestAllItems = exports.serviceNowApiRequest = void 0;
const n8n_workflow_1 = require("n8n-workflow");
async function serviceNowApiRequest(method, resource, body = {}, qs = {}, uri, option = {}) {
    const credentials = await this.getCredentials('serviceNowOAuth2Api');
    const options = {
        headers: {},
        method,
        qs,
        body,
        uri: uri || `https://${credentials === null || credentials === void 0 ? void 0 : credentials.subdomain}.service-now.com/api${resource}`,
        json: true,
    };
    if (!Object.keys(body).length) {
        delete options.body;
    }
    if (Object.keys(option).length !== 0) {
        Object.assign(options, option);
    }
    if (options.qs.limit) {
        delete options.qs.limit;
    }
    try {
        return await this.helpers.requestOAuth2.call(this, 'serviceNowOAuth2Api', options);
    }
    catch (error) {
        throw new n8n_workflow_1.NodeApiError(this.getNode(), error);
    }
}
exports.serviceNowApiRequest = serviceNowApiRequest;
async function serviceNowRequestAllItems(method, resource, body = {}, query = {}) {
    const returnData = [];
    let responseData;
    const page = 100;
    query.sysparm_limit = page;
    responseData = await serviceNowApiRequest.call(this, method, resource, body, query, undefined, { resolveWithFullResponse: true });
    returnData.push.apply(returnData, responseData.body.result);
    const quantity = responseData.headers['x-total-count'];
    const iterations = Math.round(quantity / page) + (quantity % page ? 1 : 0);
    for (let iteration = 1; iteration < iterations; iteration++) {
        query.sysparm_limit = page;
        query.sysparm_offset = iteration * page;
        responseData = await serviceNowApiRequest.call(this, method, resource, body, query, undefined, { resolveWithFullResponse: true });
        returnData.push.apply(returnData, responseData.body.result);
    }
    return returnData;
}
exports.serviceNowRequestAllItems = serviceNowRequestAllItems;
const mapEndpoint = (resource, operation) => {
    const resourceEndpoint = new Map([
        ['tableRecord', 'sys_dictionary'],
        ['businessService', 'cmdb_ci_service'],
        ['configurationItems', 'cmdb_ci'],
        ['department', 'cmn_department'],
        ['dictionary', 'sys_dictionary'],
        ['incident', 'incident'],
        ['user', 'sys_user'],
        ['userGroup', 'sys_user_group'],
        ['userRole', 'sys_user_role'],
    ]);
    return resourceEndpoint.get(resource);
};
exports.mapEndpoint = mapEndpoint;
const sortData = (returnData) => {
    returnData.sort((a, b) => {
        if (a.name < b.name) {
            return -1;
        }
        if (a.name > b.name) {
            return 1;
        }
        return 0;
    });
    return returnData;
};
exports.sortData = sortData;
//# sourceMappingURL=GenericFunctions.js.map