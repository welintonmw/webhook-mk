"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Contentful = void 0;
const GenericFunctions_1 = require("./GenericFunctions");
const SpaceDescription = require("./SpaceDescription");
const ContentTypeDescription = require("./ContentTypeDescription");
const EntryDescription = require("./EntryDescription");
const AssetDescription = require("./AssetDescription");
const LocaleDescription = require("./LocaleDescription");
class Contentful {
    constructor() {
        this.description = {
            displayName: 'Contentful',
            name: 'contentful',
            subtitle: '={{$parameter["operation"] + ": " + $parameter["resource"]}}',
            icon: 'file:contentful.png',
            group: ['input'],
            version: 1,
            description: 'Consume Contenful API',
            defaults: {
                name: 'Contentful',
                color: '#2E75D4',
            },
            inputs: ['main'],
            outputs: ['main'],
            credentials: [
                {
                    name: 'contentfulApi',
                    required: true,
                },
            ],
            properties: [
                {
                    displayName: 'Source',
                    name: 'source',
                    type: 'options',
                    default: 'deliveryApi',
                    description: 'Pick where your data comes from, delivery or preview API',
                    options: [
                        {
                            name: 'Delivery API',
                            value: 'deliveryApi',
                        },
                        {
                            name: 'Preview API',
                            value: 'previewApi',
                        },
                    ],
                },
                {
                    displayName: 'Resource',
                    name: 'resource',
                    type: 'options',
                    options: [
                        AssetDescription.resource,
                        ContentTypeDescription.resource,
                        EntryDescription.resource,
                        LocaleDescription.resource,
                        SpaceDescription.resource,
                    ],
                    default: 'entry',
                    description: 'The resource to operate on.',
                },
                ...SpaceDescription.operations,
                ...ContentTypeDescription.operations,
                ...EntryDescription.operations,
                ...AssetDescription.operations,
                ...LocaleDescription.operations,
                ...SpaceDescription.fields,
                ...ContentTypeDescription.fields,
                ...EntryDescription.fields,
                ...AssetDescription.fields,
                ...LocaleDescription.fields,
            ],
        };
    }
    async execute() {
        const resource = this.getNodeParameter('resource', 0);
        const operation = this.getNodeParameter('operation', 0);
        let responseData;
        const items = this.getInputData();
        const returnData = [];
        const qs = {};
        for (let i = 0; i < items.length; i++) {
            try {
                if (resource === 'space') {
                    if (operation === 'get') {
                        const credentials = await this.getCredentials('contentfulApi');
                        responseData = await GenericFunctions_1.contentfulApiRequest.call(this, 'GET', `/spaces/${credentials === null || credentials === void 0 ? void 0 : credentials.spaceId}`);
                    }
                }
                if (resource === 'contentType') {
                    if (operation === 'get') {
                        const credentials = await this.getCredentials('contentfulApi');
                        const env = this.getNodeParameter('environmentId', 0);
                        const id = this.getNodeParameter('contentTypeId', 0);
                        const additionalFields = this.getNodeParameter('additionalFields', i);
                        responseData = await GenericFunctions_1.contentfulApiRequest.call(this, 'GET', `/spaces/${credentials === null || credentials === void 0 ? void 0 : credentials.spaceId}/environments/${env}/content_types/${id}`);
                        if (!additionalFields.rawData) {
                            responseData = responseData.fields;
                        }
                    }
                }
                if (resource === 'entry') {
                    if (operation === 'get') {
                        const credentials = await this.getCredentials('contentfulApi');
                        const env = this.getNodeParameter('environmentId', 0);
                        const id = this.getNodeParameter('entryId', 0);
                        const additionalFields = this.getNodeParameter('additionalFields', i);
                        responseData = await GenericFunctions_1.contentfulApiRequest.call(this, 'GET', `/spaces/${credentials === null || credentials === void 0 ? void 0 : credentials.spaceId}/environments/${env}/entries/${id}`, {}, qs);
                        if (!additionalFields.rawData) {
                            responseData = responseData.fields;
                        }
                    }
                    else if (operation === 'getAll') {
                        const credentials = await this.getCredentials('contentfulApi');
                        const returnAll = this.getNodeParameter('returnAll', 0);
                        const additionalFields = this.getNodeParameter('additionalFields', i);
                        const rawData = additionalFields.rawData;
                        additionalFields.rawData = undefined;
                        const env = this.getNodeParameter('environmentId', i);
                        Object.assign(qs, additionalFields);
                        if (qs.equal) {
                            const [atribute, value] = qs.equal.split('=');
                            qs[atribute] = value;
                            delete qs.equal;
                        }
                        if (qs.notEqual) {
                            const [atribute, value] = qs.notEqual.split('=');
                            qs[atribute] = value;
                            delete qs.notEqual;
                        }
                        if (qs.include) {
                            const [atribute, value] = qs.include.split('=');
                            qs[atribute] = value;
                            delete qs.include;
                        }
                        if (qs.exclude) {
                            const [atribute, value] = qs.exclude.split('=');
                            qs[atribute] = value;
                            delete qs.exclude;
                        }
                        if (returnAll) {
                            responseData = await GenericFunctions_1.contenfulApiRequestAllItems.call(this, 'items', 'GET', `/spaces/${credentials === null || credentials === void 0 ? void 0 : credentials.spaceId}/environments/${env}/entries`, {}, qs);
                            if (!rawData) {
                                const assets = [];
                                responseData.map((asset) => {
                                    assets.push(asset.fields);
                                });
                                responseData = assets;
                            }
                        }
                        else {
                            const limit = this.getNodeParameter('limit', 0);
                            qs.limit = limit;
                            responseData = await GenericFunctions_1.contentfulApiRequest.call(this, 'GET', `/spaces/${credentials === null || credentials === void 0 ? void 0 : credentials.spaceId}/environments/${env}/entries`, {}, qs);
                            responseData = responseData.items;
                            if (!rawData) {
                                const assets = [];
                                responseData.map((asset) => {
                                    assets.push(asset.fields);
                                });
                                responseData = assets;
                            }
                        }
                    }
                }
                if (resource === 'asset') {
                    if (operation === 'get') {
                        const credentials = await this.getCredentials('contentfulApi');
                        const env = this.getNodeParameter('environmentId', 0);
                        const id = this.getNodeParameter('assetId', 0);
                        const additionalFields = this.getNodeParameter('additionalFields', i);
                        responseData = await GenericFunctions_1.contentfulApiRequest.call(this, 'GET', `/spaces/${credentials === null || credentials === void 0 ? void 0 : credentials.spaceId}/environments/${env}/assets/${id}`, {}, qs);
                        if (!additionalFields.rawData) {
                            responseData = responseData.fields;
                        }
                    }
                    else if (operation === 'getAll') {
                        const credentials = await this.getCredentials('contentfulApi');
                        const returnAll = this.getNodeParameter('returnAll', 0);
                        const additionalFields = this.getNodeParameter('additionalFields', i);
                        const rawData = additionalFields.rawData;
                        additionalFields.rawData = undefined;
                        const env = this.getNodeParameter('environmentId', i);
                        Object.assign(qs, additionalFields);
                        if (qs.equal) {
                            const [atribute, value] = qs.equal.split('=');
                            qs[atribute] = value;
                            delete qs.equal;
                        }
                        if (qs.notEqual) {
                            const [atribute, value] = qs.notEqual.split('=');
                            qs[atribute] = value;
                            delete qs.notEqual;
                        }
                        if (qs.include) {
                            const [atribute, value] = qs.include.split('=');
                            qs[atribute] = value;
                            delete qs.include;
                        }
                        if (qs.exclude) {
                            const [atribute, value] = qs.exclude.split('=');
                            qs[atribute] = value;
                            delete qs.exclude;
                        }
                        if (returnAll) {
                            responseData = await GenericFunctions_1.contenfulApiRequestAllItems.call(this, 'items', 'GET', `/spaces/${credentials === null || credentials === void 0 ? void 0 : credentials.spaceId}/environments/${env}/assets`, {}, qs);
                            if (!rawData) {
                                const assets = [];
                                responseData.map((asset) => {
                                    assets.push(asset.fields);
                                });
                                responseData = assets;
                            }
                        }
                        else {
                            const limit = this.getNodeParameter('limit', i);
                            qs.limit = limit;
                            responseData = await GenericFunctions_1.contentfulApiRequest.call(this, 'GET', `/spaces/${credentials === null || credentials === void 0 ? void 0 : credentials.spaceId}/environments/${env}/assets`, {}, qs);
                            responseData = responseData.items;
                            if (!rawData) {
                                const assets = [];
                                responseData.map((asset) => {
                                    assets.push(asset.fields);
                                });
                                responseData = assets;
                            }
                        }
                    }
                }
                if (resource === 'locale') {
                    if (operation === 'getAll') {
                        const credentials = await this.getCredentials('contentfulApi');
                        const returnAll = this.getNodeParameter('returnAll', 0);
                        const env = this.getNodeParameter('environmentId', i);
                        if (returnAll) {
                            responseData = await GenericFunctions_1.contenfulApiRequestAllItems.call(this, 'items', 'GET', `/spaces/${credentials === null || credentials === void 0 ? void 0 : credentials.spaceId}/environments/${env}/locales`, {}, qs);
                        }
                        else {
                            const limit = this.getNodeParameter('limit', 0);
                            qs.limit = limit;
                            responseData = await GenericFunctions_1.contentfulApiRequest.call(this, 'GET', `/spaces/${credentials === null || credentials === void 0 ? void 0 : credentials.spaceId}/environments/${env}/locales`, {}, qs);
                            responseData = responseData.items;
                        }
                    }
                }
                if (Array.isArray(responseData)) {
                    returnData.push.apply(returnData, responseData);
                }
                else {
                    returnData.push(responseData);
                }
            }
            catch (error) {
                if (this.continueOnFail()) {
                    returnData.push({ error: error.message });
                    continue;
                }
                throw error;
            }
        }
        return [this.helpers.returnJsonArray(returnData)];
    }
}
exports.Contentful = Contentful;
//# sourceMappingURL=Contentful.node.js.map