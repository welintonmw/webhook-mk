"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.wordpressApiRequestAllItems = exports.wordpressApiRequest = void 0;
const n8n_workflow_1 = require("n8n-workflow");
async function wordpressApiRequest(method, resource, body = {}, qs = {}, uri, option = {}) {
    const credentials = await this.getCredentials('wordpressApi');
    if (credentials === undefined) {
        throw new n8n_workflow_1.NodeOperationError(this.getNode(), 'No credentials got returned!');
    }
    let options = {
        headers: {
            Accept: 'application/json',
            'Content-Type': 'application/json',
            'User-Agent': 'n8n',
        },
        auth: {
            user: credentials.username,
            password: credentials.password,
        },
        method,
        qs,
        body,
        uri: uri || `${credentials.url}/wp-json/wp/v2${resource}`,
        json: true,
    };
    options = Object.assign({}, options, option);
    if (Object.keys(options.body).length === 0) {
        delete options.body;
    }
    try {
        return await this.helpers.request(options);
    }
    catch (error) {
        throw new n8n_workflow_1.NodeApiError(this.getNode(), error);
    }
}
exports.wordpressApiRequest = wordpressApiRequest;
async function wordpressApiRequestAllItems(method, endpoint, body = {}, query = {}) {
    const returnData = [];
    let responseData;
    query.per_page = 10;
    query.page = 0;
    do {
        query.page++;
        responseData = await wordpressApiRequest.call(this, method, endpoint, body, query, undefined, { resolveWithFullResponse: true });
        returnData.push.apply(returnData, responseData.body);
    } while (responseData.headers['x-wp-totalpages'] !== undefined &&
        parseInt(responseData.headers['x-wp-totalpages'], 10) !== query.page);
    return returnData;
}
exports.wordpressApiRequestAllItems = wordpressApiRequestAllItems;
//# sourceMappingURL=GenericFunctions.js.map