"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.UnleashedSoftware = void 0;
const GenericFunctions_1 = require("./GenericFunctions");
const SalesOrderDescription_1 = require("./SalesOrderDescription");
const StockOnHandDescription_1 = require("./StockOnHandDescription");
const moment = require("moment");
class UnleashedSoftware {
    constructor() {
        this.description = {
            displayName: 'Unleashed Software',
            name: 'unleashedSoftware',
            group: ['transform'],
            subtitle: '={{$parameter["operation"] + ":" + $parameter["resource"]}}',
            icon: 'file:unleashedSoftware.png',
            version: 1,
            description: 'Consume Unleashed Software API',
            defaults: {
                name: 'Unleashed Software',
                color: '#772244',
            },
            inputs: ['main'],
            outputs: ['main'],
            credentials: [
                {
                    name: 'unleashedSoftwareApi',
                    required: true,
                },
            ],
            properties: [
                {
                    displayName: 'Resource',
                    name: 'resource',
                    type: 'options',
                    options: [
                        {
                            name: 'Sales Order',
                            value: 'salesOrder',
                        },
                        {
                            name: 'Stock On Hand',
                            value: 'stockOnHand',
                        },
                    ],
                    default: 'salesOrder',
                    description: 'The resource to operate on.',
                },
                ...SalesOrderDescription_1.salesOrderOperations,
                ...SalesOrderDescription_1.salesOrderFields,
                ...StockOnHandDescription_1.stockOnHandOperations,
                ...StockOnHandDescription_1.stockOnHandFields,
            ],
        };
    }
    async execute() {
        const items = this.getInputData();
        const returnData = [];
        const length = items.length;
        const qs = {};
        let responseData;
        for (let i = 0; i < length; i++) {
            const resource = this.getNodeParameter('resource', 0);
            const operation = this.getNodeParameter('operation', 0);
            if (resource === 'salesOrder') {
                if (operation === 'getAll') {
                    const returnAll = this.getNodeParameter('returnAll', i);
                    const filters = this.getNodeParameter('filters', i);
                    if (filters.startDate) {
                        filters.startDate = moment(filters.startDate).format('YYYY-MM-DD');
                    }
                    if (filters.endDate) {
                        filters.endDate = moment(filters.endDate).format('YYYY-MM-DD');
                    }
                    if (filters.modifiedSince) {
                        filters.modifiedSince = moment(filters.modifiedSince).format('YYYY-MM-DD');
                    }
                    if (filters.orderStatus) {
                        filters.orderStatus = filters.orderStatus.join(',');
                    }
                    Object.assign(qs, filters);
                    if (returnAll) {
                        responseData = await GenericFunctions_1.unleashedApiRequestAllItems.call(this, 'Items', 'GET', '/SalesOrders', {}, qs);
                    }
                    else {
                        const limit = this.getNodeParameter('limit', i);
                        qs.pageSize = limit;
                        responseData = await GenericFunctions_1.unleashedApiRequest.call(this, 'GET', `/SalesOrders`, {}, qs, 1);
                        responseData = responseData.Items;
                    }
                    GenericFunctions_1.convertNETDates(responseData);
                }
            }
            if (resource === 'stockOnHand') {
                if (operation === 'getAll') {
                    const returnAll = this.getNodeParameter('returnAll', i);
                    const filters = this.getNodeParameter('filters', i);
                    if (filters.asAtDate) {
                        filters.asAtDate = moment(filters.asAtDate).format('YYYY-MM-DD');
                    }
                    if (filters.modifiedSince) {
                        filters.modifiedSince = moment(filters.modifiedSince).format('YYYY-MM-DD');
                    }
                    if (filters.orderBy) {
                        filters.orderBy = filters.orderBy.trim();
                    }
                    Object.assign(qs, filters);
                    if (returnAll) {
                        responseData = await GenericFunctions_1.unleashedApiRequestAllItems.call(this, 'Items', 'GET', '/StockOnHand', {}, qs);
                    }
                    else {
                        const limit = this.getNodeParameter('limit', i);
                        qs.pageSize = limit;
                        responseData = await GenericFunctions_1.unleashedApiRequest.call(this, 'GET', `/StockOnHand`, {}, qs, 1);
                        responseData = responseData.Items;
                    }
                    GenericFunctions_1.convertNETDates(responseData);
                }
                if (operation === 'get') {
                    const productId = this.getNodeParameter('productId', i);
                    responseData = await GenericFunctions_1.unleashedApiRequest.call(this, 'GET', `/StockOnHand/${productId}`);
                    GenericFunctions_1.convertNETDates(responseData);
                }
            }
            if (Array.isArray(responseData)) {
                returnData.push.apply(returnData, responseData);
            }
            else {
                returnData.push(responseData);
            }
        }
        return [this.helpers.returnJsonArray(returnData)];
    }
}
exports.UnleashedSoftware = UnleashedSoftware;
//# sourceMappingURL=UnleashedSoftware.node.js.map