"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.RenameKeys = void 0;
const lodash_1 = require("lodash");
class RenameKeys {
    constructor() {
        this.description = {
            displayName: 'Rename Keys',
            name: 'renameKeys',
            icon: 'fa:edit',
            group: ['transform'],
            version: 1,
            description: 'Renames keys',
            defaults: {
                name: 'Rename Keys',
                color: '#772244',
            },
            inputs: ['main'],
            outputs: ['main'],
            properties: [
                {
                    displayName: 'Keys',
                    name: 'keys',
                    placeholder: 'Add new key',
                    description: 'Adds a key which should be renamed.',
                    type: 'fixedCollection',
                    typeOptions: {
                        multipleValues: true,
                        sortable: true,
                    },
                    default: {},
                    options: [
                        {
                            displayName: 'Key',
                            name: 'key',
                            values: [
                                {
                                    displayName: 'Current Key Name',
                                    name: 'currentKey',
                                    type: 'string',
                                    default: '',
                                    placeholder: 'currentKey',
                                    description: 'The current name of the key. It is also possible to define deep keys by using dot-notation like for example: "level1.level2.currentKey"',
                                },
                                {
                                    displayName: 'New Key Name',
                                    name: 'newKey',
                                    type: 'string',
                                    default: '',
                                    placeholder: 'newKey',
                                    description: 'the name the key should be renamed to. It is also possible to define deep keys by using dot-notation like for example: "level1.level2.newKey"',
                                },
                            ],
                        },
                    ],
                },
            ],
        };
    }
    async execute() {
        const items = this.getInputData();
        const returnData = [];
        let item;
        let newItem;
        let renameKeys;
        let value;
        for (let itemIndex = 0; itemIndex < items.length; itemIndex++) {
            renameKeys = this.getNodeParameter('keys.key', itemIndex, []);
            item = items[itemIndex];
            newItem = {
                json: JSON.parse(JSON.stringify(item.json)),
            };
            if (item.binary !== undefined) {
                newItem.binary = item.binary;
            }
            renameKeys.forEach((renameKey) => {
                if (renameKey.currentKey === '' || renameKey.newKey === '' || renameKey.currentKey === renameKey.newKey) {
                    return;
                }
                value = lodash_1.get(item.json, renameKey.currentKey);
                if (value === undefined) {
                    return;
                }
                lodash_1.set(newItem.json, renameKey.newKey, value);
                lodash_1.unset(newItem.json, renameKey.currentKey);
            });
            returnData.push(newItem);
        }
        return [returnData];
    }
}
exports.RenameKeys = RenameKeys;
//# sourceMappingURL=RenameKeys.node.js.map