"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ReadBinaryFiles = void 0;
const glob = require("fast-glob");
const promises_1 = require("fs/promises");
class ReadBinaryFiles {
    constructor() {
        this.description = {
            displayName: 'Read Binary Files',
            name: 'readBinaryFiles',
            icon: 'fa:file-import',
            group: ['input'],
            version: 1,
            description: 'Reads binary files from disk',
            defaults: {
                name: 'Read Binary Files',
                color: '#44AA44',
            },
            inputs: ['main'],
            outputs: ['main'],
            properties: [
                {
                    displayName: 'File Selector',
                    name: 'fileSelector',
                    type: 'string',
                    default: '',
                    required: true,
                    placeholder: '*.jpg',
                    description: 'Pattern for files to read.',
                },
                {
                    displayName: 'Property Name',
                    name: 'dataPropertyName',
                    type: 'string',
                    default: 'data',
                    required: true,
                    description: 'Name of the binary property to which to write the data of the read files.',
                },
            ],
        };
    }
    async execute() {
        const fileSelector = this.getNodeParameter('fileSelector', 0);
        const dataPropertyName = this.getNodeParameter('dataPropertyName', 0);
        const files = await glob(fileSelector);
        const items = [];
        let item;
        let data;
        for (const filePath of files) {
            data = await promises_1.readFile(filePath);
            item = {
                binary: {
                    [dataPropertyName]: await this.helpers.prepareBinaryData(data, filePath),
                },
                json: {},
            };
            items.push(item);
        }
        return this.prepareOutputData(items);
    }
}
exports.ReadBinaryFiles = ReadBinaryFiles;
//# sourceMappingURL=ReadBinaryFiles.node.js.map