"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.travisciApiRequestAllItems = exports.travisciApiRequest = void 0;
const n8n_workflow_1 = require("n8n-workflow");
const lodash_1 = require("lodash");
const querystring = require("querystring");
async function travisciApiRequest(method, resource, body = {}, qs = {}, uri, option = {}) {
    const credentials = await this.getCredentials('travisCiApi');
    if (credentials === undefined) {
        throw new n8n_workflow_1.NodeOperationError(this.getNode(), 'No credentials got returned!');
    }
    let options = {
        headers: {
            'Travis-API-Version': '3',
            'Accept': 'application/json',
            'Content-Type': 'application.json',
            'Authorization': `token ${credentials.apiToken}`,
        },
        method,
        qs,
        body,
        uri: uri || `https://api.travis-ci.com${resource}`,
        json: true,
    };
    options = Object.assign({}, options, option);
    if (Object.keys(options.body).length === 0) {
        delete options.body;
    }
    try {
        return await this.helpers.request(options);
    }
    catch (error) {
        throw new n8n_workflow_1.NodeApiError(this.getNode(), error);
    }
}
exports.travisciApiRequest = travisciApiRequest;
async function travisciApiRequestAllItems(propertyName, method, resource, body = {}, query = {}) {
    const returnData = [];
    let responseData;
    do {
        responseData = await travisciApiRequest.call(this, method, resource, body, query);
        const path = lodash_1.get(responseData, '@pagination.next.@href');
        if (path !== undefined) {
            query = querystring.parse(path);
        }
        returnData.push.apply(returnData, responseData[propertyName]);
    } while (responseData['@pagination']['is_last'] !== true);
    return returnData;
}
exports.travisciApiRequestAllItems = travisciApiRequestAllItems;
//# sourceMappingURL=GenericFunctions.js.map