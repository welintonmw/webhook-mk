"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.copyInputItem = exports.awsApiRequestAllItems = exports.awsApiRequest = void 0;
const url_1 = require("url");
const aws4_1 = require("aws4");
function getEndpointForService(service, credentials) {
    let endpoint;
    if (service === 'lambda' && credentials.lambdaEndpoint) {
        endpoint = credentials.lambdaEndpoint;
    }
    else if (service === 'sns' && credentials.snsEndpoint) {
        endpoint = credentials.snsEndpoint;
    }
    else {
        endpoint = `https://${service}.${credentials.region}.amazonaws.com`;
    }
    return endpoint.replace('{region}', credentials.region);
}
async function awsApiRequest(service, method, path, body, headers) {
    const credentials = await this.getCredentials('aws');
    if (credentials === undefined) {
        throw new Error('No credentials got returned!');
    }
    const endpoint = new url_1.URL(getEndpointForService(service, credentials) + path);
    const options = aws4_1.sign({
        uri: endpoint,
        service,
        region: credentials.region,
        method,
        path: '/',
        headers: Object.assign({}, headers),
        body: JSON.stringify(body),
    }, {
        accessKeyId: credentials.accessKeyId,
        secretAccessKey: credentials.secretAccessKey,
    });
    try {
        return JSON.parse(await this.helpers.request(options));
    }
    catch (error) {
        const errorMessage = (error.response && error.response.body.message) || (error.response && error.response.body.Message) || error.message;
        if (error.statusCode === 403) {
            if (errorMessage === 'The security token included in the request is invalid.') {
                throw new Error('The AWS credentials are not valid!');
            }
            else if (errorMessage.startsWith('The request signature we calculated does not match the signature you provided')) {
                throw new Error('The AWS credentials are not valid!');
            }
        }
        throw new Error(`AWS error response [${error.statusCode}]: ${errorMessage}`);
    }
}
exports.awsApiRequest = awsApiRequest;
async function awsApiRequestAllItems(service, method, path, body, headers) {
    const returnData = [];
    let responseData;
    do {
        responseData = await awsApiRequest.call(this, service, method, path, body, headers);
        if (responseData.LastEvaluatedKey) {
            body.ExclusiveStartKey = responseData.LastEvaluatedKey;
        }
        returnData.push(...responseData.Items);
    } while (responseData.LastEvaluatedKey !== undefined);
    return returnData;
}
exports.awsApiRequestAllItems = awsApiRequestAllItems;
function copyInputItem(item, properties) {
    let newItem;
    newItem = {};
    for (const property of properties) {
        if (item.json[property] === undefined) {
            newItem[property] = null;
        }
        else {
            newItem[property] = JSON.parse(JSON.stringify(item.json[property]));
        }
    }
    return newItem;
}
exports.copyInputItem = copyInputItem;
//# sourceMappingURL=GenericFunctions.js.map