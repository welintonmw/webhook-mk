"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.copyInputItem = exports.awsApiRequestAllItems = exports.awsApiRequest = void 0;
const n8n_workflow_1 = require("n8n-workflow");
async function awsApiRequest(service, method, path, body, headers) {
    var _a, _b, _c, _d, _e, _f, _g;
    const credentials = await this.getCredentials('aws');
    const requestOptions = {
        qs: {
            service,
            path,
        },
        method,
        body: JSON.stringify(body),
        url: '',
        headers,
        region: credentials === null || credentials === void 0 ? void 0 : credentials.region,
    };
    try {
        return JSON.parse((await this.helpers.requestWithAuthentication.call(this, 'aws', requestOptions)));
    }
    catch (error) {
        const statusCode = (error.statusCode || ((_a = error.cause) === null || _a === void 0 ? void 0 : _a.statusCode));
        let errorMessage = ((_c = (_b = error.response) === null || _b === void 0 ? void 0 : _b.body) === null || _c === void 0 ? void 0 : _c.message) || ((_e = (_d = error.response) === null || _d === void 0 ? void 0 : _d.body) === null || _e === void 0 ? void 0 : _e.Message) || error.message;
        if (statusCode === 403) {
            if (errorMessage === 'The security token included in the request is invalid.') {
                throw new n8n_workflow_1.ApplicationError('The AWS credentials are not valid!', { level: 'warning' });
            }
            else if (errorMessage.startsWith('The request signature we calculated does not match the signature you provided')) {
                throw new n8n_workflow_1.ApplicationError('The AWS credentials are not valid!', { level: 'warning' });
            }
        }
        if ((_f = error.cause) === null || _f === void 0 ? void 0 : _f.error) {
            try {
                errorMessage = JSON.parse((_g = error.cause) === null || _g === void 0 ? void 0 : _g.error).message;
            }
            catch (ex) { }
        }
        throw new n8n_workflow_1.ApplicationError(`AWS error response [${statusCode}]: ${errorMessage}`, {
            level: 'warning',
        });
    }
}
exports.awsApiRequest = awsApiRequest;
async function awsApiRequestAllItems(service, method, path, body, headers) {
    const returnData = [];
    let responseData;
    do {
        const originalHeaders = Object.assign({}, headers);
        responseData = await awsApiRequest.call(this, service, method, path, body, originalHeaders);
        if (responseData.LastEvaluatedKey) {
            body.ExclusiveStartKey = responseData.LastEvaluatedKey;
        }
        returnData.push(...responseData.Items);
    } while (responseData.LastEvaluatedKey !== undefined);
    return returnData;
}
exports.awsApiRequestAllItems = awsApiRequestAllItems;
function copyInputItem(item, properties) {
    const newItem = {};
    for (const property of properties) {
        if (item.json[property] === undefined) {
            newItem[property] = null;
        }
        else {
            newItem[property] = (0, n8n_workflow_1.deepCopy)(item.json[property]);
        }
    }
    return newItem;
}
exports.copyInputItem = copyInputItem;
//# sourceMappingURL=GenericFunctions.js.map