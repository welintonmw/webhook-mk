"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.keysTPascalCase = exports.awsApiRequestSOAPAllItems = exports.awsApiRequestSOAP = exports.awsApiRequestREST = exports.awsApiRequest = void 0;
const url_1 = require("url");
const aws4_1 = require("aws4");
const lodash_1 = require("lodash");
const xml2js_1 = require("xml2js");
const n8n_workflow_1 = require("n8n-workflow");
const change_case_1 = require("change-case");
async function awsApiRequest(service, method, path, body, query = {}, headers, option = {}, region) {
    const credentials = await this.getCredentials('aws');
    if (credentials === undefined) {
        throw new n8n_workflow_1.NodeOperationError(this.getNode(), 'No credentials got returned!');
    }
    const endpoint = new url_1.URL(((credentials.rekognitionEndpoint || '').replace('{region}', credentials.region) || `https://${service}.${credentials.region}.amazonaws.com`) + path);
    const signOpts = { headers: headers || {}, host: endpoint.host, method, path, body };
    aws4_1.sign(signOpts, { accessKeyId: `${credentials.accessKeyId}`.trim(), secretAccessKey: `${credentials.secretAccessKey}`.trim() });
    const options = {
        headers: signOpts.headers,
        method,
        uri: endpoint.href,
        body: signOpts.body,
    };
    if (Object.keys(option).length !== 0) {
        Object.assign(options, option);
    }
    try {
        return await this.helpers.request(options);
    }
    catch (error) {
        throw new n8n_workflow_1.NodeApiError(this.getNode(), error);
    }
}
exports.awsApiRequest = awsApiRequest;
async function awsApiRequestREST(service, method, path, body, query = {}, headers, options = {}, region) {
    const response = await awsApiRequest.call(this, service, method, path, body, query, headers, options, region);
    try {
        return JSON.parse(response);
    }
    catch (error) {
        return response;
    }
}
exports.awsApiRequestREST = awsApiRequestREST;
async function awsApiRequestSOAP(service, method, path, body, query = {}, headers, option = {}, region) {
    const response = await awsApiRequest.call(this, service, method, path, body, query, headers, option, region);
    try {
        return await new Promise((resolve, reject) => {
            xml2js_1.parseString(response, { explicitArray: false }, (err, data) => {
                if (err) {
                    return reject(err);
                }
                resolve(data);
            });
        });
    }
    catch (error) {
        return error;
    }
}
exports.awsApiRequestSOAP = awsApiRequestSOAP;
async function awsApiRequestSOAPAllItems(propertyName, service, method, path, body, query = {}, headers = {}, option = {}, region) {
    const returnData = [];
    let responseData;
    do {
        responseData = await awsApiRequestSOAP.call(this, service, method, path, body, query, headers, option, region);
        if (lodash_1.get(responseData, `${propertyName.split('.')[0]}.NextContinuationToken`)) {
            query['continuation-token'] = lodash_1.get(responseData, `${propertyName.split('.')[0]}.NextContinuationToken`);
        }
        if (lodash_1.get(responseData, propertyName)) {
            if (Array.isArray(lodash_1.get(responseData, propertyName))) {
                returnData.push.apply(returnData, lodash_1.get(responseData, propertyName));
            }
            else {
                returnData.push(lodash_1.get(responseData, propertyName));
            }
        }
        if (query.limit && query.limit <= returnData.length) {
            return returnData;
        }
    } while (lodash_1.get(responseData, `${propertyName.split('.')[0]}.IsTruncated`) !== undefined &&
        lodash_1.get(responseData, `${propertyName.split('.')[0]}.IsTruncated`) !== 'false');
    return returnData;
}
exports.awsApiRequestSOAPAllItems = awsApiRequestSOAPAllItems;
function queryToString(params) {
    return Object.keys(params).map(key => key + '=' + params[key]).join('&');
}
function keysTPascalCase(object) {
    const data = {};
    for (const key of Object.keys(object)) {
        data[change_case_1.pascalCase(key)] = object[key];
    }
    return data;
}
exports.keysTPascalCase = keysTPascalCase;
//# sourceMappingURL=GenericFunctions.js.map