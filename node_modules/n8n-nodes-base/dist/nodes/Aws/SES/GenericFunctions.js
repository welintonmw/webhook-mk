"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.awsApiRequestSOAPAllItems = exports.awsApiRequestSOAP = exports.awsApiRequestREST = exports.awsApiRequest = void 0;
const url_1 = require("url");
const aws4_1 = require("aws4");
const xml2js_1 = require("xml2js");
const n8n_workflow_1 = require("n8n-workflow");
const lodash_1 = require("lodash");
async function awsApiRequest(service, method, path, body, headers) {
    const credentials = await this.getCredentials('aws');
    if (credentials === undefined) {
        throw new n8n_workflow_1.NodeOperationError(this.getNode(), 'No credentials got returned!');
    }
    const endpoint = new url_1.URL(((credentials.sesEndpoint || '').replace('{region}', credentials.region) || `https://${service}.${credentials.region}.amazonaws.com`) + path);
    const signOpts = { headers: headers || {}, host: endpoint.host, method, path, body };
    aws4_1.sign(signOpts, { accessKeyId: `${credentials.accessKeyId}`.trim(), secretAccessKey: `${credentials.secretAccessKey}`.trim() });
    const options = {
        headers: signOpts.headers,
        method,
        uri: endpoint.href,
        body: signOpts.body,
    };
    try {
        return await this.helpers.request(options);
    }
    catch (error) {
        throw new n8n_workflow_1.NodeApiError(this.getNode(), error, { parseXml: true });
    }
}
exports.awsApiRequest = awsApiRequest;
async function awsApiRequestREST(service, method, path, body, headers) {
    const response = await awsApiRequest.call(this, service, method, path, body, headers);
    try {
        return JSON.parse(response);
    }
    catch (error) {
        return response;
    }
}
exports.awsApiRequestREST = awsApiRequestREST;
async function awsApiRequestSOAP(service, method, path, body, headers) {
    const response = await awsApiRequest.call(this, service, method, path, body, headers);
    try {
        return await new Promise((resolve, reject) => {
            xml2js_1.parseString(response, { explicitArray: false }, (err, data) => {
                if (err) {
                    return reject(err);
                }
                resolve(data);
            });
        });
    }
    catch (error) {
        return response;
    }
}
exports.awsApiRequestSOAP = awsApiRequestSOAP;
async function awsApiRequestSOAPAllItems(propertyName, service, method, path, body, query = {}, headers = {}, option = {}, region) {
    const returnData = [];
    let responseData;
    const propertyNameArray = propertyName.split('.');
    do {
        responseData = await awsApiRequestSOAP.call(this, service, method, path, body, query);
        if (lodash_1.get(responseData, `${propertyNameArray[0]}.${propertyNameArray[1]}.NextToken`)) {
            query['NextToken'] = lodash_1.get(responseData, `${propertyNameArray[0]}.${propertyNameArray[1]}.NextToken`);
        }
        if (lodash_1.get(responseData, propertyName)) {
            if (Array.isArray(lodash_1.get(responseData, propertyName))) {
                returnData.push.apply(returnData, lodash_1.get(responseData, propertyName));
            }
            else {
                returnData.push(lodash_1.get(responseData, propertyName));
            }
        }
    } while (lodash_1.get(responseData, `${propertyNameArray[0]}.${propertyNameArray[1]}.NextToken`) !== undefined);
    return returnData;
}
exports.awsApiRequestSOAPAllItems = awsApiRequestSOAPAllItems;
//# sourceMappingURL=GenericFunctions.js.map