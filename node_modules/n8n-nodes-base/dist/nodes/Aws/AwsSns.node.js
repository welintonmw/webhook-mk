"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.AwsSns = void 0;
const GenericFunctions_1 = require("./GenericFunctions");
class AwsSns {
    constructor() {
        this.description = {
            displayName: 'AWS SNS',
            name: 'awsSns',
            icon: 'file:sns.svg',
            group: ['output'],
            version: 1,
            subtitle: '={{$parameter["topic"]}}',
            description: 'Sends data to AWS SNS',
            defaults: {
                name: 'AWS SNS',
                color: '#FF9900',
            },
            inputs: ['main'],
            outputs: ['main'],
            credentials: [
                {
                    name: 'aws',
                    required: true,
                },
            ],
            properties: [
                {
                    displayName: 'Operation',
                    name: 'operation',
                    type: 'options',
                    options: [
                        {
                            name: 'Publish',
                            value: 'publish',
                            description: 'Publish a message to a topic',
                        },
                    ],
                    default: 'publish',
                    description: 'The operation to perform.',
                },
                {
                    displayName: 'Topic',
                    name: 'topic',
                    type: 'options',
                    typeOptions: {
                        loadOptionsMethod: 'getTopics',
                    },
                    displayOptions: {
                        show: {
                            operation: [
                                'publish',
                            ],
                        },
                    },
                    options: [],
                    default: '',
                    required: true,
                    description: 'The topic you want to publish to',
                },
                {
                    displayName: 'Subject',
                    name: 'subject',
                    type: 'string',
                    displayOptions: {
                        show: {
                            operation: [
                                'publish',
                            ],
                        },
                    },
                    default: '',
                    required: true,
                    description: 'Subject when the message is delivered to email endpoints',
                },
                {
                    displayName: 'Message',
                    name: 'message',
                    type: 'string',
                    displayOptions: {
                        show: {
                            operation: [
                                'publish',
                            ],
                        },
                    },
                    required: true,
                    typeOptions: {
                        alwaysOpenEditWindow: true,
                    },
                    default: '',
                    description: 'The message you want to send',
                },
            ],
        };
        this.methods = {
            loadOptions: {
                async getTopics() {
                    const returnData = [];
                    const data = await GenericFunctions_1.awsApiRequestSOAP.call(this, 'sns', 'GET', '/?Action=ListTopics');
                    let topics = data.ListTopicsResponse.ListTopicsResult.Topics.member;
                    if (!Array.isArray(topics)) {
                        topics = [topics];
                    }
                    for (const topic of topics) {
                        const topicArn = topic.TopicArn;
                        const topicName = topicArn.split(':')[5];
                        returnData.push({
                            name: topicName,
                            value: topicArn,
                        });
                    }
                    return returnData;
                },
            },
        };
    }
    async execute() {
        const items = this.getInputData();
        const returnData = [];
        for (let i = 0; i < items.length; i++) {
            try {
                const params = [
                    'TopicArn=' + this.getNodeParameter('topic', i),
                    'Subject=' + this.getNodeParameter('subject', i),
                    'Message=' + this.getNodeParameter('message', i),
                ];
                const responseData = await GenericFunctions_1.awsApiRequestSOAP.call(this, 'sns', 'GET', '/?Action=Publish&' + params.join('&'));
                returnData.push({ MessageId: responseData.PublishResponse.PublishResult.MessageId });
            }
            catch (error) {
                if (this.continueOnFail()) {
                    returnData.push({ error: error.message });
                    continue;
                }
                throw error;
            }
        }
        return [this.helpers.returnJsonArray(returnData)];
    }
}
exports.AwsSns = AwsSns;
//# sourceMappingURL=AwsSns.node.js.map