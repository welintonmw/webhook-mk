"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.PayPal = void 0;
const n8n_workflow_1 = require("n8n-workflow");
const PaymentDescription_1 = require("./PaymentDescription");
const GenericFunctions_1 = require("./GenericFunctions");
class PayPal {
    constructor() {
        this.description = {
            displayName: 'PayPal',
            name: 'payPal',
            icon: 'file:paypal.svg',
            group: ['output'],
            version: 1,
            subtitle: '={{$parameter["operation"] + ": " + $parameter["resource"]}}',
            description: 'Consume PayPal API',
            defaults: {
                name: 'PayPal',
                color: '#356ae6',
            },
            inputs: ['main'],
            outputs: ['main'],
            credentials: [
                {
                    name: 'payPalApi',
                    required: true,
                },
            ],
            properties: [
                {
                    displayName: 'Resource',
                    name: 'resource',
                    type: 'options',
                    options: [
                        {
                            name: 'Payout',
                            value: 'payout',
                        },
                        {
                            name: 'Payout Item',
                            value: 'payoutItem',
                        },
                    ],
                    default: 'payout',
                    description: 'Resource to consume.',
                },
                ...PaymentDescription_1.payoutOperations,
                ...PaymentDescription_1.payoutItemOperations,
                ...PaymentDescription_1.payoutFields,
                ...PaymentDescription_1.payoutItemFields,
            ],
        };
    }
    async execute() {
        const items = this.getInputData();
        const returnData = [];
        const length = items.length;
        let responseData;
        const qs = {};
        const resource = this.getNodeParameter('resource', 0);
        const operation = this.getNodeParameter('operation', 0);
        for (let i = 0; i < length; i++) {
            try {
                if (resource === 'payout') {
                    if (operation === 'create') {
                        const body = {};
                        const header = {};
                        const jsonActive = this.getNodeParameter('jsonParameters', i);
                        const senderBatchId = this.getNodeParameter('senderBatchId', i);
                        const additionalFields = this.getNodeParameter('additionalFields', i);
                        header.sender_batch_id = senderBatchId;
                        if (additionalFields.emailSubject) {
                            header.email_subject = additionalFields.emailSubject;
                        }
                        if (additionalFields.emailMessage) {
                            header.email_message = additionalFields.emailMessage;
                        }
                        if (additionalFields.note) {
                            header.note = additionalFields.note;
                        }
                        body.sender_batch_header = header;
                        if (!jsonActive) {
                            const payoutItems = [];
                            const itemsValues = this.getNodeParameter('itemsUi', i).itemsValues;
                            if (itemsValues && itemsValues.length > 0) {
                                itemsValues.forEach(o => {
                                    const payoutItem = {};
                                    const amount = {};
                                    amount.currency = o.currency;
                                    amount.value = parseFloat(o.amount);
                                    payoutItem.amount = amount;
                                    payoutItem.note = o.note || '';
                                    payoutItem.receiver = o.receiverValue;
                                    payoutItem.recipient_type = o.recipientType;
                                    payoutItem.recipient_wallet = o.recipientWallet;
                                    payoutItem.sender_item_id = o.senderItemId || '';
                                    payoutItems.push(payoutItem);
                                });
                                body.items = payoutItems;
                            }
                            else {
                                throw new n8n_workflow_1.NodeOperationError(this.getNode(), 'You must have at least one item.');
                            }
                        }
                        else {
                            const itemsJson = GenericFunctions_1.validateJSON(this.getNodeParameter('itemsJson', i));
                            body.items = itemsJson;
                        }
                        responseData = await GenericFunctions_1.payPalApiRequest.call(this, '/payments/payouts', 'POST', body);
                    }
                    if (operation === 'get') {
                        const payoutBatchId = this.getNodeParameter('payoutBatchId', i);
                        const returnAll = this.getNodeParameter('returnAll', 0);
                        if (returnAll === true) {
                            responseData = await GenericFunctions_1.payPalApiRequestAllItems.call(this, 'items', `/payments/payouts/${payoutBatchId}`, 'GET', {}, qs);
                        }
                        else {
                            qs.page_size = this.getNodeParameter('limit', i);
                            responseData = await GenericFunctions_1.payPalApiRequest.call(this, `/payments/payouts/${payoutBatchId}`, 'GET', {}, qs);
                            responseData = responseData.items;
                        }
                    }
                }
                else if (resource === 'payoutItem') {
                    if (operation === 'get') {
                        const payoutItemId = this.getNodeParameter('payoutItemId', i);
                        responseData = await GenericFunctions_1.payPalApiRequest.call(this, `/payments/payouts-item/${payoutItemId}`, 'GET', {}, qs);
                    }
                    if (operation === 'cancel') {
                        const payoutItemId = this.getNodeParameter('payoutItemId', i);
                        responseData = await GenericFunctions_1.payPalApiRequest.call(this, `/payments/payouts-item/${payoutItemId}/cancel`, 'POST', {}, qs);
                    }
                }
                if (Array.isArray(responseData)) {
                    returnData.push.apply(returnData, responseData);
                }
                else {
                    returnData.push(responseData);
                }
            }
            catch (error) {
                if (this.continueOnFail()) {
                    returnData.push({ error: error.message });
                    continue;
                }
                throw error;
            }
        }
        return [this.helpers.returnJsonArray(returnData)];
    }
}
exports.PayPal = PayPal;
//# sourceMappingURL=PayPal.node.js.map