"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.PayPalTrigger = void 0;
const n8n_workflow_1 = require("n8n-workflow");
const GenericFunctions_1 = require("./GenericFunctions");
class PayPalTrigger {
    constructor() {
        this.description = {
            displayName: 'PayPal Trigger',
            name: 'payPalTrigger',
            icon: 'file:paypal.svg',
            group: ['trigger'],
            version: 1,
            description: 'Handle PayPal events via webhooks',
            defaults: {
                name: 'PayPal Trigger',
                color: '#32325d',
            },
            inputs: [],
            outputs: ['main'],
            credentials: [
                {
                    name: 'payPalApi',
                    required: true,
                },
            ],
            webhooks: [
                {
                    name: 'default',
                    httpMethod: 'POST',
                    reponseMode: 'onReceived',
                    path: 'webhook',
                },
            ],
            properties: [
                {
                    displayName: 'Events',
                    name: 'events',
                    type: 'multiOptions',
                    required: true,
                    default: [],
                    description: 'The event to listen to.',
                    typeOptions: {
                        loadOptionsMethod: 'getEvents',
                    },
                    options: [],
                },
            ],
        };
        this.methods = {
            loadOptions: {
                async getEvents() {
                    const returnData = [
                        {
                            name: '*',
                            value: '*',
                            description: 'Any time any event is triggered (Wildcard Event).',
                        },
                    ];
                    let events;
                    try {
                        const endpoint = '/notifications/webhooks-event-types';
                        events = await GenericFunctions_1.payPalApiRequest.call(this, endpoint, 'GET');
                    }
                    catch (error) {
                        throw new n8n_workflow_1.NodeApiError(this.getNode(), error);
                    }
                    for (const event of events.event_types) {
                        const eventName = GenericFunctions_1.upperFist(event.name);
                        const eventId = event.name;
                        const eventDescription = event.description;
                        returnData.push({
                            name: eventName,
                            value: eventId,
                            description: eventDescription,
                        });
                    }
                    return returnData;
                },
            },
        };
        this.webhookMethods = {
            default: {
                async checkExists() {
                    const webhookData = this.getWorkflowStaticData('node');
                    if (webhookData.webhookId === undefined) {
                        return false;
                    }
                    const endpoint = `/notifications/webhooks/${webhookData.webhookId}`;
                    try {
                        await GenericFunctions_1.payPalApiRequest.call(this, endpoint, 'GET');
                    }
                    catch (error) {
                        if (error.response && error.response.name === 'INVALID_RESOURCE_ID') {
                            delete webhookData.webhookId;
                            return false;
                        }
                        throw new n8n_workflow_1.NodeApiError(this.getNode(), error);
                    }
                    return true;
                },
                async create() {
                    let webhook;
                    const webhookUrl = this.getNodeWebhookUrl('default');
                    const events = this.getNodeParameter('events', []);
                    const body = {
                        url: webhookUrl,
                        event_types: events.map(event => {
                            return { name: event };
                        }),
                    };
                    const endpoint = '/notifications/webhooks';
                    try {
                        webhook = await GenericFunctions_1.payPalApiRequest.call(this, endpoint, 'POST', body);
                    }
                    catch (error) {
                        throw error;
                    }
                    if (webhook.id === undefined) {
                        return false;
                    }
                    const webhookData = this.getWorkflowStaticData('node');
                    webhookData.webhookId = webhook.id;
                    return true;
                },
                async delete() {
                    const webhookData = this.getWorkflowStaticData('node');
                    if (webhookData.webhookId !== undefined) {
                        const endpoint = `/notifications/webhooks/${webhookData.webhookId}`;
                        try {
                            await GenericFunctions_1.payPalApiRequest.call(this, endpoint, 'DELETE', {});
                        }
                        catch (error) {
                            return false;
                        }
                        delete webhookData.webhookId;
                    }
                    return true;
                },
            },
        };
    }
    async webhook() {
        let webhook;
        const webhookData = this.getWorkflowStaticData('node');
        const bodyData = this.getBodyData();
        const req = this.getRequestObject();
        const headerData = this.getHeaderData();
        const endpoint = '/notifications/verify-webhook-signature';
        if (headerData['PAYPAL-AUTH-ALGO'] !== undefined
            && headerData['PAYPAL-CERT-URL'] !== undefined
            && headerData['PAYPAL-TRANSMISSION-ID'] !== undefined
            && headerData['PAYPAL-TRANSMISSION-SIG'] !== undefined
            && headerData['PAYPAL-TRANSMISSION-TIME'] !== undefined) {
            const body = {
                auth_algo: headerData['PAYPAL-AUTH-ALGO'],
                cert_url: headerData['PAYPAL-CERT-URL'],
                transmission_id: headerData['PAYPAL-TRANSMISSION-ID'],
                transmission_sig: headerData['PAYPAL-TRANSMISSION-SIG'],
                transmission_time: headerData['PAYPAL-TRANSMISSION-TIME'],
                webhook_id: webhookData.webhookId,
                webhook_event: bodyData,
            };
            try {
                webhook = await GenericFunctions_1.payPalApiRequest.call(this, endpoint, 'POST', body);
            }
            catch (error) {
                throw error;
            }
            if (webhook.verification_status !== 'SUCCESS') {
                return {};
            }
        }
        else {
            return {};
        }
        return {
            workflowData: [
                this.helpers.returnJsonArray(req.body),
            ],
        };
    }
}
exports.PayPalTrigger = PayPalTrigger;
//# sourceMappingURL=PayPalTrigger.node.js.map