"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Ssh = void 0;
const promises_1 = require("fs/promises");
const tmp_promise_1 = require("tmp-promise");
const nodeSSH = require('node-ssh');
class Ssh {
    constructor() {
        this.description = {
            displayName: 'SSH',
            name: 'ssh',
            icon: 'fa:terminal',
            group: ['input'],
            version: 1,
            subtitle: '={{$parameter["operation"] + ": " + $parameter["resource"]}}',
            description: 'Execute commands via SSH',
            defaults: {
                name: 'SSH',
                color: '#000000',
            },
            inputs: ['main'],
            outputs: ['main'],
            credentials: [
                {
                    name: 'sshPassword',
                    required: true,
                    displayOptions: {
                        show: {
                            authentication: [
                                'password',
                            ],
                        },
                    },
                },
                {
                    name: 'sshPrivateKey',
                    required: true,
                    displayOptions: {
                        show: {
                            authentication: [
                                'privateKey',
                            ],
                        },
                    },
                },
            ],
            properties: [
                {
                    displayName: 'Authentication',
                    name: 'authentication',
                    type: 'options',
                    options: [
                        {
                            name: 'Password',
                            value: 'password',
                        },
                        {
                            name: 'Private Key',
                            value: 'privateKey',
                        },
                    ],
                    default: 'password',
                },
                {
                    displayName: 'Resource',
                    name: 'resource',
                    type: 'options',
                    options: [
                        {
                            name: 'Command',
                            value: 'command',
                        },
                        {
                            name: 'File',
                            value: 'file',
                        },
                    ],
                    default: 'command',
                },
                {
                    displayName: 'Operation',
                    name: 'operation',
                    type: 'options',
                    displayOptions: {
                        show: {
                            resource: [
                                'command',
                            ],
                        },
                    },
                    options: [
                        {
                            name: 'Execute',
                            value: 'execute',
                            description: 'Execute a command',
                        },
                    ],
                    default: 'execute',
                    description: 'Operation to perform.',
                },
                {
                    displayName: 'Command',
                    name: 'command',
                    type: 'string',
                    displayOptions: {
                        show: {
                            resource: [
                                'command',
                            ],
                            operation: [
                                'execute',
                            ],
                        },
                    },
                    default: '',
                    description: 'The command to be executed on a remote device.',
                },
                {
                    displayName: 'Working Directory',
                    name: 'cwd',
                    type: 'string',
                    displayOptions: {
                        show: {
                            resource: [
                                'command',
                            ],
                            operation: [
                                'execute',
                            ],
                        },
                    },
                    default: '/',
                    required: true,
                },
                {
                    displayName: 'Operation',
                    name: 'operation',
                    type: 'options',
                    displayOptions: {
                        show: {
                            resource: [
                                'file',
                            ],
                        },
                    },
                    options: [
                        {
                            name: 'Download',
                            value: 'download',
                            description: 'Download a file',
                        },
                        {
                            name: 'Upload',
                            value: 'upload',
                            description: 'Upload a file',
                        },
                    ],
                    default: 'upload',
                    description: 'Operation to perform.',
                },
                {
                    displayName: 'Binary Property',
                    name: 'binaryPropertyName',
                    type: 'string',
                    default: 'data',
                    required: true,
                    displayOptions: {
                        show: {
                            operation: [
                                'upload',
                            ],
                            resource: [
                                'file',
                            ],
                        },
                    },
                    placeholder: '',
                    description: 'Name of the binary property which contains the data for the file to be uploaded.',
                },
                {
                    displayName: 'Target Directory',
                    name: 'path',
                    type: 'string',
                    displayOptions: {
                        show: {
                            resource: [
                                'file',
                            ],
                            operation: [
                                'upload',
                            ],
                        },
                    },
                    default: '',
                    required: true,
                    placeholder: '/home/user',
                    description: `The directory to upload the file to. The name of the file does not need to be specified,</br>
				it's taken from the binary data file name. To override this behavior, set the parameter</br>
				"File Name" under options.`,
                },
                {
                    displayName: 'Path',
                    displayOptions: {
                        show: {
                            resource: [
                                'file',
                            ],
                            operation: [
                                'download',
                            ],
                        },
                    },
                    name: 'path',
                    type: 'string',
                    default: '',
                    placeholder: '/home/user/invoice.txt',
                    description: 'The file path of the file to download. Has to contain the full path including file name.',
                    required: true,
                },
                {
                    displayName: 'Binary Property',
                    displayOptions: {
                        show: {
                            resource: [
                                'file',
                            ],
                            operation: [
                                'download',
                            ],
                        },
                    },
                    name: 'binaryPropertyName',
                    type: 'string',
                    default: 'data',
                    description: 'Object property name which holds binary data.',
                    required: true,
                },
                {
                    displayName: 'Options',
                    name: 'options',
                    type: 'collection',
                    placeholder: 'Add Option',
                    displayOptions: {
                        show: {
                            resource: [
                                'file',
                            ],
                            operation: [
                                'upload',
                            ],
                        },
                    },
                    default: {},
                    options: [
                        {
                            displayName: 'File Name',
                            name: 'fileName',
                            type: 'string',
                            default: '',
                            description: `Overrides the binary data file name.`,
                        },
                    ],
                },
            ],
        };
    }
    async execute() {
        const items = this.getInputData();
        const returnData = [];
        const resource = this.getNodeParameter('resource', 0);
        const operation = this.getNodeParameter('operation', 0);
        const authentication = this.getNodeParameter('authentication', 0);
        const temporaryFiles = [];
        const ssh = new nodeSSH.NodeSSH();
        try {
            if (authentication === 'password') {
                const credentials = await this.getCredentials('sshPassword');
                await ssh.connect({
                    host: credentials.host,
                    username: credentials.username,
                    port: credentials.port,
                    password: credentials.password,
                });
            }
            else if (authentication === 'privateKey') {
                const credentials = await this.getCredentials('sshPrivateKey');
                const { path, } = await tmp_promise_1.file({ prefix: 'n8n-ssh-' });
                temporaryFiles.push(path);
                await promises_1.writeFile(path, credentials.privateKey);
                const options = {
                    host: credentials.host,
                    username: credentials.username,
                    port: credentials.port,
                    privateKey: path,
                };
                if (credentials.passphrase) {
                    options.passphrase = credentials.passphrase;
                }
                await ssh.connect(options);
            }
            for (let i = 0; i < items.length; i++) {
                try {
                    if (resource === 'command') {
                        if (operation === 'execute') {
                            const command = this.getNodeParameter('command', i);
                            const cwd = this.getNodeParameter('cwd', i);
                            returnData.push(await ssh.execCommand(command, { cwd, }));
                        }
                    }
                    if (resource === 'file') {
                        if (operation === 'download') {
                            const dataPropertyNameDownload = this.getNodeParameter('binaryPropertyName', i);
                            const parameterPath = this.getNodeParameter('path', i);
                            const { path } = await tmp_promise_1.file({ prefix: 'n8n-ssh-' });
                            temporaryFiles.push(path);
                            await ssh.getFile(path, parameterPath);
                            const newItem = {
                                json: items[i].json,
                                binary: {},
                            };
                            if (items[i].binary !== undefined) {
                                Object.assign(newItem.binary, items[i].binary);
                            }
                            items[i] = newItem;
                            const data = await promises_1.readFile(path);
                            items[i].binary[dataPropertyNameDownload] = await this.helpers.prepareBinaryData(data, parameterPath);
                        }
                        if (operation === 'upload') {
                            const parameterPath = this.getNodeParameter('path', i);
                            const fileName = this.getNodeParameter('options.fileName', i, '');
                            const item = items[i];
                            if (item.binary === undefined) {
                                throw new Error('No binary data exists on item!');
                            }
                            const propertyNameUpload = this.getNodeParameter('binaryPropertyName', i);
                            const binaryData = item.binary[propertyNameUpload];
                            if (item.binary[propertyNameUpload] === undefined) {
                                throw new Error(`No binary data property "${propertyNameUpload}" does not exists on item!`);
                            }
                            const dataBuffer = await this.helpers.getBinaryDataBuffer(i, propertyNameUpload);
                            const { path } = await tmp_promise_1.file({ prefix: 'n8n-ssh-' });
                            temporaryFiles.push(path);
                            await promises_1.writeFile(path, dataBuffer);
                            await ssh.putFile(path, `${parameterPath}${(parameterPath.charAt(parameterPath.length - 1) === '/') ? '' : '/'}${fileName || binaryData.fileName}`);
                            returnData.push({ success: true });
                        }
                    }
                }
                catch (error) {
                    if (this.continueOnFail()) {
                        if (resource === 'file' && operation === 'download') {
                            items[i] = {
                                json: {
                                    error: error.message,
                                },
                            };
                        }
                        else {
                            returnData.push({ error: error.message });
                        }
                        continue;
                    }
                    throw error;
                }
            }
        }
        catch (error) {
            ssh.dispose();
            for (const tempFile of temporaryFiles)
                await promises_1.rm(tempFile);
            throw error;
        }
        for (const tempFile of temporaryFiles)
            await promises_1.rm(tempFile);
        ssh.dispose();
        if (resource === 'file' && operation === 'download') {
            return this.prepareOutputData(items);
        }
        else {
            return [this.helpers.returnJsonArray(returnData)];
        }
    }
}
exports.Ssh = Ssh;
//# sourceMappingURL=Ssh.node.js.map