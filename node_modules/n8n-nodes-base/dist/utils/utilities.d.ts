import type { IDataObject, IDisplayOptions, INodeExecutionData, INodeProperties, IPairedItemData } from 'n8n-workflow';
export declare function chunk<T>(array: T[], size?: number): T[][];
export declare const shuffleArray: <T>(array: T[]) => void;
export declare const flattenKeys: (obj: IDataObject, prefix?: string[]) => IDataObject;
export declare function flatten<T>(nestedArray: T[][]): any;
export declare const compareItems: <T extends {
    json: Record<string, unknown>;
}>(obj1: T, obj2: T, keys: string[], disableDotNotation?: boolean) => boolean;
export declare function updateDisplayOptions(displayOptions: IDisplayOptions, properties: INodeProperties[]): {
    displayOptions: IDisplayOptions;
    displayName: string;
    name: string;
    type: import("n8n-workflow").NodePropertyTypes;
    typeOptions?: import("n8n-workflow").INodePropertyTypeOptions | undefined;
    default: import("n8n-workflow").NodeParameterValueType;
    description?: string | undefined;
    hint?: string | undefined;
    options?: (INodeProperties | import("n8n-workflow").INodePropertyOptions | import("n8n-workflow").INodePropertyCollection)[] | undefined;
    placeholder?: string | undefined;
    isNodeSetting?: boolean | undefined;
    noDataExpression?: boolean | undefined;
    required?: boolean | undefined;
    routing?: import("n8n-workflow").INodePropertyRouting | undefined;
    credentialTypes?: ("extends:oAuth2Api" | "extends:oAuth1Api" | "has:authenticate" | "has:genericAuth")[] | undefined;
    extractValue?: import("n8n-workflow").INodePropertyValueExtractorRegex | undefined;
    modes?: import("n8n-workflow").INodePropertyMode[] | undefined;
    requiresDataPath?: "single" | "multiple" | undefined;
    doNotInherit?: boolean | undefined;
    validateType?: keyof import("n8n-workflow").FieldTypeMap | undefined;
    ignoreValidationDuringExecution?: boolean | undefined;
}[];
export declare function processJsonInput<T>(jsonData: T, inputName?: string): unknown;
export declare const fuzzyCompare: (useFuzzyCompare: boolean, compareVersion?: number) => <T, U>(item1: T, item2: U) => boolean;
export declare function wrapData(data: IDataObject | IDataObject[]): INodeExecutionData[];
export declare const keysToLowercase: <T>(headers: T) => IDataObject | T;
export declare function formatPrivateKey(privateKey: string, keyIsPublic?: boolean): string;
export declare function getResolvables(expression: string): string[];
export declare function flattenObject(data: IDataObject): IDataObject;
export declare function capitalize(str: string): string;
export declare function generatePairedItemData(length: number): IPairedItemData[];
export declare function preparePairedItemDataArray(pairedItem: number | IPairedItemData | IPairedItemData[] | undefined): IPairedItemData[];
export declare const sanitizeDataPathKey: (item: IDataObject, key: string) => string;
