{"version":3,"sources":["../src/httpRequest.ts"],"sourcesContent":["import {\n  fetch,\n  getGlobalDispatcher,\n  setGlobalDispatcher,\n  Dispatcher,\n  ProxyAgent,\n} from 'undici'\n\nimport { URL } from 'node:url'\n\nfunction getProxyAgent(variableName: string) {\n  const proxyURI = process.env[variableName]\n  return proxyURI ? new ProxyAgent(proxyURI) : null\n}\n\nconst httpProxy =\n  getProxyAgent('http_proxy_license_server') || getProxyAgent('http_proxy')\nconst httpsProxy =\n  getProxyAgent('https_proxy_license_server') || getProxyAgent('https_proxy')\n\nconst proxyAgents = {\n  ...(httpProxy ? { 'http:': httpProxy } : {}),\n  ...(httpsProxy ? { 'https:': httpsProxy } : {}),\n}\n\nconst noProxyRules = (process.env['no_proxy'] ?? '')\n  .split(',')\n  .map((rule) => rule.trim())\n\nconst defaultDispatcher = getGlobalDispatcher()\n\nsetGlobalDispatcher(\n  new (class extends Dispatcher {\n    dispatch(options: any, handler: any) {\n      if (options.origin) {\n        const { host, protocol } =\n          typeof options.origin === 'string'\n            ? new URL(options.origin)\n            : options.origin\n        if (\n          !noProxyRules.some((rule) =>\n            rule.startsWith('.') ? host.endsWith(rule) : host === rule\n          )\n        ) {\n          const proxyAgent = proxyAgents[protocol as 'http:' | 'https:']\n          if (proxyAgent) {\n            proxyAgent.dispatch(options, handler)\n          }\n        }\n      }\n      return defaultDispatcher.dispatch(options, handler)\n    }\n  })()\n)\n\nexport async function postRequest<T>(\n  url: string,\n  data: {},\n  options: {\n    timeoutInMs?: number\n  } = {}\n) {\n  const controller = new AbortController()\n\n  const timeout = setTimeout(() => {\n    controller.abort()\n  }, options.timeoutInMs ?? 30000)\n\n  try {\n    const response = await fetch(url, {\n      method: 'post',\n      body: JSON.stringify(data),\n      headers: { 'Content-Type': 'application/json' },\n      signal: controller.signal,\n    })\n\n    const responseJson = await response.json()\n\n    return {\n      status: response.status,\n      data: responseJson as T,\n    }\n  } catch (err) {\n    throw new Error('Connection Error', { cause: err })\n  } finally {\n    clearTimeout(timeout)\n  }\n}\n\nexport default {\n  postRequest,\n}\n"],"mappings":"AAAA,OACE,SAAAA,EACA,uBAAAC,EACA,uBAAAC,EACA,cAAAC,EACA,cAAAC,MACK,SAEP,OAAS,OAAAC,MAAW,MAEpB,SAASC,EAAcC,EAAsB,CAC3C,IAAMC,EAAW,QAAQ,IAAID,CAAY,EACzC,OAAOC,EAAW,IAAIJ,EAAWI,CAAQ,EAAI,IAC/C,CAEA,IAAMC,EACJH,EAAc,2BAA2B,GAAKA,EAAc,YAAY,EACpEI,EACJJ,EAAc,4BAA4B,GAAKA,EAAc,aAAa,EAEtEK,EAAc,CAClB,GAAIF,EAAY,CAAE,QAASA,CAAU,EAAI,CAAC,EAC1C,GAAIC,EAAa,CAAE,SAAUA,CAAW,EAAI,CAAC,CAC/C,EAEME,GAAgB,QAAQ,IAAI,UAAe,IAC9C,MAAM,GAAG,EACT,IAAKC,GAASA,EAAK,KAAK,CAAC,EAEtBC,EAAoBb,EAAoB,EAE9CC,EACE,IAAK,cAAcC,CAAW,CAC5B,SAASY,EAAcC,EAAc,CACnC,GAAID,EAAQ,OAAQ,CAClB,GAAM,CAAE,KAAAE,EAAM,SAAAC,CAAS,EACrB,OAAOH,EAAQ,QAAW,SACtB,IAAIV,EAAIU,EAAQ,MAAM,EACtBA,EAAQ,OACd,GACE,CAACH,EAAa,KAAMC,GAClBA,EAAK,WAAW,GAAG,EAAII,EAAK,SAASJ,CAAI,EAAII,IAASJ,CACxD,EACA,CACA,IAAMM,EAAaR,EAAYO,CAA8B,EACzDC,GACFA,EAAW,SAASJ,EAASC,CAAO,CAExC,CACF,CACA,OAAOF,EAAkB,SAASC,EAASC,CAAO,CACpD,CACF,CACF,EAEA,eAAsBI,EACpBC,EACAC,EACAP,EAEI,CAAC,EACL,CACA,IAAMQ,EAAa,IAAI,gBAEjBC,EAAU,WAAW,IAAM,CAC/BD,EAAW,MAAM,CACnB,EAAGR,EAAQ,aAAe,GAAK,EAE/B,GAAI,CACF,IAAMU,EAAW,MAAMzB,EAAMqB,EAAK,CAChC,OAAQ,OACR,KAAM,KAAK,UAAUC,CAAI,EACzB,QAAS,CAAE,eAAgB,kBAAmB,EAC9C,OAAQC,EAAW,MACrB,CAAC,EAEKG,EAAe,MAAMD,EAAS,KAAK,EAEzC,MAAO,CACL,OAAQA,EAAS,OACjB,KAAMC,CACR,CACF,OAASC,EAAK,CACZ,MAAM,IAAI,MAAM,mBAAoB,CAAE,MAAOA,CAAI,CAAC,CACpD,QAAE,CACA,aAAaH,CAAO,CACtB,CACF,CAEA,IAAOI,EAAQ,CACb,YAAAR,CACF","names":["fetch","getGlobalDispatcher","setGlobalDispatcher","Dispatcher","ProxyAgent","URL","getProxyAgent","variableName","proxyURI","httpProxy","httpsProxy","proxyAgents","noProxyRules","rule","defaultDispatcher","options","handler","host","protocol","proxyAgent","postRequest","url","data","controller","timeout","response","responseJson","err","httpRequest_default"]}