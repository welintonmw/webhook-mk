/// <reference types="node" />

import { X509Certificate } from 'node:crypto';

export declare function computeDeviceFingerprint(): Promise<string>;

export declare const default_alias: {
    postRequest: typeof postRequest;
};

export declare function generateCertContainerStr(options?: {}): Promise<string>;

export declare function generateTamperedCert(options?: Object): Promise<string>;

export declare class LicenseManager {
    config: TLicenseManagerConfig;
    private isInitializationCompleted;
    private key?;
    private logger;
    protected licenseCert?: TLicenseCertObj;
    private x509Cert?;
    private x509IssuerCert;
    private deviceFingerprint?;
    private renewalIntervalPointer?;
    private checkUpcomingEntitlementChangesCron?;
    private entitlementChangeTimeoutPointer?;
    private currentFeatures?;
    private isShuttingDown;
    constructor(config: TLicenseManagerConfig);
    log(msg: string, logLevel: LogLevel): void;
    private isInitialized;
    initialize(): Promise<void>;
    reload(): Promise<void>;
    reset(): void;
    computeDeviceFingerprint(): Promise<string>;
    activate(reservationId: string): Promise<void>;
    renew(): Promise<void>;
    _renew({ detachFloatingEntitlements, cause, }?: {
        detachFloatingEntitlements?: Boolean;
        cause?: 'startup' | 'shutdown' | 'request' | 'auto' | 'unknown';
    }): Promise<void>;
    private hasCert;
    isTerminated(): boolean;
    getExpiryDate(): Date;
    getTerminationDate(): Date;
    isValid(useLogger?: boolean): boolean;
    hasFeatureEnabled(feature: string, requireValidCert?: boolean): boolean;
    hasFeatureDefined(feature: string, requireValidCert?: boolean): boolean;
    hasQuotaLeft(quotaFeatureName: string, currentConsumption: number): boolean;
    getFeatureValue(feature: string, requireValidCert?: boolean): undefined | boolean | number | string;
    private updateCurrentFeatures;
    getFeatures(): TFeatures;
    getCurrentEntitlements(): TEntitlement[];
    getManagementJwt(): string;
    getConsumerId(): string | undefined;
    isRenewalDue(): boolean;
    private formatDuration;
    toString(): string;
    private triggerOnFeatureChangeCallback;
    private setTimerForNextEntitlementChange;
    private renewalCron;
    private initCert;
    private stringifyCertContainer;
    private parseLicenseCertContainerStr;
    private parseLicenseKeyStr;
    private validateLicenseKey;
    getIssuerCert(): X509Certificate;
    shutdown(): Promise<void>;
}

export declare function licenseManagerFactory(config?: {}): LicenseManager;

declare const enum LogLevel {
    ERROR = "error",
    WARN = "warn",
    INFO = "info",
    DEBUG = "debug"
}

export declare function makeEntitlement({ validFrom, validTo, features, featureOverrides, productId, isFloatable, }: {
    validFrom?: Date;
    validTo?: Date;
    features?: TFeatures;
    featureOverrides?: TFeatures;
    productId?: string;
    isFloatable?: boolean;
}): {
    id: string;
    productId: string;
    productMetadata: {
        metadataKey1: string;
    };
    features: TFeatures;
    featureOverrides: TFeatures;
    validFrom: Date;
    validTo: Date;
    isFloatable: boolean;
};

export declare function makeRelativeDate(offsetInMinutes: number): Date;

export declare function postRequest<T>(url: string, data: {}, options?: {
    timeoutInMs?: number;
}): Promise<{
    status: number;
    data: T;
}>;

export declare type TEntitlement = {
    id: string;
    productId: string;
    productMetadata: TMetadata;
    features: TFeatures;
    featureOverrides: TFeatures;
    validFrom: Date;
    validTo: Date;
    isFloatable: boolean;
};

export declare type TFeatures = {
    [key: string]: boolean | number | string;
};

export declare type TLicenseBlock = string;

export declare type TLicenseCertObj = {
    consumerId: string;
    version: number;
    tenantId: number;
    renewalToken: string;
    deviceLock: boolean;
    deviceFingerprint: string;
    createdAt: Date;
    issuedAt: Date;
    expiresAt: Date;
    terminatesAt: Date;
    entitlements: TEntitlement[];
    managementJwt: string;
    isEphemeral: boolean;
};

export declare type TLicenseContainer = {
    licenseKey: string;
    x509: string;
};

export declare type TLicenseManagerConfig = {
    server?: string;
    tenantId: number;
    productIdentifier: string;
    autoRenewEnabled?: boolean;
    offlineMode?: boolean;
    renewOnInit?: boolean;
    autoRenewOffset?: number;
    loadCertStr: () => Promise<TLicenseBlock>;
    saveCertStr: (cert: TLicenseBlock) => Promise<void>;
    collectUsageMetrics?: () => Promise<Array<TUsageMetric>>;
    collectPassthroughData?: () => Promise<TPassthroughData>;
    deviceFingerprint?: () => string | Promise<string>;
    onFeatureChange?: (features: TFeatures) => any;
    logger?: TLogger;
};

export declare type TLogger = {
    error: Function;
    warn: Function;
    info: Function;
    debug: Function;
};

export declare type TMetadata = {
    [key: string]: boolean | number | string | Array<any> | {};
};

export declare type TPassthroughData = Record<string, unknown>;

export declare type TUsageMetric = {
    name: string;
    value: number;
};

export { }
