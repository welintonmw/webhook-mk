"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.LazyPackageDirectoryLoader = exports.PackageDirectoryLoader = exports.CustomDirectoryLoader = exports.DirectoryLoader = void 0;
const fast_glob_1 = __importDefault(require("fast-glob"));
const promises_1 = require("fs/promises");
const n8n_workflow_1 = require("n8n-workflow");
const path = __importStar(require("path"));
const ClassLoader_1 = require("./ClassLoader");
const Constants_1 = require("./Constants");
function toJSON() {
    return {
        ...this,
        authenticate: typeof this.authenticate === 'function' ? {} : this.authenticate,
    };
}
class DirectoryLoader {
    constructor(directory, excludeNodes = [], includeNodes = []) {
        this.directory = directory;
        this.excludeNodes = excludeNodes;
        this.includeNodes = includeNodes;
        this.isLazyLoaded = false;
        this.loadedNodes = [];
        this.nodeTypes = {};
        this.credentialTypes = {};
        this.known = { nodes: {}, credentials: {} };
        this.types = { nodes: [], credentials: [] };
        this.nodesByCredential = {};
    }
    reset() {
        this.loadedNodes = [];
        this.nodeTypes = {};
        this.credentialTypes = {};
        this.known = { nodes: {}, credentials: {} };
        this.types = { nodes: [], credentials: [] };
    }
    resolvePath(file) {
        return path.resolve(this.directory, file);
    }
    loadNodeFromFile(nodeName, filePath) {
        let tempNode;
        let nodeVersion = 1;
        const isCustom = this.packageName === 'CUSTOM';
        try {
            tempNode = (0, ClassLoader_1.loadClassInIsolation)(filePath, nodeName);
            this.addCodex({ node: tempNode, filePath, isCustom });
        }
        catch (error) {
            n8n_workflow_1.LoggerProxy.error(`Error loading node "${nodeName}" from: "${filePath}" - ${error.message}`);
            throw error;
        }
        const fullNodeName = `${this.packageName}.${tempNode.description.name}`;
        if (this.includeNodes.length && !this.includeNodes.includes(fullNodeName)) {
            return;
        }
        if (this.excludeNodes.includes(fullNodeName)) {
            return;
        }
        tempNode.description.name = fullNodeName;
        this.fixIconPaths(tempNode.description, filePath);
        if ('nodeVersions' in tempNode) {
            for (const versionNode of Object.values(tempNode.nodeVersions)) {
                this.fixIconPaths(versionNode.description, filePath);
            }
            for (const version of Object.values(tempNode.nodeVersions)) {
                this.addLoadOptionsMethods(version);
            }
            const currentVersionNode = tempNode.nodeVersions[tempNode.currentVersion];
            this.addCodex({ node: currentVersionNode, filePath, isCustom });
            nodeVersion = tempNode.currentVersion;
            if (currentVersionNode.hasOwnProperty('executeSingle')) {
                throw new n8n_workflow_1.ApplicationError('"executeSingle" has been removed. Please update the code of this node to use "execute" instead.', { extra: { nodeName: `${this.packageName}.${nodeName}` } });
            }
        }
        else {
            this.addLoadOptionsMethods(tempNode);
            nodeVersion = Array.isArray(tempNode.description.version)
                ? tempNode.description.version.slice(-1)[0]
                : tempNode.description.version;
        }
        this.known.nodes[fullNodeName] = {
            className: nodeName,
            sourcePath: filePath,
        };
        this.nodeTypes[fullNodeName] = {
            type: tempNode,
            sourcePath: filePath,
        };
        this.loadedNodes.push({
            name: fullNodeName,
            version: nodeVersion,
        });
        (0, n8n_workflow_1.getVersionedNodeTypeAll)(tempNode).forEach(({ description }) => {
            this.types.nodes.push(description);
        });
        for (const credential of (0, n8n_workflow_1.getCredentialsForNode)(tempNode)) {
            if (!this.nodesByCredential[credential.name]) {
                this.nodesByCredential[credential.name] = [];
            }
            this.nodesByCredential[credential.name].push(fullNodeName);
        }
    }
    loadCredentialFromFile(credentialClassName, filePath) {
        let tempCredential;
        try {
            tempCredential = (0, ClassLoader_1.loadClassInIsolation)(filePath, credentialClassName);
            Object.assign(tempCredential, { toJSON });
            this.fixIconPaths(tempCredential, filePath);
        }
        catch (e) {
            if (e instanceof TypeError) {
                throw new n8n_workflow_1.ApplicationError('Class could not be found. Please check if the class is named correctly.', { extra: { credentialClassName } });
            }
            else {
                throw e;
            }
        }
        this.known.credentials[tempCredential.name] = {
            className: credentialClassName,
            sourcePath: filePath,
            extends: tempCredential.extends,
            supportedNodes: this.nodesByCredential[tempCredential.name],
        };
        this.credentialTypes[tempCredential.name] = {
            type: tempCredential,
            sourcePath: filePath,
        };
        this.types.credentials.push(tempCredential);
    }
    getCodex(filePath) {
        const codexFilePath = `${filePath}on`;
        const { categories, subcategories, resources: allResources, alias, } = module.require(codexFilePath);
        const resources = {
            primaryDocumentation: allResources.primaryDocumentation,
            credentialDocumentation: allResources.credentialDocumentation,
        };
        return {
            ...(categories && { categories }),
            ...(subcategories && { subcategories }),
            ...(resources && { resources }),
            ...(alias && { alias }),
        };
    }
    addCodex({ node, filePath, isCustom, }) {
        var _a;
        try {
            let codex;
            if (!isCustom) {
                codex = node.description.codex;
            }
            if (codex === undefined) {
                codex = this.getCodex(filePath);
            }
            if (isCustom) {
                codex.categories = codex.categories
                    ? codex.categories.concat(Constants_1.CUSTOM_NODES_CATEGORY)
                    : [Constants_1.CUSTOM_NODES_CATEGORY];
            }
            node.description.codex = codex;
        }
        catch {
            n8n_workflow_1.LoggerProxy.debug(`No codex available for: ${(_a = filePath.split('/').pop()) !== null && _a !== void 0 ? _a : ''}`);
            if (isCustom) {
                node.description.codex = {
                    categories: [Constants_1.CUSTOM_NODES_CATEGORY],
                };
            }
        }
    }
    addLoadOptionsMethods(node) {
        var _a;
        if ((_a = node === null || node === void 0 ? void 0 : node.methods) === null || _a === void 0 ? void 0 : _a.loadOptions) {
            node.description.__loadOptionsMethods = Object.keys(node.methods.loadOptions);
        }
    }
    getIconPath(icon, filePath) {
        const iconPath = path.join(path.dirname(filePath), icon.replace('file:', ''));
        const relativePath = path.relative(this.directory, iconPath);
        return `icons/${this.packageName}/${relativePath}`;
    }
    fixIconPaths(obj, filePath) {
        const { icon } = obj;
        if (!icon)
            return;
        if (typeof icon === 'string') {
            if (icon.startsWith('file:')) {
                obj.iconUrl = this.getIconPath(icon, filePath);
                delete obj.icon;
            }
        }
        else if (icon.light.startsWith('file:') && icon.dark.startsWith('file:')) {
            obj.iconUrl = {
                light: this.getIconPath(icon.light, filePath),
                dark: this.getIconPath(icon.dark, filePath),
            };
            delete obj.icon;
        }
    }
}
exports.DirectoryLoader = DirectoryLoader;
class CustomDirectoryLoader extends DirectoryLoader {
    constructor() {
        super(...arguments);
        this.packageName = 'CUSTOM';
    }
    async loadAll() {
        const nodes = await (0, fast_glob_1.default)('**/*.node.js', {
            cwd: this.directory,
            absolute: true,
        });
        for (const nodePath of nodes) {
            const [fileName] = path.parse(nodePath).name.split('.');
            this.loadNodeFromFile(fileName, nodePath);
        }
        const credentials = await (0, fast_glob_1.default)('**/*.credentials.js', {
            cwd: this.directory,
            absolute: true,
        });
        for (const credentialPath of credentials) {
            const [fileName] = path.parse(credentialPath).name.split('.');
            this.loadCredentialFromFile(fileName, credentialPath);
        }
    }
}
exports.CustomDirectoryLoader = CustomDirectoryLoader;
class PackageDirectoryLoader extends DirectoryLoader {
    constructor() {
        super(...arguments);
        this.packageName = '';
    }
    async readPackageJson() {
        this.packageJson = await this.readJSON('package.json');
        this.packageName = this.packageJson.name;
    }
    async loadAll() {
        var _a, _b;
        await this.readPackageJson();
        const { n8n } = this.packageJson;
        if (!n8n)
            return;
        const { nodes, credentials } = n8n;
        if (Array.isArray(nodes)) {
            for (const node of nodes) {
                const filePath = this.resolvePath(node);
                const [nodeName] = path.parse(node).name.split('.');
                this.loadNodeFromFile(nodeName, filePath);
            }
        }
        if (Array.isArray(credentials)) {
            for (const credential of credentials) {
                const filePath = this.resolvePath(credential);
                const [credentialName] = path.parse(credential).name.split('.');
                this.loadCredentialFromFile(credentialName, filePath);
            }
        }
        n8n_workflow_1.LoggerProxy.debug(`Loaded all credentials and nodes from ${this.packageName}`, {
            credentials: (_a = credentials === null || credentials === void 0 ? void 0 : credentials.length) !== null && _a !== void 0 ? _a : 0,
            nodes: (_b = nodes === null || nodes === void 0 ? void 0 : nodes.length) !== null && _b !== void 0 ? _b : 0,
        });
    }
    async readJSON(file) {
        const filePath = this.resolvePath(file);
        const fileString = await (0, promises_1.readFile)(filePath, 'utf8');
        try {
            return (0, n8n_workflow_1.jsonParse)(fileString);
        }
        catch (error) {
            throw new n8n_workflow_1.ApplicationError('Failed to parse JSON', { extra: { filePath } });
        }
    }
}
exports.PackageDirectoryLoader = PackageDirectoryLoader;
class LazyPackageDirectoryLoader extends PackageDirectoryLoader {
    async loadAll() {
        var _a, _b, _c, _d;
        await this.readPackageJson();
        try {
            const knownNodes = await this.readJSON('dist/known/nodes.json');
            for (const nodeName in knownNodes) {
                this.known.nodes[`${this.packageName}.${nodeName}`] = knownNodes[nodeName];
            }
            this.known.credentials = await this.readJSON('dist/known/credentials.json');
            this.types.nodes = await this.readJSON('dist/types/nodes.json');
            this.types.credentials = await this.readJSON('dist/types/credentials.json');
            if (this.includeNodes.length) {
                const allowedNodes = {};
                for (const nodeName of this.includeNodes) {
                    if (nodeName in this.known.nodes) {
                        allowedNodes[nodeName] = this.known.nodes[nodeName];
                    }
                }
                this.known.nodes = allowedNodes;
                this.types.nodes = this.types.nodes.filter((nodeType) => this.includeNodes.includes(nodeType.name));
            }
            if (this.excludeNodes.length) {
                for (const nodeName of this.excludeNodes) {
                    delete this.known.nodes[nodeName];
                }
                this.types.nodes = this.types.nodes.filter((nodeType) => !this.excludeNodes.includes(nodeType.name));
            }
            n8n_workflow_1.LoggerProxy.debug(`Lazy Loading credentials and nodes from ${this.packageJson.name}`, {
                credentials: (_b = (_a = this.types.credentials) === null || _a === void 0 ? void 0 : _a.length) !== null && _b !== void 0 ? _b : 0,
                nodes: (_d = (_c = this.types.nodes) === null || _c === void 0 ? void 0 : _c.length) !== null && _d !== void 0 ? _d : 0,
            });
            this.isLazyLoaded = true;
            return;
        }
        catch {
            n8n_workflow_1.LoggerProxy.debug("Can't enable lazy-loading");
            await super.loadAll();
        }
    }
}
exports.LazyPackageDirectoryLoader = LazyPackageDirectoryLoader;
//# sourceMappingURL=DirectoryLoader.js.map