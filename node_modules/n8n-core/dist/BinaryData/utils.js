"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.toBuffer = exports.doesNotExist = exports.assertDir = exports.isStoredMode = exports.areConfigModes = exports.CONFIG_MODES = void 0;
const promises_1 = __importDefault(require("node:fs/promises"));
const concat_stream_1 = __importDefault(require("concat-stream"));
exports.CONFIG_MODES = ['default', 'filesystem', 's3'];
const STORED_MODES = ['filesystem', 'filesystem-v2', 's3'];
function areConfigModes(modes) {
    return modes.every((m) => exports.CONFIG_MODES.includes(m));
}
exports.areConfigModes = areConfigModes;
function isStoredMode(mode) {
    return STORED_MODES.includes(mode);
}
exports.isStoredMode = isStoredMode;
async function assertDir(dir) {
    try {
        await promises_1.default.access(dir);
    }
    catch {
        await promises_1.default.mkdir(dir, { recursive: true });
    }
}
exports.assertDir = assertDir;
async function doesNotExist(dir) {
    try {
        await promises_1.default.access(dir);
        return false;
    }
    catch {
        return true;
    }
}
exports.doesNotExist = doesNotExist;
async function toBuffer(body) {
    if (Buffer.isBuffer(body))
        return body;
    return await new Promise((resolve, reject) => {
        body
            .once('error', (cause) => {
            if ('code' in cause && cause.code === 'Z_DATA_ERROR')
                reject(new Error('Failed to decompress response', { cause }));
            else
                reject(cause);
        })
            .pipe((0, concat_stream_1.default)(resolve));
    });
}
exports.toBuffer = toBuffer;
//# sourceMappingURL=utils.js.map