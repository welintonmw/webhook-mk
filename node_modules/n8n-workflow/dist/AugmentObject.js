"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.augmentObject = exports.augmentArray = void 0;
const defaultPropertyDescriptor = Object.freeze({ enumerable: true, configurable: true });
const augmentedObjects = new WeakSet();
function augment(value) {
    if (typeof value !== 'object' || value === null || value instanceof RegExp)
        return value;
    if (value instanceof Date)
        return new Date(value.valueOf());
    if (value instanceof Uint8Array)
        return value.slice();
    if (Array.isArray(value))
        return augmentArray(value);
    return augmentObject(value);
}
function augmentArray(data) {
    if (augmentedObjects.has(data))
        return data;
    let newData = undefined;
    function getData() {
        if (newData === undefined) {
            newData = [...data];
        }
        return newData;
    }
    const proxy = new Proxy(data, {
        deleteProperty(_target, key) {
            return Reflect.deleteProperty(getData(), key);
        },
        get(target, key, receiver) {
            const value = Reflect.get(newData !== null && newData !== void 0 ? newData : target, key, receiver);
            const newValue = augment(value);
            if (newValue !== value) {
                newData = getData();
                Reflect.set(newData, key, newValue);
                return newValue;
            }
            return value;
        },
        getOwnPropertyDescriptor(target, key) {
            var _a;
            if (newData === undefined) {
                return Reflect.getOwnPropertyDescriptor(target, key);
            }
            if (key === 'length') {
                return Reflect.getOwnPropertyDescriptor(newData, key);
            }
            return (_a = Object.getOwnPropertyDescriptor(data, key)) !== null && _a !== void 0 ? _a : defaultPropertyDescriptor;
        },
        has(target, key) {
            return Reflect.has(newData !== null && newData !== void 0 ? newData : target, key);
        },
        ownKeys(target) {
            return Reflect.ownKeys(newData !== null && newData !== void 0 ? newData : target);
        },
        set(_target, key, newValue) {
            return Reflect.set(getData(), key, augment(newValue));
        },
    });
    augmentedObjects.add(proxy);
    return proxy;
}
exports.augmentArray = augmentArray;
function augmentObject(data) {
    if (augmentedObjects.has(data))
        return data;
    const newData = {};
    const deletedProperties = new Set();
    const proxy = new Proxy(data, {
        get(target, key, receiver) {
            if (deletedProperties.has(key)) {
                return undefined;
            }
            if (newData[key] !== undefined) {
                return newData[key];
            }
            const value = Reflect.get(target, key, receiver);
            if (typeof value !== 'object' || value === null)
                return value;
            if (value instanceof RegExp)
                return value.toString();
            if ('toJSON' in value && typeof value.toJSON === 'function')
                return value.toJSON();
            const newValue = augment(value);
            if (newValue !== value) {
                Object.assign(newData, { [key]: newValue });
                return newValue;
            }
            return value;
        },
        deleteProperty(target, key) {
            if (key in newData) {
                delete newData[key];
            }
            if (key in target) {
                deletedProperties.add(key);
            }
            return true;
        },
        set(target, key, newValue) {
            if (newValue === undefined) {
                if (key in newData) {
                    delete newData[key];
                }
                if (key in target) {
                    deletedProperties.add(key);
                }
                return true;
            }
            newData[key] = newValue;
            if (deletedProperties.has(key)) {
                deletedProperties.delete(key);
            }
            return true;
        },
        has(target, key) {
            if (deletedProperties.has(key))
                return false;
            return Reflect.has(newData, key) || Reflect.has(target, key);
        },
        ownKeys(target) {
            const originalKeys = Reflect.ownKeys(target);
            const newKeys = Object.keys(newData);
            return [...new Set([...originalKeys, ...newKeys])].filter((key) => !deletedProperties.has(key));
        },
        getOwnPropertyDescriptor(_target, key) {
            if (deletedProperties.has(key))
                return undefined;
            return Object.getOwnPropertyDescriptor(key in newData ? newData : data, key);
        },
    });
    augmentedObjects.add(proxy);
    return proxy;
}
exports.augmentObject = augmentObject;
//# sourceMappingURL=AugmentObject.js.map