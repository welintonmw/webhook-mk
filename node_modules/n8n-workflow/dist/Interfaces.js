"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.eventNamesAiNodes = exports.nodeConnectionTypes = exports.NodeConnectionType = exports.Node = exports.NodeExecutionOutput = exports.ICredentialsHelper = exports.ICredentials = void 0;
class ICredentials {
    constructor(nodeCredentials, type, data) {
        var _a;
        this.id = (_a = nodeCredentials.id) !== null && _a !== void 0 ? _a : undefined;
        this.name = nodeCredentials.name;
        this.type = type;
        this.data = data;
    }
}
exports.ICredentials = ICredentials;
class ICredentialsHelper {
}
exports.ICredentialsHelper = ICredentialsHelper;
class NodeExecutionOutput extends Array {
    constructor(data, hints = []) {
        super();
        this.push(...data);
        this.hints = hints;
    }
    getHints() {
        return this.hints;
    }
}
exports.NodeExecutionOutput = NodeExecutionOutput;
class Node {
}
exports.Node = Node;
var NodeConnectionType;
(function (NodeConnectionType) {
    NodeConnectionType["AiAgent"] = "ai_agent";
    NodeConnectionType["AiChain"] = "ai_chain";
    NodeConnectionType["AiDocument"] = "ai_document";
    NodeConnectionType["AiEmbedding"] = "ai_embedding";
    NodeConnectionType["AiLanguageModel"] = "ai_languageModel";
    NodeConnectionType["AiMemory"] = "ai_memory";
    NodeConnectionType["AiOutputParser"] = "ai_outputParser";
    NodeConnectionType["AiRetriever"] = "ai_retriever";
    NodeConnectionType["AiTextSplitter"] = "ai_textSplitter";
    NodeConnectionType["AiTool"] = "ai_tool";
    NodeConnectionType["AiVectorStore"] = "ai_vectorStore";
    NodeConnectionType["Main"] = "main";
})(NodeConnectionType || (exports.NodeConnectionType = NodeConnectionType = {}));
exports.nodeConnectionTypes = [
    "ai_agent",
    "ai_chain",
    "ai_document",
    "ai_embedding",
    "ai_languageModel",
    "ai_memory",
    "ai_outputParser",
    "ai_retriever",
    "ai_textSplitter",
    "ai_tool",
    "ai_vectorStore",
    "main",
];
exports.eventNamesAiNodes = [
    'n8n.ai.memory.get.messages',
    'n8n.ai.memory.added.message',
    'n8n.ai.output.parser.get.instructions',
    'n8n.ai.output.parser.parsed',
    'n8n.ai.retriever.get.relevant.documents',
    'n8n.ai.embeddings.embedded.document',
    'n8n.ai.embeddings.embedded.query',
    'n8n.ai.document.processed',
    'n8n.ai.text.splitter.split',
    'n8n.ai.tool.called',
    'n8n.ai.vector.store.searched',
    'n8n.ai.llm.generated',
    'n8n.ai.llm.error',
    'n8n.ai.vector.store.populated',
];
//# sourceMappingURL=Interfaces.js.map