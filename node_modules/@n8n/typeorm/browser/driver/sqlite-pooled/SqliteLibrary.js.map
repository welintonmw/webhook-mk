{"version":3,"sources":["../browser/src/driver/sqlite-pooled/SqliteLibrary.ts"],"names":[],"mappings":"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","file":"SqliteLibrary.js","sourcesContent":["import { mkdirp } from \"mkdirp\"\nimport path from \"path\"\nimport type { sqlite3, Database as Sqlite3Database } from \"sqlite3\"\nimport { DriverPackageNotInstalledError } from \"../../error/DriverPackageNotInstalledError\"\nimport { PlatformTools } from \"../../platform/PlatformTools\"\nimport { QueryResult } from \"../../query-runner/QueryResult\"\nimport { QueryFailedError } from \"../../error/QueryFailedError\"\nimport { SqlitePooledConnectionOptions } from \"./SqlitePooledConnectionOptions\"\n\nexport type DatabasesMap = Map<\n    string,\n    {\n        attachFilepathAbsolute: string\n        attachFilepathRelative: string\n        attachHandle: string\n    }\n>\n\n/**\n * An adapter to the underlying SQLite library.\n */\nexport class SqliteLibrary {\n    /**\n     * SQLite underlying library.\n     */\n    public sqlite: sqlite3\n\n    /**\n     * Any attached databases (excepting default 'main')\n     */\n    public attachedDatabases: DatabasesMap = new Map()\n\n    constructor(private readonly options: SqlitePooledConnectionOptions) {}\n\n    /**\n     * If driver dependency is not given explicitly, then try to load it via \"require\".\n     */\n    public loadLibrary(): void {\n        try {\n            const sqlite = this.options.driver || PlatformTools.load(\"sqlite3\")\n            this.sqlite = sqlite.verbose()\n        } catch (e) {\n            throw new DriverPackageNotInstalledError(\"SQLite\", \"sqlite3\")\n        }\n    }\n\n    /**\n     * Creates connection with the database.\n     *\n     * @param {number} flags Flags, such as SQLITE_OPEN_READONLY, to pass to the sqlite3 database connection\n     */\n    public async createDatabaseConnection(\n        flags?: number,\n    ): Promise<Sqlite3Database> {\n        if (\n            this.options.flags === undefined ||\n            !(this.options.flags & this.sqlite.OPEN_URI)\n        ) {\n            await this.createDatabaseDirectory(this.options.database)\n        }\n\n        const databaseConnection: Sqlite3Database = await new Promise(\n            (ok, fail) => {\n                if (this.options.flags === undefined && flags === undefined) {\n                    const connection = new this.sqlite.Database(\n                        this.options.database,\n                        (err: any) => {\n                            if (err) return fail(err)\n                            ok(connection)\n                        },\n                    )\n                } else {\n                    const connectionFlags =\n                        (this.options.flags ?? 0) | (flags ?? 0)\n                    const connection = new this.sqlite.Database(\n                        this.options.database,\n                        connectionFlags,\n                        (err: any) => {\n                            if (err) return fail(err)\n                            ok(connection)\n                        },\n                    )\n                }\n            },\n        )\n\n        // Internal function to run a command on the connection and fail if an error occured.\n        function run(line: string): Promise<void> {\n            return new Promise((ok, fail) => {\n                databaseConnection.run(line, (err: any) => {\n                    if (err) return fail(err)\n                    ok()\n                })\n            })\n        }\n        // in the options, if encryption key for SQLCipher is setted.\n        // Must invoke key pragma before trying to do any other interaction with the database.\n        if (this.options.key) {\n            await run(`PRAGMA key = ${JSON.stringify(this.options.key)}`)\n        }\n\n        if (this.options.enableWAL) {\n            await run(`PRAGMA journal_mode = WAL`)\n        }\n\n        if (\n            this.options.busyTimeout &&\n            typeof this.options.busyTimeout === \"number\" &&\n            this.options.busyTimeout > 0\n        ) {\n            await run(`PRAGMA busy_timeout = ${this.options.busyTimeout}`)\n        }\n\n        // we need to enable foreign keys in sqlite to make sure all foreign key related features\n        // working properly. this also makes onDelete to work with sqlite.\n        await run(`PRAGMA foreign_keys = ON`)\n\n        await this.attachDatabases(databaseConnection)\n\n        return databaseConnection\n    }\n\n    public async destroyDatabaseConnection(\n        dbConnection: Sqlite3Database,\n    ): Promise<void> {\n        return new Promise((resolve, reject) => {\n            dbConnection.close((err: unknown) =>\n                err ? reject(err) : resolve(),\n            )\n        })\n    }\n\n    public async runQuery(\n        databaseConnection: Sqlite3Database,\n        query: string,\n        parameters?: any[],\n        useStructuredResult = false,\n    ): Promise<QueryResult | any> {\n        return await new Promise((resolve, reject) => {\n            try {\n                const isInsertQuery = query.startsWith(\"INSERT \")\n                const isDeleteQuery = query.startsWith(\"DELETE \")\n                const isUpdateQuery = query.startsWith(\"UPDATE \")\n\n                const handler = function (this: any, err: any, rows: any) {\n                    if (err) {\n                        return reject(\n                            new QueryFailedError(query, parameters, err),\n                        )\n                    } else {\n                        const result = new QueryResult()\n\n                        if (isInsertQuery) {\n                            result.raw = this[\"lastID\"]\n                        } else {\n                            result.raw = rows\n                        }\n\n                        if (Array.isArray(rows)) {\n                            result.records = rows\n                        }\n\n                        result.affected = this[\"changes\"]\n\n                        if (useStructuredResult) {\n                            resolve(result)\n                        } else {\n                            resolve(result.raw)\n                        }\n                    }\n                }\n\n                if (isInsertQuery || isDeleteQuery || isUpdateQuery) {\n                    databaseConnection.run(query, parameters, handler)\n                } else {\n                    databaseConnection.all(query, parameters, handler)\n                }\n            } catch (err) {\n                reject(err)\n            }\n        })\n    }\n\n    /**\n     * Performs the attaching of the database files. The attachedDatabase should have been populated during calls to #buildTableName\n     * during EntityMetadata production (see EntityMetadata#buildTablePath)\n     *\n     * https://sqlite.org/lang_attach.html\n     */\n    public async attachDatabases(connection: Sqlite3Database) {\n        // @todo - possibly check number of databases (but unqueriable at runtime sadly) - https://www.sqlite.org/limits.html#max_attached\n        for (const {\n            attachHandle,\n            attachFilepathAbsolute,\n        } of this.attachedDatabases.values()) {\n            await this.createDatabaseDirectory(attachFilepathAbsolute)\n            await this.runQuery(\n                connection,\n                `ATTACH \"${attachFilepathAbsolute}\" AS \"${attachHandle}\"`,\n            )\n        }\n    }\n\n    /**\n     * Auto creates database directory if it does not exist.\n     */\n    private async createDatabaseDirectory(fullPath: string): Promise<void> {\n        await mkdirp(path.dirname(fullPath))\n    }\n}\n"],"sourceRoot":"../.."}