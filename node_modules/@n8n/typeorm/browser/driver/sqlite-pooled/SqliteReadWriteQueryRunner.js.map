{"version":3,"sources":["../browser/src/driver/sqlite-pooled/SqliteReadWriteQueryRunner.ts"],"names":[],"mappings":"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","file":"SqliteReadWriteQueryRunner.js","sourcesContent":["import { captureException } from \"@sentry/node\"\nimport type { Database as Sqlite3Database } from \"sqlite3\"\nimport {\n    ConnectionIsNotSetError,\n    TransactionAlreadyStartedError,\n    TransactionNotStartedError,\n} from \"../../error\"\nimport { QueryRunner } from \"../../query-runner/QueryRunner\"\nimport { Broadcaster } from \"../../subscriber/Broadcaster\"\nimport {\n    DbLease,\n    DbLeaseHolder,\n    SqliteConnectionPool,\n} from \"./SqlitePooledTypes\"\nimport { DataSource } from \"../../data-source/DataSource\"\nimport { SqlitePooledConnectionOptions } from \"./SqlitePooledConnectionOptions\"\nimport { AbstractSqliteQueryRunner } from \"../sqlite-abstract/AbstractSqliteQueryRunner\"\nimport { SqliteLibrary } from \"./SqliteLibrary\"\nimport { QueryResult } from \"../../query-runner/QueryResult\"\nimport { BroadcasterResult } from \"../../subscriber/BroadcasterResult\"\nimport { TransactionCommitFailedError } from \"../../error/TransactionCommitFailedError\"\nimport { TransactionRollbackFailedError } from \"../../error/TransactionRollbackFailedError\"\nimport { AbstractSqliteDriver } from \"../sqlite-abstract/AbstractSqliteDriver\"\n\nexport class SqliteReadWriteQueryRunner\n    extends AbstractSqliteQueryRunner\n    implements QueryRunner, DbLeaseHolder\n{\n    //#region Properties\n\n    private trxDbLease: DbLease | undefined\n\n    //#endregion Properties\n\n    private get logger() {\n        return this.connection.logger\n    }\n\n    constructor(\n        driver: AbstractSqliteDriver,\n        connection: DataSource,\n        private readonly sqliteLibrary: SqliteLibrary,\n        private readonly writePool: SqliteConnectionPool,\n        private readonly readPool: SqliteConnectionPool,\n        private readonly options: SqlitePooledConnectionOptions,\n    ) {\n        super()\n\n        this.driver = driver\n        this.connection = connection\n        this.broadcaster = new Broadcaster(this)\n    }\n\n    /**\n     * Called before migrations are run.\n     */\n    async beforeMigration(): Promise<void> {\n        await this.query(`PRAGMA foreign_keys = OFF`)\n    }\n\n    /**\n     * Called after migrations are run.\n     */\n    async afterMigration(): Promise<void> {\n        await this.query(`PRAGMA foreign_keys = ON`)\n    }\n\n    connect() {\n        // We do nothing here, as we acquire connections on demand\n        return Promise.resolve()\n    }\n\n    requestRelease() {\n        this.releaseTrxDbLease()\n    }\n\n    async release() {\n        if (this.isReleased) {\n            return\n        }\n\n        // If transaction is active, abort it\n        this.releaseTrxDbLease()\n\n        this.isReleased = true\n    }\n\n    /**\n     * Starts transaction.\n     */\n    async startTransaction(): Promise<void> {\n        if (this.isTransactionActive) {\n            throw new TransactionAlreadyStartedError()\n        }\n\n        try {\n            await this.broadcaster.broadcast(\"BeforeTransactionStart\")\n\n            this.trxDbLease = await this.writePool.leaseConnection(this)\n\n            await this.runQueryWithinConnection(\n                this.trxDbLease.connection,\n                \"BEGIN IMMEDIATE TRANSACTION\",\n            )\n\n            await this.broadcaster.broadcast(\"AfterTransactionStart\")\n        } catch (error) {\n            this.releaseTrxDbLease()\n\n            throw error\n        }\n\n        this.isTransactionActive = true\n    }\n\n    /**\n     * Commits transaction.\n     * Error will be thrown if transaction was not started.\n     */\n    async commitTransaction(): Promise<void> {\n        if (!this.isTransactionActive) throw new TransactionNotStartedError()\n        if (!this.trxDbLease) throw new TransactionNotStartedError()\n\n        try {\n            await this.broadcaster.broadcast(\"BeforeTransactionCommit\")\n\n            await this.runQueryWithinConnection(\n                this.trxDbLease.connection,\n                \"COMMIT\",\n            )\n\n            await this.broadcaster.broadcast(\"AfterTransactionCommit\")\n        } catch (commitError) {\n            this.trxDbLease.markAsInvalid()\n            captureException(new TransactionCommitFailedError(commitError))\n            throw commitError\n        } finally {\n            this.releaseTrxDbLease()\n        }\n    }\n\n    /**\n     * Rollbacks transaction.\n     * Error will be thrown if transaction was not started.\n     */\n    async rollbackTransaction(): Promise<void> {\n        if (!this.isTransactionActive) throw new TransactionNotStartedError()\n        if (!this.trxDbLease) throw new TransactionNotStartedError()\n\n        try {\n            await this.broadcaster.broadcast(\"BeforeTransactionRollback\")\n\n            await this.runQueryWithinConnection(\n                this.trxDbLease.connection,\n                \"ROLLBACK\",\n            )\n\n            await this.broadcaster.broadcast(\"AfterTransactionRollback\")\n        } catch (rollbackError) {\n            this.trxDbLease.markAsInvalid()\n            captureException(new TransactionRollbackFailedError(rollbackError))\n            throw rollbackError\n        } finally {\n            this.releaseTrxDbLease()\n        }\n    }\n\n    /**\n     * Executes a given SQL query.\n     */\n    async query(\n        query: string,\n        parameters?: unknown[],\n        useStructuredResult = false,\n    ): Promise<any> {\n        if (!this.connection.isInitialized) {\n            throw new ConnectionIsNotSetError(\"sqlite\")\n        }\n\n        if (this.trxDbLease) {\n            return await this.runQueryWithinConnection(\n                this.trxDbLease.connection,\n                query,\n                parameters,\n                useStructuredResult,\n            )\n        }\n\n        const isSelectQuery = this.isReadQuery(query)\n\n        const connectionPool = isSelectQuery ? this.readPool : this.writePool\n        return connectionPool.runExclusive(\n            this,\n            async (leasedDbConnection) =>\n                await this.runQueryWithinConnection(\n                    leasedDbConnection.connection,\n                    query,\n                    parameters,\n                    useStructuredResult,\n                ),\n        )\n    }\n\n    public async runQueryWithinConnection(\n        connection: Sqlite3Database,\n        query: string,\n        parameters?: unknown[],\n        useStructuredResult = false,\n    ): Promise<QueryResult | any> {\n        const broadcasterResult = new BroadcasterResult()\n        const broadcaster = this.broadcaster\n\n        broadcaster.broadcastBeforeQueryEvent(\n            broadcasterResult,\n            query,\n            parameters,\n        )\n\n        const maxQueryExecutionTime = this.options.maxQueryExecutionTime\n\n        try {\n            this.logger.logQuery(query, parameters)\n            const queryStartTime = +new Date()\n\n            const result = await this.sqliteLibrary.runQuery(\n                connection,\n                query,\n                parameters,\n                useStructuredResult,\n            )\n\n            // log slow queries if maxQueryExecution time is set\n            const queryEndTime = +new Date()\n            const queryExecutionTime = queryEndTime - queryStartTime\n            if (\n                maxQueryExecutionTime &&\n                queryExecutionTime > maxQueryExecutionTime\n            )\n                this.logger.logQuerySlow(queryExecutionTime, query, parameters)\n\n            broadcaster.broadcastAfterQueryEvent(\n                broadcasterResult,\n                query,\n                parameters,\n                true,\n                queryExecutionTime,\n                useStructuredResult ? result.raw : result,\n                undefined,\n            )\n\n            return result\n        } catch (err) {\n            this.logger.logQueryError(err, query, parameters)\n            broadcaster.broadcastAfterQueryEvent(\n                broadcasterResult,\n                query,\n                parameters,\n                false,\n                undefined,\n                undefined,\n                err,\n            )\n            throw err\n        } finally {\n            await broadcasterResult.wait()\n        }\n    }\n\n    private isReadQuery(query: string) {\n        return /^\\s*SELECT/i.test(query)\n    }\n\n    private releaseTrxDbLease() {\n        if (this.trxDbLease) {\n            this.trxDbLease.release()\n            this.trxDbLease = undefined\n            this.isTransactionActive = false\n        }\n    }\n}\n"],"sourceRoot":"../.."}