{"version":3,"sources":["../browser/src/driver/sqlite-pooled/SqlitePooledTypes.ts"],"names":[],"mappings":"","file":"SqlitePooledTypes.js","sourcesContent":["import type { Database as Sqlite3Database } from \"sqlite3\"\n\n/**\n * Represents a pool of connections for SQLite databases.\n * The pool is responsible for managing the connections and\n * ensuring that connections are not leaked. Connections can\n * be leased from the pool for use and must be released back.\n */\nexport interface SqliteConnectionPool {\n    runExclusive<T>(\n        dbLeaseHolder: DbLeaseHolder,\n        callback: (leasedDbConnection: DbLease) => Promise<T>,\n    ): Promise<T>\n    leaseConnection(dbLeaseHolder: DbLeaseHolder): Promise<DbLease>\n    releaseConnection(leasedDbConnection: DbLease): void\n    invalidateConnection(leasedDbConnection: DbLease): void\n    close(): Promise<void>\n}\n\n/**\n * Represents a leased database connection. The connection is\n * leased from the owner to the lease holder, and must be\n * released back to the owner when no longer needed.\n */\nexport interface DbLease {\n    readonly connection: Sqlite3Database\n\n    /**\n     * Marks the connection as invalid. This will cause the\n     * connection to be released and a new connection to be\n     * created when the lease holder requests a new connection.\n     */\n    markAsInvalid(): void\n    /**\n     * Releases the connection back to the pool\n     */\n    release(): void\n    /**\n     * Signals that the lease holder should release the lease ASAP\n     */\n    requestRelease(): void\n}\n\nexport interface DbLeaseOwner {\n    invalidateConnection(leasedDbConnection: DbLease): void\n    releaseConnection(leasedDbConnection: DbLease): void\n}\n\nexport interface DbLeaseHolder {\n    /**\n     * Signals that the lease holder should release the lease ASAP\n     */\n    requestRelease(): void\n}\n"],"sourceRoot":"../.."}