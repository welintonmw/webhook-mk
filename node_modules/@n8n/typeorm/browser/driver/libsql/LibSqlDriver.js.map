{"version":3,"sources":["../browser/src/driver/libsql/LibSqlDriver.ts"],"names":[],"mappings":"AACA,OAAO,EAAE,oBAAoB,EAAE,MAAM,yCAAyC,CAAA;AAE9E,OAAO,EAAE,iBAAiB,EAAE,MAAM,qBAAqB,CAAA;AACvD,OAAO,EAAE,aAAa,EAAE,MAAM,8BAA8B,CAAA;AAI5D,OAAO,EAAE,8BAA8B,EAAE,MAAM,4CAA4C,CAAA;AAG3F,MAAM,OAAO,YAAa,SAAQ,oBAAoB;IAKlD,YAAY,UAAsB;QAC9B,KAAK,CAAC,UAAU,CAAC,CAAA;QACjB,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAA;QAErC,IAAI,CAAC;YACD,IAAI,CAAC,MAAM,GAAG,aAAa,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAA;QAC9C,CAAC;QAAC,OAAO,CAAC,EAAE,CAAC;YACT,MAAM,IAAI,8BAA8B,CAAC,QAAQ,EAAE,SAAS,CAAC,CAAA;QACjE,CAAC;IACL,CAAC;IAED;;OAEG;IACH,KAAK,CAAC,UAAU;QACZ,OAAO,IAAI,OAAO,CAAO,CAAC,EAAE,EAAE,IAAI,EAAE,EAAE;YAClC,IAAI,CAAC;gBACD,IAAI,CAAC,WAAW,GAAG,SAAS,CAAA;gBAC5B,IAAI,CAAC,kBAAkB,EAAE,KAAK,EAAE,CAAA;gBAChC,IAAI,CAAC,kBAAkB,GAAG,SAAS,CAAA;gBACnC,EAAE,EAAE,CAAA;YACR,CAAC;YAAC,OAAO,KAAK,EAAE,CAAC;gBACb,IAAI,CAAC,KAAK,CAAC,CAAA;YACf,CAAC;QACL,CAAC,CAAC,CAAA;IACN,CAAC;IAED;;OAEG;IACH,iBAAiB;QACb,IAAI,CAAC,IAAI,CAAC,WAAW;YAAE,IAAI,CAAC,WAAW,GAAG,IAAI,iBAAiB,CAAC,IAAI,CAAC,CAAA;QACrE,OAAO,IAAI,CAAC,WAAW,CAAA;IAC3B,CAAC;IAEQ,kBAAkB,CACvB,QAAwB,EACxB,YAAiB,EACjB,WAAmB,EACnB,SAAiB;QAEjB,IAAI,OAAO,YAAY,KAAK,QAAQ;YAChC,YAAY,GAAG,MAAM,CAAC,YAAY,CAAC,CAAA;QACvC,OAAO,KAAK,CAAC,kBAAkB,CAC3B,QAAQ,EACR,YAAY,EACZ,WAAW,EACX,SAAS,CACZ,CAAA;IACL,CAAC;IAED,aAAa,CAAC,MAKb;QACG,OAAQ,MAAM,CAAC,IAAY,KAAK,MAAM;YAClC,CAAC,CAAC,MAAM;YACR,CAAC,CAAC,KAAK,CAAC,aAAa,CAAC,MAAM,CAAC,CAAA;IACrC,CAAC;IAED,4EAA4E;IAC5E,oBAAoB;IACpB,4EAA4E;IAE5E;;OAEG;IACO,KAAK,CAAC,wBAAwB;QACpC,MAAM,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC,YAAY,CAAC;YACpC,GAAG,EAAE,QAAQ,IAAI,CAAC,QAAQ,EAAE;YAC5B,OAAO,EAAE,QAAQ;SACpB,CAAC,CAAA;QAEF,IAAI,IAAI,CAAC,OAAO,CAAC,SAAS,EAAE,CAAC;YACzB,MAAM,MAAM,CAAC,OAAO,CAAC,2BAA2B,CAAC,CAAA;QACrD,CAAC;QAED;;;UAGE;QACF,MAAM,MAAM,CAAC,OAAO,CAAC,0BAA0B,CAAC,CAAA;QAChD,OAAO,MAAM,CAAA;IACjB,CAAC;CACJ","file":"LibSqlDriver.js","sourcesContent":["import type { createClient } from \"@libsql/client\"\nimport { AbstractSqliteDriver } from \"../sqlite-abstract/AbstractSqliteDriver\"\nimport type { LibSqlConnectionOptions } from \"./LibSqlConnectionOptions\"\nimport { LibSqlQueryRunner } from \"./LibSqlQueryRunner\"\nimport { PlatformTools } from \"../../platform/PlatformTools\"\nimport type { QueryRunner } from \"../../query-runner/QueryRunner\"\nimport type { DataSource } from \"../../data-source/DataSource\"\nimport type { EntityMetadata } from \"../../metadata/EntityMetadata\"\nimport { DriverPackageNotInstalledError } from \"../../error/DriverPackageNotInstalledError\"\nimport type { ColumnType } from \"../types/ColumnTypes\"\n\nexport class LibSqlDriver extends AbstractSqliteDriver {\n    sqlite: { createClient: typeof createClient }\n\n    options: LibSqlConnectionOptions\n\n    constructor(connection: DataSource) {\n        super(connection)\n        this.database = this.options.database\n\n        try {\n            this.sqlite = PlatformTools.load(\"libsql\")\n        } catch (e) {\n            throw new DriverPackageNotInstalledError(\"SQLite\", \"sqlite3\")\n        }\n    }\n\n    /**\n     * Closes connection with database.\n     */\n    async disconnect(): Promise<void> {\n        return new Promise<void>((ok, fail) => {\n            try {\n                this.queryRunner = undefined\n                this.databaseConnection?.close()\n                this.databaseConnection = undefined\n                ok()\n            } catch (error) {\n                fail(error)\n            }\n        })\n    }\n\n    /**\n     * Creates a query runner used to execute database queries.\n     */\n    createQueryRunner(): QueryRunner {\n        if (!this.queryRunner) this.queryRunner = new LibSqlQueryRunner(this)\n        return this.queryRunner\n    }\n\n    override createGeneratedMap(\n        metadata: EntityMetadata,\n        insertResult: any,\n        entityIndex: number,\n        entityNum: number,\n    ) {\n        if (typeof insertResult === \"bigint\")\n            insertResult = Number(insertResult)\n        return super.createGeneratedMap(\n            metadata,\n            insertResult,\n            entityIndex,\n            entityNum,\n        )\n    }\n\n    normalizeType(column: {\n        type?: ColumnType\n        length?: number | string\n        precision?: number | null\n        scale?: number\n    }): string {\n        return (column.type as any) === Buffer\n            ? \"blob\"\n            : super.normalizeType(column)\n    }\n\n    // -------------------------------------------------------------------------\n    // Protected Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Creates connection with the database.\n     */\n    protected async createDatabaseConnection() {\n        const client = this.sqlite.createClient({\n            url: `file:${this.database}`,\n            intMode: \"number\",\n        })\n\n        if (this.options.enableWAL) {\n            await client.execute(\"PRAGMA journal_mode = WAL\")\n        }\n\n        /*\n        // we need to enable foreign keys in libsql to make sure all foreign key related features working properly.\n            this also makes onDelete work with libsql.\n        */\n        await client.execute(\"PRAGMA foreign_keys = ON\")\n        return client\n    }\n}\n"],"sourceRoot":"../.."}