{"version":3,"sources":["../../src/driver/sqlite-pooled/SqliteReadonlyConnectionPool.ts"],"names":[],"mappings":"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","file":"SqliteReadonlyConnectionPool.js","sourcesContent":["import assert from \"node:assert\"\nimport type { Database as Sqlite3Database } from \"sqlite3\"\nimport { Pool } from \"tarn\"\nimport type {\n    DbLease,\n    DbLeaseHolder,\n    SqliteConnectionPool,\n} from \"./SqlitePooledTypes\"\nimport { DriverAlreadyReleasedError } from \"../../error/DriverAlreadyReleasedError\"\nimport { LeasedDbConnection } from \"./LeasedDbConnection\"\nimport { SqliteLibrary } from \"./SqliteLibrary\"\n\nconst SQLITE_OPEN_READONLY = 1\n\n/**\n * Pool of read-only connections to the database.\n */\nexport class SqliteReadonlyConnectionPool implements SqliteConnectionPool {\n    private readonly pool: Pool<Sqlite3Database>\n\n    /**\n     * Connections that are marked as invalid and should be destroyed\n     */\n    private readonly invalidConnections = new WeakSet<Sqlite3Database>()\n\n    /** Currently leased connections */\n    private readonly dbLeases = new Set<DbLease>()\n\n    /** Has the pool been released */\n    private isReleased = false\n\n    constructor(\n        private readonly sqlite: SqliteLibrary,\n        private readonly options: {\n            poolSize: number\n            acquireTimeout: number\n            destroyTimeout: number\n        },\n    ) {\n        assert(this.options.poolSize > 0)\n        this.pool = this.createReadonlyPool()\n    }\n\n    public async connect() {\n        // Do nothing, connections are acquired on demand\n    }\n\n    public async close() {\n        for (const dbLease of this.dbLeases) {\n            dbLease.requestRelease()\n        }\n\n        await this.pool.destroy()\n    }\n\n    public async runExclusive<T>(\n        dbLeaseHolder: DbLeaseHolder,\n        callback: (leasedDbConnection: DbLease) => Promise<T>,\n    ): Promise<T> {\n        if (this.isReleased) {\n            throw new DriverAlreadyReleasedError()\n        }\n\n        const dbConnection = await this.pool.acquire().promise\n        const dbLease = new LeasedDbConnection(\n            dbConnection,\n            this,\n            dbLeaseHolder,\n        )\n\n        this.dbLeases.add(dbLease)\n\n        try {\n            return await callback(dbLease)\n        } finally {\n            this.releaseConnection(dbLease)\n        }\n    }\n\n    public async leaseConnection(\n        dbLeaseHolder: DbLeaseHolder,\n    ): Promise<LeasedDbConnection> {\n        if (this.isReleased) {\n            throw new DriverAlreadyReleasedError()\n        }\n\n        const dbConnection = await this.pool.acquire().promise\n\n        return new LeasedDbConnection(dbConnection, this, dbLeaseHolder)\n    }\n\n    public invalidateConnection(leasedDbConnection: DbLease) {\n        this.invalidConnections.add(leasedDbConnection.connection)\n    }\n\n    public releaseConnection(leasedDbConnection: DbLease) {\n        this.dbLeases.delete(leasedDbConnection)\n        this.pool.release(leasedDbConnection.connection)\n    }\n\n    private validateDatabaseConnection(dbConnection: Sqlite3Database) {\n        return !this.invalidConnections.has(dbConnection)\n    }\n\n    private createReadonlyPool(): Pool<Sqlite3Database> {\n        const pool = new Pool<Sqlite3Database>({\n            acquireTimeoutMillis: this.options.acquireTimeout,\n            destroyTimeoutMillis: this.options.destroyTimeout,\n            create: async () => {\n                return await this.sqlite.createDatabaseConnection(\n                    SQLITE_OPEN_READONLY,\n                )\n            },\n            validate: (dbConnection) => {\n                return this.validateDatabaseConnection(dbConnection)\n            },\n            destroy: async (dbConnection) => {\n                this.invalidConnections.delete(dbConnection)\n\n                return await this.sqlite.destroyDatabaseConnection(dbConnection)\n            },\n            min: 1,\n            max: this.options.poolSize,\n        })\n\n        return pool\n    }\n}\n"],"sourceRoot":"../.."}