{"version":3,"sources":["../../src/driver/DriverFactory.ts"],"names":[],"mappings":"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","file":"DriverFactory.js","sourcesContent":["import type { Driver, DriverConstructor } from \"./Driver\"\nimport type { DataSource } from \"../data-source/DataSource\"\nimport { MissingDriverError } from \"../error/MissingDriverError\"\n\nconst getDriver = async (\n    type: DataSource[\"options\"][\"type\"],\n): Promise<DriverConstructor> => {\n    switch (type) {\n        case \"mysql\":\n        case \"mariadb\":\n            return (await import(\"./mysql/MysqlDriver\")).MysqlDriver\n        case \"postgres\":\n            return (await import(\"./postgres/PostgresDriver\")).PostgresDriver\n        case \"cockroachdb\":\n            return (await import(\"./cockroachdb/CockroachDriver\"))\n                .CockroachDriver\n        case \"sap\":\n            return (await import(\"./sap/SapDriver\")).SapDriver\n        case \"sqlite\":\n            return (await import(\"./sqlite/SqliteDriver\")).SqliteDriver\n        case \"sqlite-pooled\":\n            return (await import(\"./sqlite-pooled/SqliteReadWriteDriver\"))\n                .SqliteReadWriteDriver\n        case \"better-sqlite3\":\n            return (await import(\"./better-sqlite3/BetterSqlite3Driver\"))\n                .BetterSqlite3Driver\n        case \"cordova\":\n            return (await import(\"./cordova/CordovaDriver\")).CordovaDriver\n        case \"nativescript\":\n            return (await import(\"./nativescript/NativescriptDriver\"))\n                .NativescriptDriver\n        case \"react-native\":\n            return (await import(\"./react-native/ReactNativeDriver\"))\n                .ReactNativeDriver\n        case \"sqljs\":\n            return (await import(\"./sqljs/SqljsDriver\")).SqljsDriver\n        case \"oracle\":\n            return (await import(\"./oracle/OracleDriver\")).OracleDriver\n        case \"mssql\":\n            return (await import(\"./sqlserver/SqlServerDriver\")).SqlServerDriver\n        case \"mongodb\":\n            return (await import(\"./mongodb/MongoDriver\")).MongoDriver\n        case \"expo\":\n            return (await import(\"./expo/ExpoDriver\")).ExpoDriver\n        case \"aurora-mysql\":\n            return (await import(\"./aurora-mysql/AuroraMysqlDriver\"))\n                .AuroraMysqlDriver\n        case \"aurora-postgres\":\n            return (await import(\"./aurora-postgres/AuroraPostgresDriver\"))\n                .AuroraPostgresDriver\n        case \"capacitor\":\n            return (await import(\"./capacitor/CapacitorDriver\")).CapacitorDriver\n        case \"spanner\":\n            return (await import(\"./spanner/SpannerDriver\")).SpannerDriver\n        case \"libsql\":\n            return (await import(\"./libsql/LibSqlDriver\")).LibSqlDriver\n        default:\n            throw new MissingDriverError(type, [\n                \"aurora-mysql\",\n                \"aurora-postgres\",\n                \"better-sqlite3\",\n                \"capacitor\",\n                \"cockroachdb\",\n                \"cordova\",\n                \"expo\",\n                \"mariadb\",\n                \"mongodb\",\n                \"mssql\",\n                \"mysql\",\n                \"nativescript\",\n                \"oracle\",\n                \"postgres\",\n                \"react-native\",\n                \"sap\",\n                \"sqlite\",\n                \"sqlite-pooled\",\n                \"sqljs\",\n                \"spanner\",\n                \"libsql\",\n            ])\n    }\n}\n\n/**\n * Helps to create drivers.\n */\nexport class DriverFactory {\n    /**\n     * Creates a new driver depend on a given connection's driver type.\n     */\n    static async create(connection: DataSource): Promise<Driver> {\n        const { type } = connection.options\n        return new (await getDriver(type))(connection)\n    }\n}\n"],"sourceRoot":".."}