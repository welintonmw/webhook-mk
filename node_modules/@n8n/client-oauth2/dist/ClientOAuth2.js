"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ClientOAuth2 = void 0;
const qs = __importStar(require("querystring"));
const https_1 = require("https");
const axios_1 = __importDefault(require("axios"));
const utils_1 = require("./utils");
const ClientOAuth2Token_1 = require("./ClientOAuth2Token");
const CodeFlow_1 = require("./CodeFlow");
const CredentialsFlow_1 = require("./CredentialsFlow");
class ResponseError extends Error {
    constructor(status, body, code = 'ESTATUS') {
        super(`HTTP status ${status}`);
        this.status = status;
        this.body = body;
        this.code = code;
    }
}
const sslIgnoringAgent = new https_1.Agent({ rejectUnauthorized: false });
class ClientOAuth2 {
    constructor(options) {
        this.options = options;
        this.code = new CodeFlow_1.CodeFlow(this);
        this.credentials = new CredentialsFlow_1.CredentialsFlow(this);
    }
    createToken(data, type) {
        return new ClientOAuth2Token_1.ClientOAuth2Token(this, {
            ...data,
            ...(typeof type === 'string' ? { token_type: type } : type),
        });
    }
    parseResponseBody(body) {
        try {
            return JSON.parse(body);
        }
        catch (e) {
            return qs.parse(body);
        }
    }
    async request(options) {
        let url = options.url;
        const query = qs.stringify(options.query);
        if (query) {
            url += (url.indexOf('?') === -1 ? '?' : '&') + query;
        }
        const requestConfig = {
            url,
            method: options.method,
            data: qs.stringify(options.body),
            headers: options.headers,
            transformResponse: (res) => res,
            validateStatus: (status) => status < 500,
        };
        if (options.ignoreSSLIssues) {
            requestConfig.httpsAgent = sslIgnoringAgent;
        }
        const response = await axios_1.default.request(requestConfig);
        const body = this.parseResponseBody(response.data);
        const authErr = (0, utils_1.getAuthError)(body);
        if (authErr)
            throw authErr;
        if (response.status < 200 || response.status >= 399)
            throw new ResponseError(response.status, response.data);
        return body;
    }
}
exports.ClientOAuth2 = ClientOAuth2;
//# sourceMappingURL=ClientOAuth2.js.map