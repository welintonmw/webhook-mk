import type { ConnectionTypes, IExecuteFunctions } from 'n8n-workflow';
import { Tool } from '@langchain/core/tools';
import { BaseChatMessageHistory } from '@langchain/core/chat_history';
import { Embeddings } from '@langchain/core/embeddings';
import { VectorStore } from '@langchain/core/vectorstores';
import type { Document } from '@langchain/core/documents';
import { TextSplitter } from '@langchain/textsplitters';
import { BaseChatMemory } from '@langchain/community/memory/chat_memory';
import { BaseRetriever } from '@langchain/core/retrievers';
import { BaseOutputParser } from '@langchain/core/output_parsers';
import type { BaseDocumentLoader } from 'langchain/dist/document_loaders/base';
import { N8nJsonLoader } from './N8nJsonLoader';
import { N8nBinaryLoader } from './N8nBinaryLoader';
export declare function callMethodAsync<T>(this: T, parameters: {
    executeFunctions: IExecuteFunctions;
    connectionType: ConnectionTypes;
    currentNodeRunIndex: number;
    method: (...args: any[]) => Promise<unknown>;
    arguments: unknown[];
}): Promise<unknown>;
export declare function callMethodSync<T>(this: T, parameters: {
    executeFunctions: IExecuteFunctions;
    connectionType: ConnectionTypes;
    currentNodeRunIndex: number;
    method: (...args: any[]) => T;
    arguments: unknown[];
}): unknown;
export declare function logWrapper(originalInstance: Tool | BaseChatMemory | BaseChatMessageHistory | BaseOutputParser | BaseRetriever | Embeddings | Document[] | Document | BaseDocumentLoader | TextSplitter | VectorStore | N8nBinaryLoader | N8nJsonLoader, executeFunctions: IExecuteFunctions): BaseOutputParser<unknown> | Tool | BaseChatMemory | BaseChatMessageHistory | BaseRetriever<Record<string, any>> | N8nJsonLoader | TextSplitter | Document<Record<string, any>> | Document<Record<string, any>>[] | BaseDocumentLoader | N8nBinaryLoader | Embeddings | VectorStore;
