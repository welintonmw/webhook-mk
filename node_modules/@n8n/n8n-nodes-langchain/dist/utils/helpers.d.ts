import type { EventNamesAiNodesType, IDataObject, IExecuteFunctions } from 'n8n-workflow';
import type { BaseChatModel } from '@langchain/core/language_models/chat_models';
import type { BaseOutputParser } from '@langchain/core/output_parsers';
import type { BaseMessage } from '@langchain/core/messages';
import { type Tool } from '@langchain/core/tools';
export declare function getMetadataFiltersValues(ctx: IExecuteFunctions, itemIndex: number): Record<string, never> | undefined;
export declare function isChatInstance(model: unknown): model is BaseChatModel;
export declare function getOptionalOutputParsers(ctx: IExecuteFunctions): Promise<Array<BaseOutputParser<unknown>>>;
export declare function getPromptInputByType(options: {
    ctx: IExecuteFunctions;
    i: number;
    promptTypeKey: string;
    inputKey: string;
}): string;
export declare function getSessionId(ctx: IExecuteFunctions, itemIndex: number, selectorKey?: string, autoSelect?: string, customKey?: string): string;
export declare function logAiEvent(executeFunctions: IExecuteFunctions, event: EventNamesAiNodesType, data?: IDataObject): Promise<void>;
export declare function serializeChatHistory(chatHistory: BaseMessage[]): string;
export declare const getConnectedTools: (ctx: IExecuteFunctions, enforceUniqueNames: boolean) => Promise<Tool[]>;
