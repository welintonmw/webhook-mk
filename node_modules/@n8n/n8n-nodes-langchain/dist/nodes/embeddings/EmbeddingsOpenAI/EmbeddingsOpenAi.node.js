"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.EmbeddingsOpenAi = void 0;
const openai_1 = require("@langchain/openai");
const logWrapper_1 = require("../../../utils/logWrapper");
const sharedFields_1 = require("../../../utils/sharedFields");
const modelParameter = {
    displayName: 'Model',
    name: 'model',
    type: 'options',
    description: 'The model which will generate the embeddings. <a href="https://platform.openai.com/docs/models/overview">Learn more</a>.',
    typeOptions: {
        loadOptions: {
            routing: {
                request: {
                    method: 'GET',
                    url: '={{ $parameter.options?.baseURL?.split("/").slice(-1).pop() || "v1"  }}/models',
                },
                output: {
                    postReceive: [
                        {
                            type: 'rootProperty',
                            properties: {
                                property: 'data',
                            },
                        },
                        {
                            type: 'filter',
                            properties: {
                                pass: "={{ $responseItem.id.includes('embed') }}",
                            },
                        },
                        {
                            type: 'setKeyValue',
                            properties: {
                                name: '={{$responseItem.id}}',
                                value: '={{$responseItem.id}}',
                            },
                        },
                        {
                            type: 'sort',
                            properties: {
                                key: 'name',
                            },
                        },
                    ],
                },
            },
        },
    },
    routing: {
        send: {
            type: 'body',
            property: 'model',
        },
    },
    default: 'text-embedding-3-small',
};
class EmbeddingsOpenAi {
    constructor() {
        this.description = {
            displayName: 'Embeddings OpenAI',
            name: 'embeddingsOpenAi',
            icon: { light: 'file:openAiLight.svg', dark: 'file:openAiLight.dark.svg' },
            credentials: [
                {
                    name: 'openAiApi',
                    required: true,
                },
            ],
            group: ['transform'],
            version: 1,
            description: 'Use Embeddings OpenAI',
            defaults: {
                name: 'Embeddings OpenAI',
            },
            codex: {
                categories: ['AI'],
                subcategories: {
                    AI: ['Embeddings'],
                },
                resources: {
                    primaryDocumentation: [
                        {
                            url: 'https://docs.n8n.io/integrations/builtin/cluster-nodes/sub-nodes/n8n-nodes-langchain.embeddingsopenai/',
                        },
                    ],
                },
            },
            inputs: [],
            outputs: ["ai_embedding"],
            outputNames: ['Embeddings'],
            requestDefaults: {
                ignoreHttpStatusErrors: true,
                baseURL: '={{ $parameter.options?.baseURL?.split("/").slice(0,-1).join("/") || "https://api.openai.com" }}',
            },
            properties: [
                (0, sharedFields_1.getConnectionHintNoticeField)(["ai_vectorStore"]),
                {
                    ...modelParameter,
                    default: 'text-embedding-ada-002',
                    displayOptions: {
                        show: {
                            '@version': [1],
                        },
                    },
                },
                {
                    ...modelParameter,
                    displayOptions: {
                        hide: {
                            '@version': [1],
                        },
                    },
                },
                {
                    displayName: 'Options',
                    name: 'options',
                    placeholder: 'Add Option',
                    description: 'Additional options to add',
                    type: 'collection',
                    default: {},
                    options: [
                        {
                            displayName: 'Base URL',
                            name: 'baseURL',
                            default: 'https://api.openai.com/v1',
                            description: 'Override the default base URL for the API',
                            type: 'string',
                        },
                        {
                            displayName: 'Batch Size',
                            name: 'batchSize',
                            default: 512,
                            typeOptions: { maxValue: 2048 },
                            description: 'Maximum number of documents to send in each request',
                            type: 'number',
                        },
                        {
                            displayName: 'Strip New Lines',
                            name: 'stripNewLines',
                            default: true,
                            description: 'Whether to strip new lines from the input text',
                            type: 'boolean',
                        },
                        {
                            displayName: 'Timeout',
                            name: 'timeout',
                            default: -1,
                            description: 'Maximum amount of time a request is allowed to take in seconds. Set to -1 for no timeout.',
                            type: 'number',
                        },
                    ],
                },
            ],
        };
    }
    async supplyData(itemIndex) {
        this.logger.verbose('Supply data for embeddings');
        const credentials = await this.getCredentials('openAiApi');
        const options = this.getNodeParameter('options', itemIndex, {});
        if (options.timeout === -1) {
            options.timeout = undefined;
        }
        const configuration = {};
        if (options.baseURL) {
            configuration.baseURL = options.baseURL;
        }
        const embeddings = new openai_1.OpenAIEmbeddings({
            modelName: this.getNodeParameter('model', itemIndex, 'text-embedding-3-small'),
            openAIApiKey: credentials.apiKey,
            ...options,
        }, configuration);
        return {
            response: (0, logWrapper_1.logWrapper)(embeddings, this),
        };
    }
}
exports.EmbeddingsOpenAi = EmbeddingsOpenAi;
//# sourceMappingURL=EmbeddingsOpenAi.node.js.map