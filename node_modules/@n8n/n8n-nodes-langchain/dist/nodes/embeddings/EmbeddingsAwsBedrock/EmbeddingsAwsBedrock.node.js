"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.EmbeddingsAwsBedrock = void 0;
const bedrock_1 = require("@langchain/community/embeddings/bedrock");
const logWrapper_1 = require("../../../utils/logWrapper");
const sharedFields_1 = require("../../../utils/sharedFields");
class EmbeddingsAwsBedrock {
    constructor() {
        this.description = {
            displayName: 'Embeddings AWS Bedrock',
            name: 'embeddingsAwsBedrock',
            icon: 'file:bedrock.svg',
            credentials: [
                {
                    name: 'aws',
                    required: true,
                },
            ],
            group: ['transform'],
            version: 1,
            description: 'Use Embeddings AWS Bedrock',
            defaults: {
                name: 'Embeddings AWS Bedrock',
            },
            codex: {
                categories: ['AI'],
                subcategories: {
                    AI: ['Embeddings'],
                },
                resources: {
                    primaryDocumentation: [
                        {
                            url: 'https://docs.n8n.io/integrations/builtin/cluster-nodes/sub-nodes/n8n-nodes-langchain.embeddingsawsbedrock/',
                        },
                    ],
                },
            },
            inputs: [],
            outputs: ["ai_embedding"],
            outputNames: ['Embeddings'],
            requestDefaults: {
                ignoreHttpStatusErrors: true,
                baseURL: '=https://bedrock.{{$credentials?.region ?? "eu-central-1"}}.amazonaws.com',
            },
            properties: [
                (0, sharedFields_1.getConnectionHintNoticeField)(["ai_vectorStore"]),
                {
                    displayName: 'Model',
                    name: 'model',
                    type: 'options',
                    description: 'The model which will generate the completion. <a href="https://docs.aws.amazon.com/bedrock/latest/userguide/foundation-models.html">Learn more</a>.',
                    typeOptions: {
                        loadOptions: {
                            routing: {
                                request: {
                                    method: 'GET',
                                    url: '/foundation-models?byInferenceType=ON_DEMAND&byOutputModality=EMBEDDING',
                                },
                                output: {
                                    postReceive: [
                                        {
                                            type: 'rootProperty',
                                            properties: {
                                                property: 'modelSummaries',
                                            },
                                        },
                                        {
                                            type: 'setKeyValue',
                                            properties: {
                                                name: '={{$responseItem.modelName}}',
                                                description: '={{$responseItem.modelArn}}',
                                                value: '={{$responseItem.modelId}}',
                                            },
                                        },
                                        {
                                            type: 'sort',
                                            properties: {
                                                key: 'name',
                                            },
                                        },
                                    ],
                                },
                            },
                        },
                    },
                    routing: {
                        send: {
                            type: 'body',
                            property: 'model',
                        },
                    },
                    default: '',
                },
            ],
        };
    }
    async supplyData(itemIndex) {
        const credentials = await this.getCredentials('aws');
        const modelName = this.getNodeParameter('model', itemIndex);
        const embeddings = new bedrock_1.BedrockEmbeddings({
            region: credentials.region,
            model: modelName,
            maxRetries: 3,
            credentials: {
                secretAccessKey: credentials.secretAccessKey,
                accessKeyId: credentials.accessKeyId,
                sessionToken: credentials.sessionToken,
            },
        });
        return {
            response: (0, logWrapper_1.logWrapper)(embeddings, this),
        };
    }
}
exports.EmbeddingsAwsBedrock = EmbeddingsAwsBedrock;
//# sourceMappingURL=EmbeddingsAwsBedrock.node.js.map