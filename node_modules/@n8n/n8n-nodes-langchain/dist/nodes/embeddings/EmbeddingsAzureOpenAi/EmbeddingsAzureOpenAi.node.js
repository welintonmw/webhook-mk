"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.EmbeddingsAzureOpenAi = void 0;
const openai_1 = require("@langchain/openai");
const logWrapper_1 = require("../../../utils/logWrapper");
const sharedFields_1 = require("../../../utils/sharedFields");
class EmbeddingsAzureOpenAi {
    constructor() {
        this.description = {
            displayName: 'Embeddings Azure OpenAI',
            name: 'embeddingsAzureOpenAi',
            icon: 'file:azure.svg',
            credentials: [
                {
                    name: 'azureOpenAiApi',
                    required: true,
                },
            ],
            group: ['transform'],
            version: 1,
            description: 'Use Embeddings Azure OpenAI',
            defaults: {
                name: 'Embeddings Azure OpenAI',
            },
            codex: {
                categories: ['AI'],
                subcategories: {
                    AI: ['Embeddings'],
                },
                resources: {
                    primaryDocumentation: [
                        {
                            url: 'https://docs.n8n.io/integrations/builtin/cluster-nodes/sub-nodes/n8n-nodes-langchain.embeddingsazureopenai/',
                        },
                    ],
                },
            },
            inputs: [],
            outputs: ["ai_embedding"],
            outputNames: ['Embeddings'],
            properties: [
                (0, sharedFields_1.getConnectionHintNoticeField)(["ai_vectorStore"]),
                {
                    displayName: 'Model (Deployment) Name',
                    name: 'model',
                    type: 'string',
                    description: 'The name of the model(deployment) to use',
                    default: '',
                },
                {
                    displayName: 'Options',
                    name: 'options',
                    placeholder: 'Add Option',
                    description: 'Additional options to add',
                    type: 'collection',
                    default: {},
                    options: [
                        {
                            displayName: 'Batch Size',
                            name: 'batchSize',
                            default: 512,
                            typeOptions: { maxValue: 2048 },
                            description: 'Maximum number of documents to send in each request',
                            type: 'number',
                        },
                        {
                            displayName: 'Strip New Lines',
                            name: 'stripNewLines',
                            default: true,
                            description: 'Whether to strip new lines from the input text',
                            type: 'boolean',
                        },
                        {
                            displayName: 'Timeout',
                            name: 'timeout',
                            default: -1,
                            description: 'Maximum amount of time a request is allowed to take in seconds. Set to -1 for no timeout.',
                            type: 'number',
                        },
                    ],
                },
            ],
        };
    }
    async supplyData(itemIndex) {
        this.logger.verbose('Supply data for embeddings');
        const credentials = (await this.getCredentials('azureOpenAiApi'));
        const modelName = this.getNodeParameter('model', itemIndex);
        const options = this.getNodeParameter('options', itemIndex, {});
        if (options.timeout === -1) {
            options.timeout = undefined;
        }
        const embeddings = new openai_1.OpenAIEmbeddings({
            azureOpenAIApiDeploymentName: modelName,
            azureOpenAIApiInstanceName: credentials.resourceName,
            azureOpenAIApiKey: credentials.apiKey,
            azureOpenAIApiVersion: credentials.apiVersion,
            ...options,
        });
        return {
            response: (0, logWrapper_1.logWrapper)(embeddings, this),
        };
    }
}
exports.EmbeddingsAzureOpenAi = EmbeddingsAzureOpenAi;
//# sourceMappingURL=EmbeddingsAzureOpenAi.node.js.map