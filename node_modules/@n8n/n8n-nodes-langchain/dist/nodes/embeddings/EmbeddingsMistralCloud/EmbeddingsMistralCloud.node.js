"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.EmbeddingsMistralCloud = void 0;
const mistralai_1 = require("@langchain/mistralai");
const logWrapper_1 = require("../../../utils/logWrapper");
const sharedFields_1 = require("../../../utils/sharedFields");
class EmbeddingsMistralCloud {
    constructor() {
        this.description = {
            displayName: 'Embeddings Mistral Cloud',
            name: 'embeddingsMistralCloud',
            icon: 'file:mistral.svg',
            credentials: [
                {
                    name: 'mistralCloudApi',
                    required: true,
                },
            ],
            group: ['transform'],
            version: 1,
            description: 'Use Embeddings Mistral Cloud',
            defaults: {
                name: 'Embeddings Mistral Cloud',
            },
            codex: {
                categories: ['AI'],
                subcategories: {
                    AI: ['Embeddings'],
                },
                resources: {
                    primaryDocumentation: [
                        {
                            url: 'https://docs.n8n.io/integrations/builtin/cluster-nodes/sub-nodes/n8n-nodes-langchain.embeddingsmistralcloud/',
                        },
                    ],
                },
            },
            inputs: [],
            outputs: ["ai_embedding"],
            outputNames: ['Embeddings'],
            requestDefaults: {
                ignoreHttpStatusErrors: true,
                baseURL: 'https://api.mistral.ai/v1',
            },
            properties: [
                (0, sharedFields_1.getConnectionHintNoticeField)(["ai_vectorStore"]),
                {
                    displayName: 'Model',
                    name: 'model',
                    type: 'options',
                    description: 'The model which will compute the embeddings. <a href="https://docs.mistral.ai/platform/endpoints/">Learn more</a>.',
                    typeOptions: {
                        loadOptions: {
                            routing: {
                                request: {
                                    method: 'GET',
                                    url: '/models',
                                },
                                output: {
                                    postReceive: [
                                        {
                                            type: 'rootProperty',
                                            properties: {
                                                property: 'data',
                                            },
                                        },
                                        {
                                            type: 'filter',
                                            properties: {
                                                pass: "={{ $responseItem.id.includes('embed') }}",
                                            },
                                        },
                                        {
                                            type: 'setKeyValue',
                                            properties: {
                                                name: '={{ $responseItem.id }}',
                                                value: '={{ $responseItem.id }}',
                                            },
                                        },
                                        {
                                            type: 'sort',
                                            properties: {
                                                key: 'name',
                                            },
                                        },
                                    ],
                                },
                            },
                        },
                    },
                    routing: {
                        send: {
                            type: 'body',
                            property: 'model',
                        },
                    },
                    default: 'mistral-embed',
                },
                {
                    displayName: 'Options',
                    name: 'options',
                    placeholder: 'Add Option',
                    description: 'Additional options to add',
                    type: 'collection',
                    default: {},
                    options: [
                        {
                            displayName: 'Batch Size',
                            name: 'batchSize',
                            default: 512,
                            typeOptions: { maxValue: 2048 },
                            description: 'Maximum number of documents to send in each request',
                            type: 'number',
                        },
                        {
                            displayName: 'Strip New Lines',
                            name: 'stripNewLines',
                            default: true,
                            description: 'Whether to strip new lines from the input text',
                            type: 'boolean',
                        },
                    ],
                },
            ],
        };
    }
    async supplyData(itemIndex) {
        const credentials = await this.getCredentials('mistralCloudApi');
        const modelName = this.getNodeParameter('model', itemIndex);
        const options = this.getNodeParameter('options', itemIndex, {});
        const embeddings = new mistralai_1.MistralAIEmbeddings({
            apiKey: credentials.apiKey,
            modelName,
            ...options,
        });
        return {
            response: (0, logWrapper_1.logWrapper)(embeddings, this),
        };
    }
}
exports.EmbeddingsMistralCloud = EmbeddingsMistralCloud;
//# sourceMappingURL=EmbeddingsMistralCloud.node.js.map