"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.EmbeddingsGooglePalm = void 0;
const googlepalm_1 = require("@langchain/community/embeddings/googlepalm");
const logWrapper_1 = require("../../../utils/logWrapper");
const sharedFields_1 = require("../../../utils/sharedFields");
class EmbeddingsGooglePalm {
    constructor() {
        this.description = {
            displayName: 'Embeddings Google PaLM',
            name: 'embeddingsGooglePalm',
            icon: 'file:google.svg',
            group: ['transform'],
            version: 1,
            description: 'Use Google PaLM Embeddings',
            defaults: {
                name: 'Embeddings Google PaLM',
            },
            requestDefaults: {
                ignoreHttpStatusErrors: true,
                baseURL: '={{ $credentials.host }}',
            },
            credentials: [
                {
                    name: 'googlePalmApi',
                    required: true,
                },
            ],
            codex: {
                categories: ['AI'],
                subcategories: {
                    AI: ['Embeddings'],
                },
                resources: {
                    primaryDocumentation: [
                        {
                            url: 'https://docs.n8n.io/integrations/builtin/cluster-nodes/sub-nodes/n8n-nodes-langchain.embeddingsgooglepalm/',
                        },
                    ],
                },
            },
            inputs: [],
            outputs: ["ai_embedding"],
            outputNames: ['Embeddings'],
            properties: [
                (0, sharedFields_1.getConnectionHintNoticeField)(["ai_vectorStore"]),
                {
                    displayName: 'Each model is using different dimensional density for embeddings. Please make sure to use the same dimensionality for your vector store. The default model is using 768-dimensional embeddings.',
                    name: 'notice',
                    type: 'notice',
                    default: '',
                },
                {
                    displayName: 'Model',
                    name: 'modelName',
                    type: 'options',
                    description: 'The model which will generate the embeddings. <a href="https://developers.generativeai.google/api/rest/generativelanguage/models/list">Learn more</a>.',
                    typeOptions: {
                        loadOptions: {
                            routing: {
                                request: {
                                    method: 'GET',
                                    url: '/v1beta3/models',
                                },
                                output: {
                                    postReceive: [
                                        {
                                            type: 'rootProperty',
                                            properties: {
                                                property: 'models',
                                            },
                                        },
                                        {
                                            type: 'filter',
                                            properties: {
                                                pass: "={{ $responseItem.name.startsWith('models/embedding') }}",
                                            },
                                        },
                                        {
                                            type: 'setKeyValue',
                                            properties: {
                                                name: '={{$responseItem.name}}',
                                                value: '={{$responseItem.name}}',
                                                description: '={{$responseItem.description}}',
                                            },
                                        },
                                        {
                                            type: 'sort',
                                            properties: {
                                                key: 'name',
                                            },
                                        },
                                    ],
                                },
                            },
                        },
                    },
                    routing: {
                        send: {
                            type: 'body',
                            property: 'model',
                        },
                    },
                    default: 'models/embedding-gecko-001',
                },
            ],
        };
    }
    async supplyData(itemIndex) {
        this.logger.verbose('Supply data for embeddings Google PaLM');
        const modelName = this.getNodeParameter('modelName', itemIndex, 'models/embedding-gecko-001');
        const credentials = await this.getCredentials('googlePalmApi');
        const embeddings = new googlepalm_1.GooglePaLMEmbeddings({
            apiKey: credentials.apiKey,
            modelName,
        });
        return {
            response: (0, logWrapper_1.logWrapper)(embeddings, this),
        };
    }
}
exports.EmbeddingsGooglePalm = EmbeddingsGooglePalm;
//# sourceMappingURL=EmbeddingsGooglePalm.node.js.map