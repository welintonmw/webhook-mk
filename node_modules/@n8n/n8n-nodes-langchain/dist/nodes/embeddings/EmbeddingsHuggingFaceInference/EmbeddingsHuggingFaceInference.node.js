"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.EmbeddingsHuggingFaceInference = void 0;
const hf_1 = require("@langchain/community/embeddings/hf");
const logWrapper_1 = require("../../../utils/logWrapper");
const sharedFields_1 = require("../../../utils/sharedFields");
class EmbeddingsHuggingFaceInference {
    constructor() {
        this.description = {
            displayName: 'Embeddings Hugging Face Inference',
            name: 'embeddingsHuggingFaceInference',
            icon: 'file:huggingface.svg',
            group: ['transform'],
            version: 1,
            description: 'Use HuggingFace Inference Embeddings',
            defaults: {
                name: 'Embeddings HuggingFace Inference',
            },
            credentials: [
                {
                    name: 'huggingFaceApi',
                    required: true,
                },
            ],
            codex: {
                categories: ['AI'],
                subcategories: {
                    AI: ['Embeddings'],
                },
                resources: {
                    primaryDocumentation: [
                        {
                            url: 'https://docs.n8n.io/integrations/builtin/cluster-nodes/sub-nodes/n8n-nodes-langchain.embeddingshuggingfaceinference/',
                        },
                    ],
                },
            },
            inputs: [],
            outputs: ["ai_embedding"],
            outputNames: ['Embeddings'],
            properties: [
                (0, sharedFields_1.getConnectionHintNoticeField)(["ai_vectorStore"]),
                {
                    displayName: 'Each model is using different dimensional density for embeddings. Please make sure to use the same dimensionality for your vector store. The default model is using 768-dimensional embeddings.',
                    name: 'notice',
                    type: 'notice',
                    default: '',
                },
                {
                    displayName: 'Model Name',
                    name: 'modelName',
                    type: 'string',
                    default: 'sentence-transformers/distilbert-base-nli-mean-tokens',
                    description: 'The model name to use from HuggingFace library',
                },
                {
                    displayName: 'Options',
                    name: 'options',
                    placeholder: 'Add Option',
                    description: 'Additional options to add',
                    type: 'collection',
                    default: {},
                    options: [
                        {
                            displayName: 'Custom Inference Endpoint',
                            name: 'endpointUrl',
                            default: '',
                            description: 'Custom endpoint URL',
                            type: 'string',
                        },
                    ],
                },
            ],
        };
    }
    async supplyData(itemIndex) {
        this.logger.verbose('Supply data for embeddings HF Inference');
        const model = this.getNodeParameter('modelName', itemIndex, 'sentence-transformers/distilbert-base-nli-mean-tokens');
        const credentials = await this.getCredentials('huggingFaceApi');
        const options = this.getNodeParameter('options', itemIndex, {});
        const embeddings = new hf_1.HuggingFaceInferenceEmbeddings({
            apiKey: credentials.apiKey,
            model,
            ...options,
        });
        return {
            response: (0, logWrapper_1.logWrapper)(embeddings, this),
        };
    }
}
exports.EmbeddingsHuggingFaceInference = EmbeddingsHuggingFaceInference;
//# sourceMappingURL=EmbeddingsHuggingFaceInference.node.js.map