"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ChainSummarizationV2 = void 0;
const chains_1 = require("langchain/chains");
const textsplitters_1 = require("@langchain/textsplitters");
const N8nJsonLoader_1 = require("../../../../utils/N8nJsonLoader");
const N8nBinaryLoader_1 = require("../../../../utils/N8nBinaryLoader");
const sharedFields_1 = require("../../../../utils/sharedFields");
const prompt_1 = require("../prompt");
const helpers_1 = require("../helpers");
const tracing_1 = require("../../../../utils/tracing");
function getInputs(parameters) {
    const chunkingMode = parameters === null || parameters === void 0 ? void 0 : parameters.chunkingMode;
    const operationMode = parameters === null || parameters === void 0 ? void 0 : parameters.operationMode;
    const inputs = [
        { displayName: '', type: "main" },
        {
            displayName: 'Model',
            maxConnections: 1,
            type: "ai_languageModel",
            required: true,
        },
    ];
    if (operationMode === 'documentLoader') {
        inputs.push({
            displayName: 'Document',
            type: "ai_document",
            required: true,
            maxConnections: 1,
        });
        return inputs;
    }
    if (chunkingMode === 'advanced') {
        inputs.push({
            displayName: 'Text Splitter',
            type: "ai_textSplitter",
            required: false,
            maxConnections: 1,
        });
        return inputs;
    }
    return inputs;
}
class ChainSummarizationV2 {
    constructor(baseDescription) {
        this.description = {
            ...baseDescription,
            version: [2],
            defaults: {
                name: 'Summarization Chain',
                color: '#909298',
            },
            inputs: `={{ ((parameter) => { ${getInputs.toString()}; return getInputs(parameter) })($parameter) }}`,
            outputs: ["main"],
            credentials: [],
            properties: [
                (0, sharedFields_1.getTemplateNoticeField)(1951),
                {
                    displayName: 'Data to Summarize',
                    name: 'operationMode',
                    noDataExpression: true,
                    type: 'options',
                    description: 'How to pass data into the summarization chain',
                    default: 'nodeInputJson',
                    options: [
                        {
                            name: 'Use Node Input (JSON)',
                            value: 'nodeInputJson',
                            description: 'Summarize the JSON data coming into this node from the previous one',
                        },
                        {
                            name: 'Use Node Input (Binary)',
                            value: 'nodeInputBinary',
                            description: 'Summarize the binary data coming into this node from the previous one',
                        },
                        {
                            name: 'Use Document Loader',
                            value: 'documentLoader',
                            description: 'Use a loader sub-node with more configuration options',
                        },
                    ],
                },
                {
                    displayName: 'Chunking Strategy',
                    name: 'chunkingMode',
                    noDataExpression: true,
                    type: 'options',
                    description: 'Chunk splitting strategy',
                    default: 'simple',
                    options: [
                        {
                            name: 'Simple (Define Below)',
                            value: 'simple',
                        },
                        {
                            name: 'Advanced',
                            value: 'advanced',
                            description: 'Use a splitter sub-node with more configuration options',
                        },
                    ],
                    displayOptions: {
                        show: {
                            '/operationMode': ['nodeInputJson', 'nodeInputBinary'],
                        },
                    },
                },
                {
                    displayName: 'Characters Per Chunk',
                    name: 'chunkSize',
                    description: 'Controls the max size (in terms of number of characters) of the final document chunk',
                    type: 'number',
                    default: 1000,
                    displayOptions: {
                        show: {
                            '/chunkingMode': ['simple'],
                        },
                    },
                },
                {
                    displayName: 'Chunk Overlap (Characters)',
                    name: 'chunkOverlap',
                    type: 'number',
                    description: 'Specifies how much characters overlap there should be between chunks',
                    default: 200,
                    displayOptions: {
                        show: {
                            '/chunkingMode': ['simple'],
                        },
                    },
                },
                {
                    displayName: 'Options',
                    name: 'options',
                    type: 'collection',
                    default: {},
                    placeholder: 'Add Option',
                    options: [
                        {
                            displayName: 'Input Data Field Name',
                            name: 'binaryDataKey',
                            type: 'string',
                            default: 'data',
                            description: 'The name of the field in the agent or chainâ€™s input that contains the binary file to be processed',
                            displayOptions: {
                                show: {
                                    '/operationMode': ['nodeInputBinary'],
                                },
                            },
                        },
                        {
                            displayName: 'Summarization Method and Prompts',
                            name: 'summarizationMethodAndPrompts',
                            type: 'fixedCollection',
                            default: {
                                values: {
                                    summarizationMethod: 'map_reduce',
                                    prompt: prompt_1.DEFAULT_PROMPT_TEMPLATE,
                                    combineMapPrompt: prompt_1.DEFAULT_PROMPT_TEMPLATE,
                                },
                            },
                            placeholder: 'Add Option',
                            typeOptions: {},
                            options: [
                                {
                                    name: 'values',
                                    displayName: 'Values',
                                    values: [
                                        {
                                            displayName: 'Summarization Method',
                                            name: 'summarizationMethod',
                                            type: 'options',
                                            description: 'The type of summarization to run',
                                            default: 'map_reduce',
                                            options: [
                                                {
                                                    name: 'Map Reduce (Recommended)',
                                                    value: 'map_reduce',
                                                    description: 'Summarize each document (or chunk) individually, then summarize those summaries',
                                                },
                                                {
                                                    name: 'Refine',
                                                    value: 'refine',
                                                    description: 'Summarize the first document (or chunk). Then update that summary based on the next document (or chunk), and repeat.',
                                                },
                                                {
                                                    name: 'Stuff',
                                                    value: 'stuff',
                                                    description: 'Pass all documents (or chunks) at once. Ideal for small datasets.',
                                                },
                                            ],
                                        },
                                        {
                                            displayName: 'Individual Summary Prompt',
                                            name: 'combineMapPrompt',
                                            type: 'string',
                                            hint: 'The prompt to summarize an individual document (or chunk)',
                                            displayOptions: {
                                                hide: {
                                                    '/options.summarizationMethodAndPrompts.values.summarizationMethod': [
                                                        'stuff',
                                                        'refine',
                                                    ],
                                                },
                                            },
                                            default: prompt_1.DEFAULT_PROMPT_TEMPLATE,
                                            typeOptions: {
                                                rows: 9,
                                            },
                                        },
                                        {
                                            displayName: 'Final Prompt to Combine',
                                            name: 'prompt',
                                            type: 'string',
                                            default: prompt_1.DEFAULT_PROMPT_TEMPLATE,
                                            hint: 'The prompt to combine individual summaries',
                                            displayOptions: {
                                                hide: {
                                                    '/options.summarizationMethodAndPrompts.values.summarizationMethod': [
                                                        'stuff',
                                                        'refine',
                                                    ],
                                                },
                                            },
                                            typeOptions: {
                                                rows: 9,
                                            },
                                        },
                                        {
                                            displayName: 'Prompt',
                                            name: 'prompt',
                                            type: 'string',
                                            default: prompt_1.DEFAULT_PROMPT_TEMPLATE,
                                            displayOptions: {
                                                hide: {
                                                    '/options.summarizationMethodAndPrompts.values.summarizationMethod': [
                                                        'refine',
                                                        'map_reduce',
                                                    ],
                                                },
                                            },
                                            typeOptions: {
                                                rows: 9,
                                            },
                                        },
                                        {
                                            displayName: 'Subsequent (Refine) Prompt',
                                            name: 'refinePrompt',
                                            type: 'string',
                                            displayOptions: {
                                                hide: {
                                                    '/options.summarizationMethodAndPrompts.values.summarizationMethod': [
                                                        'stuff',
                                                        'map_reduce',
                                                    ],
                                                },
                                            },
                                            default: prompt_1.REFINE_PROMPT_TEMPLATE,
                                            hint: 'The prompt to refine the summary based on the next document (or chunk)',
                                            typeOptions: {
                                                rows: 9,
                                            },
                                        },
                                        {
                                            displayName: 'Initial Prompt',
                                            name: 'refineQuestionPrompt',
                                            type: 'string',
                                            displayOptions: {
                                                hide: {
                                                    '/options.summarizationMethodAndPrompts.values.summarizationMethod': [
                                                        'stuff',
                                                        'map_reduce',
                                                    ],
                                                },
                                            },
                                            default: prompt_1.DEFAULT_PROMPT_TEMPLATE,
                                            hint: 'The prompt for the first document (or chunk)',
                                            typeOptions: {
                                                rows: 9,
                                            },
                                        },
                                    ],
                                },
                            ],
                        },
                    ],
                },
            ],
        };
    }
    async execute() {
        var _a;
        this.logger.verbose('Executing Summarization Chain V2');
        const operationMode = this.getNodeParameter('operationMode', 0, 'nodeInputJson');
        const chunkingMode = this.getNodeParameter('chunkingMode', 0, 'simple');
        const model = (await this.getInputConnectionData("ai_languageModel", 0));
        const items = this.getInputData();
        const returnData = [];
        for (let itemIndex = 0; itemIndex < items.length; itemIndex++) {
            try {
                const summarizationMethodAndPrompts = this.getNodeParameter('options.summarizationMethodAndPrompts.values', itemIndex, {});
                const chainArgs = (0, helpers_1.getChainPromptsArgs)((_a = summarizationMethodAndPrompts.summarizationMethod) !== null && _a !== void 0 ? _a : 'map_reduce', summarizationMethodAndPrompts);
                const chain = (0, chains_1.loadSummarizationChain)(model, chainArgs);
                const item = items[itemIndex];
                let processedDocuments;
                if (operationMode === 'documentLoader') {
                    const documentInput = (await this.getInputConnectionData("ai_document", 0));
                    const isN8nLoader = documentInput instanceof N8nJsonLoader_1.N8nJsonLoader || documentInput instanceof N8nBinaryLoader_1.N8nBinaryLoader;
                    processedDocuments = isN8nLoader
                        ? await documentInput.processItem(item, itemIndex)
                        : documentInput;
                    const response = await chain.withConfig((0, tracing_1.getTracingConfig)(this)).invoke({
                        input_documents: processedDocuments,
                    });
                    returnData.push({ json: { response } });
                }
                if (['nodeInputJson', 'nodeInputBinary'].includes(operationMode)) {
                    let textSplitter;
                    switch (chunkingMode) {
                        case 'simple':
                            const chunkSize = this.getNodeParameter('chunkSize', itemIndex, 1000);
                            const chunkOverlap = this.getNodeParameter('chunkOverlap', itemIndex, 200);
                            textSplitter = new textsplitters_1.RecursiveCharacterTextSplitter({ chunkOverlap, chunkSize });
                            break;
                        case 'advanced':
                            textSplitter = (await this.getInputConnectionData("ai_textSplitter", 0));
                            break;
                        default:
                            break;
                    }
                    let processor;
                    if (operationMode === 'nodeInputBinary') {
                        const binaryDataKey = this.getNodeParameter('options.binaryDataKey', itemIndex, 'data');
                        processor = new N8nBinaryLoader_1.N8nBinaryLoader(this, 'options.', binaryDataKey, textSplitter);
                    }
                    else {
                        processor = new N8nJsonLoader_1.N8nJsonLoader(this, 'options.', textSplitter);
                    }
                    const processedItem = await processor.processItem(item, itemIndex);
                    const response = await chain.call({
                        input_documents: processedItem,
                    });
                    returnData.push({ json: { response } });
                }
            }
            catch (error) {
                if (this.continueOnFail(error)) {
                    returnData.push({ json: { error: error.message }, pairedItem: { item: itemIndex } });
                    continue;
                }
                throw error;
            }
        }
        return [returnData];
    }
}
exports.ChainSummarizationV2 = ChainSummarizationV2;
//# sourceMappingURL=ChainSummarizationV2.node.js.map