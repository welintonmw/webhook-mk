"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ChainRetrievalQa = void 0;
const n8n_workflow_1 = require("n8n-workflow");
const chains_1 = require("langchain/chains");
const sharedFields_1 = require("../../../utils/sharedFields");
const helpers_1 = require("../../../utils/helpers");
const tracing_1 = require("../../../utils/tracing");
class ChainRetrievalQa {
    constructor() {
        this.description = {
            displayName: 'Question and Answer Chain',
            name: 'chainRetrievalQa',
            icon: 'fa:link',
            group: ['transform'],
            version: [1, 1.1, 1.2, 1.3],
            description: 'Answer questions about retrieved documents',
            defaults: {
                name: 'Question and Answer Chain',
                color: '#909298',
            },
            codex: {
                alias: ['LangChain'],
                categories: ['AI'],
                subcategories: {
                    AI: ['Chains', 'Root Nodes'],
                },
                resources: {
                    primaryDocumentation: [
                        {
                            url: 'https://docs.n8n.io/integrations/builtin/cluster-nodes/root-nodes/n8n-nodes-langchain.chainretrievalqa/',
                        },
                    ],
                },
            },
            inputs: [
                "main",
                {
                    displayName: 'Model',
                    maxConnections: 1,
                    type: "ai_languageModel",
                    required: true,
                },
                {
                    displayName: 'Retriever',
                    maxConnections: 1,
                    type: "ai_retriever",
                    required: true,
                },
            ],
            outputs: ["main"],
            credentials: [],
            properties: [
                (0, sharedFields_1.getTemplateNoticeField)(1960),
                {
                    displayName: 'Query',
                    name: 'query',
                    type: 'string',
                    required: true,
                    default: '={{ $json.input }}',
                    displayOptions: {
                        show: {
                            '@version': [1],
                        },
                    },
                },
                {
                    displayName: 'Query',
                    name: 'query',
                    type: 'string',
                    required: true,
                    default: '={{ $json.chat_input }}',
                    displayOptions: {
                        show: {
                            '@version': [1.1],
                        },
                    },
                },
                {
                    displayName: 'Query',
                    name: 'query',
                    type: 'string',
                    required: true,
                    default: '={{ $json.chatInput }}',
                    displayOptions: {
                        show: {
                            '@version': [1.2],
                        },
                    },
                },
                {
                    displayName: 'Prompt',
                    name: 'promptType',
                    type: 'options',
                    options: [
                        {
                            name: 'Take from previous node automatically',
                            value: 'auto',
                            description: 'Looks for an input field called chatInput',
                        },
                        {
                            name: 'Define below',
                            value: 'define',
                            description: 'Use an expression to reference data in previous nodes or enter static text',
                        },
                    ],
                    displayOptions: {
                        hide: {
                            '@version': [{ _cnd: { lte: 1.2 } }],
                        },
                    },
                    default: 'auto',
                },
                {
                    displayName: 'Text',
                    name: 'text',
                    type: 'string',
                    required: true,
                    default: '',
                    typeOptions: {
                        rows: 2,
                    },
                    displayOptions: {
                        show: {
                            promptType: ['define'],
                        },
                    },
                },
            ],
        };
    }
    async execute() {
        this.logger.verbose('Executing Retrieval QA Chain');
        const model = (await this.getInputConnectionData("ai_languageModel", 0));
        const retriever = (await this.getInputConnectionData("ai_retriever", 0));
        const items = this.getInputData();
        const chain = chains_1.RetrievalQAChain.fromLLM(model, retriever);
        const returnData = [];
        for (let itemIndex = 0; itemIndex < items.length; itemIndex++) {
            try {
                let query;
                if (this.getNode().typeVersion <= 1.2) {
                    query = this.getNodeParameter('query', itemIndex);
                }
                else {
                    query = (0, helpers_1.getPromptInputByType)({
                        ctx: this,
                        i: itemIndex,
                        inputKey: 'text',
                        promptTypeKey: 'promptType',
                    });
                }
                if (query === undefined) {
                    throw new n8n_workflow_1.NodeOperationError(this.getNode(), 'The ‘query‘ parameter is empty.');
                }
                const response = await chain.withConfig((0, tracing_1.getTracingConfig)(this)).invoke({ query });
                returnData.push({ json: { response } });
            }
            catch (error) {
                if (this.continueOnFail(error)) {
                    returnData.push({ json: { error: error.message }, pairedItem: { item: itemIndex } });
                    continue;
                }
                throw error;
            }
        }
        return [returnData];
    }
}
exports.ChainRetrievalQa = ChainRetrievalQa;
//# sourceMappingURL=ChainRetrievalQa.node.js.map