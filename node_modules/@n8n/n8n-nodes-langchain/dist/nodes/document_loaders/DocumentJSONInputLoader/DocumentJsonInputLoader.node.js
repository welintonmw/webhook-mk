"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.DocumentJsonInputLoader = void 0;
const logWrapper_1 = require("../../../utils/logWrapper");
const N8nJsonLoader_1 = require("../../../utils/N8nJsonLoader");
const sharedFields_1 = require("../../../utils/sharedFields");
class DocumentJsonInputLoader {
    constructor() {
        this.description = {
            hidden: true,
            displayName: 'JSON Input Loader',
            name: 'documentJsonInputLoader',
            icon: 'file:json.svg',
            group: ['transform'],
            version: 1,
            description: 'Use JSON data from a previous step in the workflow',
            defaults: {
                name: 'JSON Input Loader',
            },
            codex: {
                categories: ['AI'],
                subcategories: {
                    AI: ['Document Loaders'],
                },
                resources: {
                    primaryDocumentation: [
                        {
                            url: 'https://docs.n8n.io/integrations/builtin/cluster-nodes/sub-nodes/n8n-nodes-langchain.documentdefaultdataloader/',
                        },
                    ],
                },
            },
            inputs: [
                {
                    displayName: 'Text Splitter',
                    maxConnections: 1,
                    type: "ai_textSplitter",
                },
            ],
            inputNames: ['Text Splitter'],
            outputs: ["ai_document"],
            outputNames: ['Document'],
            properties: [
                (0, sharedFields_1.getConnectionHintNoticeField)(["ai_vectorStore"]),
                {
                    displayName: 'Pointers',
                    name: 'pointers',
                    type: 'string',
                    default: '',
                    description: 'Pointers to extract from JSON, e.g. "/text" or "/text, /meta/title"',
                },
                {
                    displayName: 'Options',
                    name: 'options',
                    type: 'collection',
                    placeholder: 'Add Option',
                    default: {},
                    options: [
                        {
                            ...sharedFields_1.metadataFilterField,
                            displayName: 'Metadata',
                            description: 'Metadata to add to each document. Could be used for filtering during retrieval',
                            placeholder: 'Add property',
                        },
                    ],
                },
            ],
        };
    }
    async supplyData() {
        this.logger.verbose('Supply Data for JSON Input Loader');
        const textSplitter = (await this.getInputConnectionData("ai_textSplitter", 0));
        const processor = new N8nJsonLoader_1.N8nJsonLoader(this, undefined, textSplitter);
        return {
            response: (0, logWrapper_1.logWrapper)(processor, this),
        };
    }
}
exports.DocumentJsonInputLoader = DocumentJsonInputLoader;
//# sourceMappingURL=DocumentJsonInputLoader.node.js.map