"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.assistantSearch = exports.imageModelSearch = exports.modelSearch = exports.fileSearch = void 0;
const transport_1 = require("../transport");
async function fileSearch(filter) {
    var _a;
    const { data } = await transport_1.apiRequest.call(this, 'GET', '/files');
    if (filter) {
        const results = [];
        for (const file of data || []) {
            if ((_a = file.filename) === null || _a === void 0 ? void 0 : _a.toLowerCase().includes(filter.toLowerCase())) {
                results.push({
                    name: file.filename,
                    value: file.id,
                });
            }
        }
        return {
            results,
        };
    }
    else {
        return {
            results: (data || []).map((file) => ({
                name: file.filename,
                value: file.id,
            })),
        };
    }
}
exports.fileSearch = fileSearch;
const getModelSearch = (filterCondition) => async (ctx, filter) => {
    var _a;
    let { data } = (await transport_1.apiRequest.call(ctx, 'GET', '/models'));
    data = data === null || data === void 0 ? void 0 : data.filter((model) => filterCondition(model));
    let results = [];
    if (filter) {
        for (const model of data || []) {
            if ((_a = model.id) === null || _a === void 0 ? void 0 : _a.toLowerCase().includes(filter.toLowerCase())) {
                results.push({
                    name: model.id.toUpperCase(),
                    value: model.id,
                });
            }
        }
    }
    else {
        results = (data || []).map((model) => ({
            name: model.id.toUpperCase(),
            value: model.id,
        }));
    }
    results = results.sort((a, b) => a.name.localeCompare(b.name));
    return {
        results,
    };
};
async function modelSearch(filter) {
    return await getModelSearch((model) => model.id.startsWith('gpt-'))(this, filter);
}
exports.modelSearch = modelSearch;
async function imageModelSearch(filter) {
    return await getModelSearch((model) => model.id.includes('vision') || model.id.includes('gpt-4o'))(this, filter);
}
exports.imageModelSearch = imageModelSearch;
async function assistantSearch(filter, paginationToken) {
    var _a;
    const { data, has_more, last_id } = (await transport_1.apiRequest.call(this, 'GET', '/assistants', {
        headers: {
            'OpenAI-Beta': 'assistants=v2',
        },
        qs: {
            limit: 100,
            after: paginationToken,
        },
    }));
    if (has_more) {
        paginationToken = last_id;
    }
    else {
        paginationToken = undefined;
    }
    if (filter) {
        const results = [];
        for (const assistant of data || []) {
            if ((_a = assistant.name) === null || _a === void 0 ? void 0 : _a.toLowerCase().includes(filter.toLowerCase())) {
                results.push({
                    name: assistant.name,
                    value: assistant.id,
                });
            }
        }
        return {
            results,
        };
    }
    else {
        return {
            results: (data || []).map((assistant) => {
                var _a;
                return ({
                    name: (_a = assistant.name) !== null && _a !== void 0 ? _a : assistant.id,
                    value: assistant.id,
                });
            }),
            paginationToken,
        };
    }
}
exports.assistantSearch = assistantSearch;
//# sourceMappingURL=listSearch.js.map