"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.execute = exports.description = void 0;
const n8n_workflow_1 = require("n8n-workflow");
const form_data_1 = __importDefault(require("form-data"));
const transport_1 = require("../../transport");
const properties = [
    {
        displayName: 'Input Data Field Name',
        name: 'binaryPropertyName',
        type: 'string',
        default: 'data',
        hint: 'The name of the input field containing the binary file data to be processed',
        placeholder: 'e.g. data',
        description: 'Name of the binary property which contains the audio file in one of these formats: flac, mp3, mp4, mpeg, mpga, m4a, ogg, wav, or webm',
    },
    {
        displayName: 'Options',
        name: 'options',
        placeholder: 'Add Option',
        type: 'collection',
        default: {},
        options: [
            {
                displayName: 'Output Randomness (Temperature)',
                name: 'temperature',
                type: 'number',
                default: 0,
                typeOptions: {
                    minValue: 0,
                    maxValue: 1,
                    numberPrecision: 1,
                },
            },
        ],
    },
];
const displayOptions = {
    show: {
        operation: ['translate'],
        resource: ['audio'],
    },
};
exports.description = (0, n8n_workflow_1.updateDisplayOptions)(displayOptions, properties);
async function execute(i) {
    const model = 'whisper-1';
    const binaryPropertyName = this.getNodeParameter('binaryPropertyName', i);
    const options = this.getNodeParameter('options', i, {});
    const formData = new form_data_1.default();
    formData.append('model', model);
    if (options.temperature) {
        formData.append('temperature', options.temperature.toString());
    }
    const binaryData = this.helpers.assertBinaryData(i, binaryPropertyName);
    const dataBuffer = await this.helpers.getBinaryDataBuffer(i, binaryPropertyName);
    formData.append('file', dataBuffer, {
        filename: binaryData.fileName,
        contentType: binaryData.mimeType,
    });
    const response = await transport_1.apiRequest.call(this, 'POST', '/audio/translations', {
        option: { formData },
        headers: {
            'Content-Type': 'multipart/form-data',
        },
    });
    return [
        {
            json: response,
            pairedItem: { item: i },
        },
    ];
}
exports.execute = execute;
//# sourceMappingURL=translate.operation.js.map