"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.versionDescription = void 0;
const assistant = __importStar(require("./assistant"));
const audio = __importStar(require("./audio"));
const file = __importStar(require("./file"));
const image = __importStar(require("./image"));
const text = __importStar(require("./text"));
const prettifyOperation = (resource, operation) => {
    if (operation === 'deleteAssistant') {
        return 'Delete Assistant';
    }
    if (operation === 'deleteFile') {
        return 'Delete File';
    }
    if (operation === 'classify') {
        return 'Classify Text';
    }
    if (operation === 'message' && resource === 'text') {
        return 'Message Model';
    }
    const capitalize = (str) => {
        const chars = str.split('');
        chars[0] = chars[0].toUpperCase();
        return chars.join('');
    };
    if (['transcribe', 'translate'].includes(operation)) {
        resource = 'recording';
    }
    if (operation === 'list') {
        resource = resource + 's';
    }
    return `${capitalize(operation)} ${capitalize(resource)}`;
};
const configureNodeInputs = (resource, operation, hideTools) => {
    if (resource === 'assistant' && operation === 'message') {
        return [
            { type: "main" },
            { type: "ai_memory", displayName: 'Memory', maxConnections: 1 },
            { type: "ai_tool", displayName: 'Tools' },
        ];
    }
    if (resource === 'text' && operation === 'message') {
        if (hideTools === 'hide') {
            return ["main"];
        }
        return [
            { type: "main" },
            { type: "ai_tool", displayName: 'Tools' },
        ];
    }
    return ["main"];
};
exports.versionDescription = {
    displayName: 'OpenAI',
    name: 'openAi',
    icon: { light: 'file:openAi.svg', dark: 'file:openAi.dark.svg' },
    group: ['transform'],
    version: [1, 1.1, 1.2, 1.3, 1.4],
    subtitle: `={{(${prettifyOperation})($parameter.resource, $parameter.operation)}}`,
    description: 'Message an assistant or GPT, analyze images, generate audio, etc.',
    defaults: {
        name: 'OpenAI',
    },
    codex: {
        alias: ['LangChain', 'ChatGPT', 'DallE', 'whisper', 'audio', 'transcribe', 'tts', 'assistant'],
        categories: ['AI'],
        subcategories: {
            AI: ['Agents', 'Miscellaneous', 'Root Nodes'],
        },
        resources: {
            primaryDocumentation: [
                {
                    url: 'https://docs.n8n.io/integrations/builtin/app-nodes/n8n-nodes-langchain.openai/',
                },
            ],
        },
    },
    inputs: `={{(${configureNodeInputs})($parameter.resource, $parameter.operation, $parameter.hideTools)}}`,
    outputs: ['main'],
    credentials: [
        {
            name: 'openAiApi',
            required: true,
        },
    ],
    properties: [
        {
            displayName: 'Resource',
            name: 'resource',
            type: 'options',
            noDataExpression: true,
            options: [
                {
                    name: 'Assistant',
                    value: 'assistant',
                },
                {
                    name: 'Text',
                    value: 'text',
                },
                {
                    name: 'Image',
                    value: 'image',
                },
                {
                    name: 'Audio',
                    value: 'audio',
                },
                {
                    name: 'File',
                    value: 'file',
                },
            ],
            default: 'text',
        },
        ...assistant.description,
        ...audio.description,
        ...file.description,
        ...image.description,
        ...text.description,
    ],
};
//# sourceMappingURL=versionDescription.js.map