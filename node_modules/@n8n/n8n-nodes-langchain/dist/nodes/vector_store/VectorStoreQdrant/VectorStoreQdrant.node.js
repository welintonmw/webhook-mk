"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.VectorStoreQdrant = void 0;
const qdrant_1 = require("@langchain/community/vectorstores/qdrant");
const createVectorStoreNode_1 = require("../shared/createVectorStoreNode");
const descriptions_1 = require("../shared/descriptions");
const listSearch_1 = require("../shared/methods/listSearch");
const sharedFields = [descriptions_1.qdrantCollectionRLC];
const insertFields = [
    {
        displayName: 'Options',
        name: 'options',
        type: 'collection',
        placeholder: 'Add Option',
        default: {},
        options: [
            {
                displayName: 'Collection Config',
                name: 'collectionConfig',
                type: 'json',
                default: '',
                description: 'JSON options for creating a collection. <a href="https://qdrant.tech/documentation/concepts/collections">Learn more</a>.',
            },
        ],
    },
];
exports.VectorStoreQdrant = (0, createVectorStoreNode_1.createVectorStoreNode)({
    meta: {
        displayName: 'Qdrant Vector Store',
        name: 'vectorStoreQdrant',
        description: 'Work with your data in a Qdrant collection',
        icon: 'file:qdrant.svg',
        docsUrl: 'https://docs.n8n.io/integrations/builtin/cluster-nodes/root-nodes/n8n-nodes-langchain.vectorstoreqdrant/',
        credentials: [
            {
                name: 'qdrantApi',
                required: true,
            },
        ],
    },
    methods: { listSearch: { qdrantCollectionsSearch: listSearch_1.qdrantCollectionsSearch } },
    insertFields,
    sharedFields,
    async getVectorStoreClient(context, _, embeddings, itemIndex) {
        const collection = context.getNodeParameter('qdrantCollection', itemIndex, '', {
            extractValue: true,
        });
        const credentials = await context.getCredentials('qdrantApi');
        const config = {
            url: credentials.qdrantUrl,
            apiKey: credentials.apiKey,
            collectionName: collection,
        };
        return await qdrant_1.QdrantVectorStore.fromExistingCollection(embeddings, config);
    },
    async populateVectorStore(context, embeddings, documents, itemIndex) {
        const collectionName = context.getNodeParameter('qdrantCollection', itemIndex, '', {
            extractValue: true,
        });
        const { collectionConfig } = context.getNodeParameter('options', itemIndex, {});
        const credentials = await context.getCredentials('qdrantApi');
        const config = {
            url: credentials.qdrantUrl,
            apiKey: credentials.apiKey,
            collectionName,
            collectionConfig,
        };
        await qdrant_1.QdrantVectorStore.fromDocuments(documents, embeddings, config);
    },
});
//# sourceMappingURL=VectorStoreQdrant.node.js.map