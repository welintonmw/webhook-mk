"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.VectorStoreZep = void 0;
const n8n_workflow_1 = require("n8n-workflow");
const zep_1 = require("@langchain/community/vectorstores/zep");
const createVectorStoreNode_1 = require("../shared/createVectorStoreNode");
const sharedFields_1 = require("../../../utils/sharedFields");
const embeddingDimensions = {
    displayName: 'Embedding Dimensions',
    name: 'embeddingDimensions',
    type: 'number',
    default: 1536,
    description: 'Whether to allow using characters from the Unicode surrogate blocks',
};
const insertFields = [
    {
        displayName: 'Options',
        name: 'options',
        type: 'collection',
        placeholder: 'Add Option',
        default: {},
        options: [
            embeddingDimensions,
            {
                displayName: 'Is Auto Embedded',
                name: 'isAutoEmbedded',
                type: 'boolean',
                default: true,
                description: 'Whether to automatically embed documents when they are added',
            },
        ],
    },
];
const retrieveFields = [
    {
        displayName: 'Options',
        name: 'options',
        type: 'collection',
        placeholder: 'Add Option',
        default: {},
        options: [embeddingDimensions, sharedFields_1.metadataFilterField],
    },
];
exports.VectorStoreZep = (0, createVectorStoreNode_1.createVectorStoreNode)({
    meta: {
        displayName: 'Zep Vector Store',
        name: 'vectorStoreZep',
        description: 'Work with your data in Zep Vector Store',
        credentials: [
            {
                name: 'zepApi',
                required: true,
            },
        ],
        icon: 'file:zep.png',
        docsUrl: 'https://docs.n8n.io/integrations/builtin/cluster-nodes/root-nodes/n8n-nodes-langchain.vectorstorezep/',
    },
    sharedFields: [
        {
            displayName: 'Collection Name',
            name: 'collectionName',
            type: 'string',
            default: '',
            required: true,
        },
    ],
    insertFields,
    loadFields: retrieveFields,
    retrieveFields,
    async getVectorStoreClient(context, filter, embeddings, itemIndex) {
        var _a;
        const collectionName = context.getNodeParameter('collectionName', itemIndex);
        const options = context.getNodeParameter('options', itemIndex) || {};
        const credentials = (await context.getCredentials('zepApi'));
        const zepConfig = {
            apiUrl: credentials.apiUrl,
            apiKey: credentials.apiKey,
            collectionName,
            embeddingDimensions: (_a = options.embeddingDimensions) !== null && _a !== void 0 ? _a : 1536,
            metadata: filter,
        };
        return new zep_1.ZepVectorStore(embeddings, zepConfig);
    },
    async populateVectorStore(context, embeddings, documents, itemIndex) {
        var _a, _b;
        const collectionName = context.getNodeParameter('collectionName', itemIndex);
        const options = context.getNodeParameter('options', itemIndex) || {};
        const credentials = (await context.getCredentials('zepApi'));
        const zepConfig = {
            apiUrl: credentials.apiUrl,
            apiKey: credentials.apiKey,
            collectionName,
            embeddingDimensions: (_a = options.embeddingDimensions) !== null && _a !== void 0 ? _a : 1536,
            isAutoEmbedded: (_b = options.isAutoEmbedded) !== null && _b !== void 0 ? _b : true,
        };
        try {
            await zep_1.ZepVectorStore.fromDocuments(documents, embeddings, zepConfig);
        }
        catch (error) {
            const errorCode = error.code;
            const responseData = error.responseData;
            if (errorCode === 400 && responseData.includes('CreateDocumentCollectionRequest')) {
                throw new n8n_workflow_1.NodeOperationError(context.getNode(), `Collection ${collectionName} not found`, {
                    itemIndex,
                    description: 'Please check that the collection exists in your vector store, or make sure that collection name contains only alphanumeric characters',
                });
            }
            throw new n8n_workflow_1.NodeOperationError(context.getNode(), error, { itemIndex });
        }
    },
});
//# sourceMappingURL=VectorStoreZep.node.js.map