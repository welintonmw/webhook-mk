"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.VectorStoreZepInsert = void 0;
const zep_1 = require("@langchain/community/vectorstores/zep");
const processDocuments_1 = require("../shared/processDocuments");
class VectorStoreZepInsert {
    constructor() {
        this.description = {
            displayName: 'Zep Vector Store: Insert',
            name: 'vectorStoreZepInsert',
            hidden: true,
            icon: 'file:zep.png',
            group: ['transform'],
            version: 1,
            description: 'Insert data into Zep Vector Store index',
            defaults: {
                name: 'Zep: Insert',
            },
            codex: {
                categories: ['AI'],
                subcategories: {
                    AI: ['Vector Stores'],
                },
                resources: {
                    primaryDocumentation: [
                        {
                            url: 'https://docs.n8n.io/integrations/builtin/cluster-nodes/root-nodes/n8n-nodes-langchain.vectorstorezep/',
                        },
                    ],
                },
            },
            credentials: [
                {
                    name: 'zepApi',
                    required: true,
                },
            ],
            inputs: [
                "main",
                {
                    displayName: 'Document',
                    maxConnections: 1,
                    type: "ai_document",
                    required: true,
                },
                {
                    displayName: 'Embedding',
                    maxConnections: 1,
                    type: "ai_embedding",
                    required: true,
                },
            ],
            outputs: ["main"],
            properties: [
                {
                    displayName: 'Collection Name',
                    name: 'collectionName',
                    type: 'string',
                    default: '',
                    required: true,
                },
                {
                    displayName: 'Specify the document to load in the document loader sub-node',
                    name: 'notice',
                    type: 'notice',
                    default: '',
                },
                {
                    displayName: 'Options',
                    name: 'options',
                    type: 'collection',
                    placeholder: 'Add Option',
                    default: {},
                    options: [
                        {
                            displayName: 'Embedding Dimensions',
                            name: 'embeddingDimensions',
                            type: 'number',
                            default: 1536,
                            description: 'Whether to allow using characters from the Unicode surrogate blocks',
                        },
                        {
                            displayName: 'Is Auto Embedded',
                            name: 'isAutoEmbedded',
                            type: 'boolean',
                            default: true,
                            description: 'Whether to automatically embed documents when they are added',
                        },
                    ],
                },
            ],
        };
    }
    async execute() {
        var _a, _b;
        this.logger.verbose('Executing data for Zep Insert Vector Store');
        const items = this.getInputData(0);
        const collectionName = this.getNodeParameter('collectionName', 0);
        const options = this.getNodeParameter('options', 0, {}) || {};
        const credentials = (await this.getCredentials('zepApi'));
        const documentInput = (await this.getInputConnectionData("ai_document", 0));
        const embeddings = (await this.getInputConnectionData("ai_embedding", 0));
        const { processedDocuments, serializedDocuments } = await (0, processDocuments_1.processDocuments)(documentInput, items);
        const zepConfig = {
            apiUrl: credentials.apiUrl,
            apiKey: credentials.apiKey,
            collectionName,
            embeddingDimensions: (_a = options.embeddingDimensions) !== null && _a !== void 0 ? _a : 1536,
            isAutoEmbedded: (_b = options.isAutoEmbedded) !== null && _b !== void 0 ? _b : true,
        };
        await zep_1.ZepVectorStore.fromDocuments(processedDocuments, embeddings, zepConfig);
        return [serializedDocuments];
    }
}
exports.VectorStoreZepInsert = VectorStoreZepInsert;
//# sourceMappingURL=VectorStoreZepInsert.node.js.map