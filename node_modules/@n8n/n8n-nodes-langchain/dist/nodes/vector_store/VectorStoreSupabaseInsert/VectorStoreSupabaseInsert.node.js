"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.VectorStoreSupabaseInsert = void 0;
const supabase_js_1 = require("@supabase/supabase-js");
const supabase_1 = require("@langchain/community/vectorstores/supabase");
const processDocuments_1 = require("../shared/processDocuments");
const descriptions_1 = require("../shared/descriptions");
const listSearch_1 = require("../shared/methods/listSearch");
class VectorStoreSupabaseInsert {
    constructor() {
        this.description = {
            displayName: 'Supabase: Insert',
            hidden: true,
            name: 'vectorStoreSupabaseInsert',
            icon: 'file:supabase.svg',
            group: ['transform'],
            version: 1,
            description: 'Insert data into Supabase Vector Store index [https://supabase.com/docs/guides/ai/langchain]',
            defaults: {
                name: 'Supabase: Insert',
            },
            codex: {
                categories: ['AI'],
                subcategories: {
                    AI: ['Vector Stores'],
                },
                resources: {
                    primaryDocumentation: [
                        {
                            url: 'https://docs.n8n.io/integrations/builtin/cluster-nodes/root-nodes/n8n-nodes-langchain.vectorstoresupabase/',
                        },
                    ],
                },
            },
            credentials: [
                {
                    name: 'supabaseApi',
                    required: true,
                },
            ],
            inputs: [
                "main",
                {
                    displayName: 'Document',
                    maxConnections: 1,
                    type: "ai_document",
                    required: true,
                },
                {
                    displayName: 'Embedding',
                    maxConnections: 1,
                    type: "ai_embedding",
                    required: true,
                },
            ],
            outputs: ["main"],
            properties: [
                {
                    displayName: 'Please refer to the <a href="https://supabase.com/docs/guides/ai/langchain" target="_blank">Supabase documentation</a> for more information on how to setup your database as a Vector Store.',
                    name: 'setupNotice',
                    type: 'notice',
                    default: '',
                },
                descriptions_1.supabaseTableNameRLC,
                {
                    displayName: 'Query Name',
                    name: 'queryName',
                    type: 'string',
                    default: 'match_documents',
                    required: true,
                    description: 'Name of the query to use for matching documents',
                },
                {
                    displayName: 'Specify the document to load in the document loader sub-node',
                    name: 'notice',
                    type: 'notice',
                    default: '',
                },
            ],
        };
        this.methods = { listSearch: { supabaseTableNameSearch: listSearch_1.supabaseTableNameSearch } };
    }
    async execute() {
        this.logger.verbose('Executing data for Supabase Insert Vector Store');
        const items = this.getInputData(0);
        const tableName = this.getNodeParameter('tableName', 0, '', { extractValue: true });
        const queryName = this.getNodeParameter('queryName', 0);
        const credentials = await this.getCredentials('supabaseApi');
        const documentInput = (await this.getInputConnectionData("ai_document", 0));
        const embeddings = (await this.getInputConnectionData("ai_embedding", 0));
        const client = (0, supabase_js_1.createClient)(credentials.host, credentials.serviceRole);
        const { processedDocuments, serializedDocuments } = await (0, processDocuments_1.processDocuments)(documentInput, items);
        await supabase_1.SupabaseVectorStore.fromDocuments(processedDocuments, embeddings, {
            client,
            tableName,
            queryName,
        });
        return [serializedDocuments];
    }
}
exports.VectorStoreSupabaseInsert = VectorStoreSupabaseInsert;
//# sourceMappingURL=VectorStoreSupabaseInsert.node.js.map