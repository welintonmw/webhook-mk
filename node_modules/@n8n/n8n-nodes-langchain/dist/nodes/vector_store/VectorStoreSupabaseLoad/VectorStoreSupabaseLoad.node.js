"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.VectorStoreSupabaseLoad = void 0;
const supabase_js_1 = require("@supabase/supabase-js");
const supabase_1 = require("@langchain/community/vectorstores/supabase");
const logWrapper_1 = require("../../../utils/logWrapper");
const sharedFields_1 = require("../../../utils/sharedFields");
const helpers_1 = require("../../../utils/helpers");
const descriptions_1 = require("../shared/descriptions");
const listSearch_1 = require("../shared/methods/listSearch");
class VectorStoreSupabaseLoad {
    constructor() {
        this.description = {
            displayName: 'Supabase: Load',
            name: 'vectorStoreSupabaseLoad',
            icon: 'file:supabase.svg',
            hidden: true,
            group: ['transform'],
            version: 1,
            description: 'Load data from Supabase Vector Store index',
            defaults: {
                name: 'Supabase: Load',
            },
            codex: {
                categories: ['AI'],
                subcategories: {
                    AI: ['Vector Stores'],
                },
                resources: {
                    primaryDocumentation: [
                        {
                            url: 'https://docs.n8n.io/integrations/builtin/cluster-nodes/root-nodes/n8n-nodes-langchain.vectorstoresupabase/',
                        },
                    ],
                },
            },
            credentials: [
                {
                    name: 'supabaseApi',
                    required: true,
                },
            ],
            inputs: [
                {
                    displayName: 'Embedding',
                    maxConnections: 1,
                    type: "ai_embedding",
                    required: true,
                },
            ],
            outputs: ["ai_vectorStore"],
            outputNames: ['Vector Store'],
            properties: [
                descriptions_1.supabaseTableNameRLC,
                {
                    displayName: 'Query Name',
                    name: 'queryName',
                    type: 'string',
                    default: 'match_documents',
                    required: true,
                    description: 'Name of the query to use for matching documents',
                },
                {
                    displayName: 'Options',
                    name: 'options',
                    type: 'collection',
                    placeholder: 'Add Option',
                    default: {},
                    options: [sharedFields_1.metadataFilterField],
                },
            ],
        };
        this.methods = { listSearch: { supabaseTableNameSearch: listSearch_1.supabaseTableNameSearch } };
    }
    async supplyData(itemIndex) {
        this.logger.verbose('Supply Supabase Load Vector Store');
        const tableName = this.getNodeParameter('tableName', itemIndex, '', {
            extractValue: true,
        });
        const queryName = this.getNodeParameter('queryName', itemIndex);
        const credentials = await this.getCredentials('supabaseApi');
        const embeddings = (await this.getInputConnectionData("ai_embedding", 0));
        const client = (0, supabase_js_1.createClient)(credentials.host, credentials.serviceRole);
        const config = {
            client,
            tableName,
            queryName,
            filter: (0, helpers_1.getMetadataFiltersValues)(this, itemIndex),
        };
        const vectorStore = await supabase_1.SupabaseVectorStore.fromExistingIndex(embeddings, config);
        return {
            response: (0, logWrapper_1.logWrapper)(vectorStore, this),
        };
    }
}
exports.VectorStoreSupabaseLoad = VectorStoreSupabaseLoad;
//# sourceMappingURL=VectorStoreSupabaseLoad.node.js.map