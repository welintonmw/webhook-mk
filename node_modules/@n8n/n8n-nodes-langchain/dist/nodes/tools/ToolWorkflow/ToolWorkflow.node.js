"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ToolWorkflow = void 0;
const n8n_workflow_1 = require("n8n-workflow");
const manual = __importStar(require("n8n-nodes-base/dist/nodes/Set/v2/manual.mode"));
const tools_1 = require("@langchain/core/tools");
const get_1 = __importDefault(require("lodash/get"));
const isObject_1 = __importDefault(require("lodash/isObject"));
const sharedFields_1 = require("../../../utils/sharedFields");
const schemaParsing_1 = require("../../../utils/schemaParsing");
const descriptions_1 = require("../../../utils/descriptions");
class ToolWorkflow {
    constructor() {
        this.description = {
            displayName: 'Custom n8n Workflow Tool',
            name: 'toolWorkflow',
            icon: 'fa:network-wired',
            group: ['transform'],
            version: [1, 1.1],
            description: 'Uses another n8n workflow as a tool. Allows packaging any n8n node(s) as a tool.',
            defaults: {
                name: 'Custom n8n Workflow Tool',
            },
            codex: {
                categories: ['AI'],
                subcategories: {
                    AI: ['Tools'],
                },
                resources: {
                    primaryDocumentation: [
                        {
                            url: 'https://docs.n8n.io/integrations/builtin/cluster-nodes/sub-nodes/n8n-nodes-langchain.toolworkflow/',
                        },
                    ],
                },
            },
            inputs: [],
            outputs: ["ai_tool"],
            outputNames: ['Tool'],
            properties: [
                (0, sharedFields_1.getConnectionHintNoticeField)(["ai_agent"]),
                {
                    displayName: 'See an example of a workflow to suggest meeting slots using AI <a href="/templates/1953" target="_blank">here</a>.',
                    name: 'noticeTemplateExample',
                    type: 'notice',
                    default: '',
                },
                {
                    displayName: 'Name',
                    name: 'name',
                    type: 'string',
                    default: '',
                    placeholder: 'My_Color_Tool',
                    displayOptions: {
                        show: {
                            '@version': [1],
                        },
                    },
                },
                {
                    displayName: 'Name',
                    name: 'name',
                    type: 'string',
                    default: '',
                    placeholder: 'e.g. My_Color_Tool',
                    validateType: 'string-alphanumeric',
                    description: 'The name of the function to be called, could contain letters, numbers, and underscores only',
                    displayOptions: {
                        show: {
                            '@version': [{ _cnd: { gte: 1.1 } }],
                        },
                    },
                },
                {
                    displayName: 'Description',
                    name: 'description',
                    type: 'string',
                    default: '',
                    placeholder: 'Call this tool to get a random color. The input should be a string with comma separted names of colors to exclude.',
                    typeOptions: {
                        rows: 3,
                    },
                },
                {
                    displayName: 'This tool will call the workflow you define below, and look in the last node for the response. The workflow needs to start with an Execute Workflow trigger',
                    name: 'executeNotice',
                    type: 'notice',
                    default: '',
                },
                {
                    displayName: 'Source',
                    name: 'source',
                    type: 'options',
                    options: [
                        {
                            name: 'Database',
                            value: 'database',
                            description: 'Load the workflow from the database by ID',
                        },
                        {
                            name: 'Define Below',
                            value: 'parameter',
                            description: 'Pass the JSON code of a workflow',
                        },
                    ],
                    default: 'database',
                    description: 'Where to get the workflow to execute from',
                },
                {
                    displayName: 'Workflow ID',
                    name: 'workflowId',
                    type: 'string',
                    displayOptions: {
                        show: {
                            source: ['database'],
                        },
                    },
                    default: '',
                    required: true,
                    description: 'The workflow to execute',
                    hint: 'Can be found in the URL of the workflow',
                },
                {
                    displayName: 'Workflow JSON',
                    name: 'workflowJson',
                    type: 'json',
                    typeOptions: {
                        rows: 10,
                    },
                    displayOptions: {
                        show: {
                            source: ['parameter'],
                        },
                    },
                    default: '\n\n\n\n\n\n\n\n\n',
                    required: true,
                    description: 'The workflow JSON code to execute',
                },
                {
                    displayName: 'Field to Return',
                    name: 'responsePropertyName',
                    type: 'string',
                    default: 'response',
                    required: true,
                    hint: 'The field in the last-executed node of the workflow that contains the response',
                    description: 'Where to find the data that this tool should return. n8n will look in the output of the last-executed node of the workflow for a field with this name, and return its value.',
                },
                {
                    displayName: 'Extra Workflow Inputs',
                    name: 'fields',
                    placeholder: 'Add Value',
                    type: 'fixedCollection',
                    description: "These will be output by the 'execute workflow' trigger of the workflow being called",
                    typeOptions: {
                        multipleValues: true,
                        sortable: true,
                    },
                    default: {},
                    options: [
                        {
                            name: 'values',
                            displayName: 'Values',
                            values: [
                                {
                                    displayName: 'Name',
                                    name: 'name',
                                    type: 'string',
                                    default: '',
                                    placeholder: 'e.g. fieldName',
                                    description: 'Name of the field to set the value of. Supports dot-notation. Example: data.person[0].name.',
                                    requiresDataPath: 'single',
                                },
                                {
                                    displayName: 'Type',
                                    name: 'type',
                                    type: 'options',
                                    description: 'The field value type',
                                    options: [
                                        {
                                            name: 'String',
                                            value: 'stringValue',
                                        },
                                        {
                                            name: 'Number',
                                            value: 'numberValue',
                                        },
                                        {
                                            name: 'Boolean',
                                            value: 'booleanValue',
                                        },
                                        {
                                            name: 'Array',
                                            value: 'arrayValue',
                                        },
                                        {
                                            name: 'Object',
                                            value: 'objectValue',
                                        },
                                    ],
                                    default: 'stringValue',
                                },
                                {
                                    displayName: 'Value',
                                    name: 'stringValue',
                                    type: 'string',
                                    default: '',
                                    displayOptions: {
                                        show: {
                                            type: ['stringValue'],
                                        },
                                    },
                                    validateType: 'string',
                                    ignoreValidationDuringExecution: true,
                                },
                                {
                                    displayName: 'Value',
                                    name: 'numberValue',
                                    type: 'string',
                                    default: '',
                                    displayOptions: {
                                        show: {
                                            type: ['numberValue'],
                                        },
                                    },
                                    validateType: 'number',
                                    ignoreValidationDuringExecution: true,
                                },
                                {
                                    displayName: 'Value',
                                    name: 'booleanValue',
                                    type: 'options',
                                    default: 'true',
                                    options: [
                                        {
                                            name: 'True',
                                            value: 'true',
                                        },
                                        {
                                            name: 'False',
                                            value: 'false',
                                        },
                                    ],
                                    displayOptions: {
                                        show: {
                                            type: ['booleanValue'],
                                        },
                                    },
                                    validateType: 'boolean',
                                    ignoreValidationDuringExecution: true,
                                },
                                {
                                    displayName: 'Value',
                                    name: 'arrayValue',
                                    type: 'string',
                                    default: '',
                                    placeholder: 'e.g. [ arrayItem1, arrayItem2, arrayItem3 ]',
                                    displayOptions: {
                                        show: {
                                            type: ['arrayValue'],
                                        },
                                    },
                                    validateType: 'array',
                                    ignoreValidationDuringExecution: true,
                                },
                                {
                                    displayName: 'Value',
                                    name: 'objectValue',
                                    type: 'json',
                                    default: '={}',
                                    typeOptions: {
                                        rows: 2,
                                    },
                                    displayOptions: {
                                        show: {
                                            type: ['objectValue'],
                                        },
                                    },
                                    validateType: 'object',
                                    ignoreValidationDuringExecution: true,
                                },
                            ],
                        },
                    ],
                },
                {
                    displayName: 'Specify Input Schema',
                    name: 'specifyInputSchema',
                    type: 'boolean',
                    description: 'Whether to specify the schema for the function. This would require the LLM to provide the input in the correct format and would validate it against the schema.',
                    noDataExpression: true,
                    default: false,
                },
                { ...descriptions_1.schemaTypeField, displayOptions: { show: { specifyInputSchema: [true] } } },
                descriptions_1.jsonSchemaExampleField,
                descriptions_1.inputSchemaField,
            ],
        };
    }
    async supplyData(itemIndex) {
        const name = this.getNodeParameter('name', itemIndex);
        const description = this.getNodeParameter('description', itemIndex);
        const useSchema = this.getNodeParameter('specifyInputSchema', itemIndex);
        let tool = undefined;
        const runFunction = async (query, runManager) => {
            const source = this.getNodeParameter('source', itemIndex);
            const responsePropertyName = this.getNodeParameter('responsePropertyName', itemIndex);
            if (!responsePropertyName) {
                throw new n8n_workflow_1.NodeOperationError(this.getNode(), "Field to return can't be empty", {
                    itemIndex,
                    description: 'Enter the name of a field in the last node of the workflow that contains the response to return',
                });
            }
            const workflowInfo = {};
            if (source === 'database') {
                workflowInfo.id = this.getNodeParameter('workflowId', itemIndex);
            }
            else if (source === 'parameter') {
                const workflowJson = this.getNodeParameter('workflowJson', itemIndex);
                try {
                    workflowInfo.code = JSON.parse(workflowJson);
                }
                catch (error) {
                    throw new n8n_workflow_1.NodeOperationError(this.getNode(), `The provided workflow is not valid JSON: "${error.message}"`, {
                        itemIndex,
                    });
                }
            }
            const rawData = { query };
            const workflowFieldsJson = this.getNodeParameter('fields.values', itemIndex, [], {
                rawExpressions: true,
            });
            for (const entry of workflowFieldsJson) {
                if (entry.type === 'objectValue' && entry.objectValue.startsWith('=')) {
                    rawData[entry.name] = entry.objectValue.replace(/^=+/, '');
                }
            }
            const options = {
                include: 'all',
            };
            const newItem = await manual.execute.call(this, { json: { query } }, itemIndex, options, rawData, this.getNode());
            const items = [newItem];
            let receivedData;
            try {
                receivedData = (await this.executeWorkflow(workflowInfo, items, runManager === null || runManager === void 0 ? void 0 : runManager.getChild()));
            }
            catch (error) {
                throw new n8n_workflow_1.NodeOperationError(this.getNode(), error);
            }
            const response = (0, get_1.default)(receivedData, [
                0,
                0,
                'json',
                responsePropertyName,
            ]);
            if (response === undefined) {
                throw new n8n_workflow_1.NodeOperationError(this.getNode(), `There was an error: "The workflow did not return an item with the property '${responsePropertyName}'"`);
            }
            return response;
        };
        const toolHandler = async (query, runManager) => {
            const { index } = this.addInputData("ai_tool", [[{ json: { query } }]]);
            let response = '';
            let executionError;
            try {
                response = await runFunction(query, runManager);
            }
            catch (error) {
                executionError = error;
                response = `There was an error: "${error.message}"`;
            }
            if (typeof response === 'number') {
                response = response.toString();
            }
            if ((0, isObject_1.default)(response)) {
                response = JSON.stringify(response, null, 2);
            }
            if (typeof response !== 'string') {
                executionError = new n8n_workflow_1.NodeOperationError(this.getNode(), 'Wrong output type returned', {
                    description: `The response property should be a string, but it is an ${typeof response}`,
                });
                response = `There was an error: "${executionError.message}"`;
            }
            if (executionError) {
                void this.addOutputData("ai_tool", index, executionError);
            }
            else {
                void this.addOutputData("ai_tool", index, [[{ json: { response } }]]);
            }
            return response;
        };
        const functionBase = {
            name,
            description,
            func: toolHandler,
        };
        if (useSchema) {
            try {
                const jsonExample = this.getNodeParameter('jsonSchemaExample', itemIndex, '');
                const inputSchema = this.getNodeParameter('inputSchema', itemIndex, '');
                const schemaType = this.getNodeParameter('schemaType', itemIndex);
                const jsonSchema = schemaType === 'fromJson'
                    ? (0, schemaParsing_1.generateSchema)(jsonExample)
                    : (0, n8n_workflow_1.jsonParse)(inputSchema);
                const zodSchemaSandbox = (0, schemaParsing_1.getSandboxWithZod)(this, jsonSchema, 0);
                const zodSchema = (await zodSchemaSandbox.runCode());
                tool = new tools_1.DynamicStructuredTool({
                    schema: zodSchema,
                    ...functionBase,
                });
            }
            catch (error) {
                throw new n8n_workflow_1.NodeOperationError(this.getNode(), 'Error during parsing of JSON Schema. \n ' + error);
            }
        }
        else {
            tool = new tools_1.DynamicTool(functionBase);
        }
        return {
            response: tool,
        };
    }
}
exports.ToolWorkflow = ToolWorkflow;
//# sourceMappingURL=ToolWorkflow.node.js.map