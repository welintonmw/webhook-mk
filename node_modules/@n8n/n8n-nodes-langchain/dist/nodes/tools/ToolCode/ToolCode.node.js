"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ToolCode = void 0;
const n8n_workflow_1 = require("n8n-workflow");
const Sandbox_1 = require("n8n-nodes-base/dist/nodes/Code/Sandbox");
const JavaScriptSandbox_1 = require("n8n-nodes-base/dist/nodes/Code/JavaScriptSandbox");
const PythonSandbox_1 = require("n8n-nodes-base/dist/nodes/Code/PythonSandbox");
const tools_1 = require("@langchain/core/tools");
const sharedFields_1 = require("../../../utils/sharedFields");
class ToolCode {
    constructor() {
        this.description = {
            displayName: 'Custom Code Tool',
            name: 'toolCode',
            icon: 'fa:code',
            group: ['transform'],
            version: [1, 1.1],
            description: 'Write a tool in JS or Python',
            defaults: {
                name: 'Custom Code Tool',
            },
            codex: {
                categories: ['AI'],
                subcategories: {
                    AI: ['Tools'],
                },
                resources: {
                    primaryDocumentation: [
                        {
                            url: 'https://docs.n8n.io/integrations/builtin/cluster-nodes/sub-nodes/n8n-nodes-langchain.toolcode/',
                        },
                    ],
                },
            },
            inputs: [],
            outputs: ["ai_tool"],
            outputNames: ['Tool'],
            properties: [
                (0, sharedFields_1.getConnectionHintNoticeField)(["ai_agent"]),
                {
                    displayName: 'See an example of a conversational agent with custom tool written in JavaScript <a href="/templates/1963" target="_blank">here</a>.',
                    name: 'noticeTemplateExample',
                    type: 'notice',
                    default: '',
                },
                {
                    displayName: 'Name',
                    name: 'name',
                    type: 'string',
                    default: '',
                    placeholder: 'My_Tool',
                    displayOptions: {
                        show: {
                            '@version': [1],
                        },
                    },
                },
                {
                    displayName: 'Name',
                    name: 'name',
                    type: 'string',
                    default: '',
                    placeholder: 'e.g. My_Tool',
                    validateType: 'string-alphanumeric',
                    description: 'The name of the function to be called, could contain letters, numbers, and underscores only',
                    displayOptions: {
                        show: {
                            '@version': [{ _cnd: { gte: 1.1 } }],
                        },
                    },
                },
                {
                    displayName: 'Description',
                    name: 'description',
                    type: 'string',
                    default: '',
                    placeholder: 'Call this tool to get a random color. The input should be a string with comma separted names of colors to exclude.',
                    typeOptions: {
                        rows: 3,
                    },
                },
                {
                    displayName: 'Language',
                    name: 'language',
                    type: 'options',
                    noDataExpression: true,
                    options: [
                        {
                            name: 'JavaScript',
                            value: 'javaScript',
                        },
                        {
                            name: 'Python (Beta)',
                            value: 'python',
                        },
                    ],
                    default: 'javaScript',
                },
                {
                    displayName: 'JavaScript',
                    name: 'jsCode',
                    type: 'string',
                    displayOptions: {
                        show: {
                            language: ['javaScript'],
                        },
                    },
                    typeOptions: {
                        editor: 'jsEditor',
                    },
                    default: '// Example: convert the incoming query to uppercase and return it\nreturn query.toUpperCase()',
                    hint: 'You can access the input the tool receives via the input property "query". The returned value should be a single string.',
                    description: 'E.g. Converts any text to uppercase',
                    noDataExpression: true,
                },
                {
                    displayName: 'Python',
                    name: 'pythonCode',
                    type: 'string',
                    displayOptions: {
                        show: {
                            language: ['python'],
                        },
                    },
                    typeOptions: {
                        editor: 'codeNodeEditor',
                        editorLanguage: 'python',
                    },
                    default: '# Example: convert the incoming query to uppercase and return it\nreturn query.upper()',
                    hint: 'You can access the input the tool receives via the input property "query". The returned value should be a single string.',
                    description: 'E.g. Converts any text to uppercase',
                    noDataExpression: true,
                },
            ],
        };
    }
    async supplyData(itemIndex) {
        const node = this.getNode();
        const workflowMode = this.getMode();
        const name = this.getNodeParameter('name', itemIndex);
        const description = this.getNodeParameter('description', itemIndex);
        const language = this.getNodeParameter('language', itemIndex);
        let code = '';
        if (language === 'javaScript') {
            code = this.getNodeParameter('jsCode', itemIndex);
        }
        else {
            code = this.getNodeParameter('pythonCode', itemIndex);
        }
        const getSandbox = (query, index = 0) => {
            const context = Sandbox_1.getSandboxContext.call(this, index);
            context.query = query;
            let sandbox;
            if (language === 'javaScript') {
                sandbox = new JavaScriptSandbox_1.JavaScriptSandbox(context, code, index, this.helpers);
            }
            else {
                sandbox = new PythonSandbox_1.PythonSandbox(context, code, index, this.helpers);
            }
            sandbox.on('output', workflowMode === 'manual'
                ? this.sendMessageToUI.bind(this)
                : (...args) => console.log(`[Workflow "${this.getWorkflow().id}"][Node "${node.name}"]`, ...args));
            return sandbox;
        };
        const runFunction = async (query) => {
            const sandbox = getSandbox(query, itemIndex);
            return await sandbox.runCode();
        };
        return {
            response: new tools_1.DynamicTool({
                name,
                description,
                func: async (query) => {
                    const { index } = this.addInputData("ai_tool", [[{ json: { query } }]]);
                    let response = '';
                    let executionError;
                    try {
                        response = await runFunction(query);
                    }
                    catch (error) {
                        executionError = error;
                        response = `There was an error: "${executionError.message}"`;
                    }
                    if (typeof response === 'number') {
                        response = response.toString();
                    }
                    if (typeof response !== 'string') {
                        executionError = new n8n_workflow_1.NodeOperationError(this.getNode(), 'Wrong output type returned', {
                            description: `The response property should be a string, but it is an ${typeof response}`,
                        });
                        response = `There was an error: "${executionError.message}"`;
                    }
                    if (executionError) {
                        void this.addOutputData("ai_tool", index, executionError);
                    }
                    else {
                        void this.addOutputData("ai_tool", index, [[{ json: { response } }]]);
                    }
                    return response;
                },
            }),
        };
    }
}
exports.ToolCode = ToolCode;
//# sourceMappingURL=ToolCode.node.js.map