"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.LmChatAzureOpenAi = void 0;
const openai_1 = require("@langchain/openai");
const sharedFields_1 = require("../../../utils/sharedFields");
const N8nLlmTracing_1 = require("../N8nLlmTracing");
class LmChatAzureOpenAi {
    constructor() {
        this.description = {
            displayName: 'Azure OpenAI Chat Model',
            name: 'lmChatAzureOpenAi',
            icon: 'file:azure.svg',
            group: ['transform'],
            version: 1,
            description: 'For advanced usage with an AI chain',
            defaults: {
                name: 'Azure OpenAI Chat Model',
            },
            codex: {
                categories: ['AI'],
                subcategories: {
                    AI: ['Language Models'],
                },
                resources: {
                    primaryDocumentation: [
                        {
                            url: 'https://docs.n8n.io/integrations/builtin/cluster-nodes/sub-nodes/n8n-nodes-langchain.lmchatazureopenai/',
                        },
                    ],
                },
            },
            inputs: [],
            outputs: ["ai_languageModel"],
            outputNames: ['Model'],
            credentials: [
                {
                    name: 'azureOpenAiApi',
                    required: true,
                },
            ],
            properties: [
                (0, sharedFields_1.getConnectionHintNoticeField)(["ai_chain", "ai_agent"]),
                {
                    displayName: 'Model (Deployment) Name',
                    name: 'model',
                    type: 'string',
                    description: 'The name of the model(deployment) to use',
                    default: '',
                },
                {
                    displayName: 'Options',
                    name: 'options',
                    placeholder: 'Add Option',
                    description: 'Additional options to add',
                    type: 'collection',
                    default: {},
                    options: [
                        {
                            displayName: 'Frequency Penalty',
                            name: 'frequencyPenalty',
                            default: 0,
                            typeOptions: { maxValue: 2, minValue: -2, numberPrecision: 1 },
                            description: "Positive values penalize new tokens based on their existing frequency in the text so far, decreasing the model's likelihood to repeat the same line verbatim",
                            type: 'number',
                        },
                        {
                            displayName: 'Maximum Number of Tokens',
                            name: 'maxTokens',
                            default: -1,
                            description: 'The maximum number of tokens to generate in the completion. Most models have a context length of 2048 tokens (except for the newest models, which support 32,768).',
                            type: 'number',
                            typeOptions: {
                                maxValue: 32768,
                            },
                        },
                        {
                            displayName: 'Presence Penalty',
                            name: 'presencePenalty',
                            default: 0,
                            typeOptions: { maxValue: 2, minValue: -2, numberPrecision: 1 },
                            description: "Positive values penalize new tokens based on whether they appear in the text so far, increasing the model's likelihood to talk about new topics",
                            type: 'number',
                        },
                        {
                            displayName: 'Sampling Temperature',
                            name: 'temperature',
                            default: 0.7,
                            typeOptions: { maxValue: 1, minValue: 0, numberPrecision: 1 },
                            description: 'Controls randomness: Lowering results in less random completions. As the temperature approaches zero, the model will become deterministic and repetitive.',
                            type: 'number',
                        },
                        {
                            displayName: 'Timeout',
                            name: 'timeout',
                            default: 60000,
                            description: 'Maximum amount of time a request is allowed to take in milliseconds',
                            type: 'number',
                        },
                        {
                            displayName: 'Max Retries',
                            name: 'maxRetries',
                            default: 2,
                            description: 'Maximum number of retries to attempt',
                            type: 'number',
                        },
                        {
                            displayName: 'Top P',
                            name: 'topP',
                            default: 1,
                            typeOptions: { maxValue: 1, minValue: 0, numberPrecision: 1 },
                            description: 'Controls diversity via nucleus sampling: 0.5 means half of all likelihood-weighted options are considered. We generally recommend altering this or temperature but not both.',
                            type: 'number',
                        },
                    ],
                },
            ],
        };
    }
    async supplyData(itemIndex) {
        var _a, _b;
        const credentials = (await this.getCredentials('azureOpenAiApi'));
        const modelName = this.getNodeParameter('model', itemIndex);
        const options = this.getNodeParameter('options', itemIndex, {});
        const configuration = {};
        const model = new openai_1.ChatOpenAI({
            azureOpenAIApiDeploymentName: modelName,
            azureOpenAIApiInstanceName: credentials.resourceName,
            azureOpenAIApiKey: credentials.apiKey,
            azureOpenAIApiVersion: credentials.apiVersion,
            ...options,
            timeout: (_a = options.timeout) !== null && _a !== void 0 ? _a : 60000,
            maxRetries: (_b = options.maxRetries) !== null && _b !== void 0 ? _b : 2,
            configuration,
            callbacks: [new N8nLlmTracing_1.N8nLlmTracing(this)],
        });
        return {
            response: model,
        };
    }
}
exports.LmChatAzureOpenAi = LmChatAzureOpenAi;
//# sourceMappingURL=LmChatAzureOpenAi.node.js.map