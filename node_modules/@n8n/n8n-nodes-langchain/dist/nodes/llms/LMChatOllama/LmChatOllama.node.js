"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.LmChatOllama = void 0;
const ollama_1 = require("@langchain/community/chat_models/ollama");
const sharedFields_1 = require("../../../utils/sharedFields");
const description_1 = require("../LMOllama/description");
const N8nLlmTracing_1 = require("../N8nLlmTracing");
class LmChatOllama {
    constructor() {
        this.description = {
            displayName: 'Ollama Chat Model',
            name: 'lmChatOllama',
            icon: 'file:ollama.svg',
            group: ['transform'],
            version: 1,
            description: 'Language Model Ollama',
            defaults: {
                name: 'Ollama Chat Model',
            },
            codex: {
                categories: ['AI'],
                subcategories: {
                    AI: ['Language Models'],
                },
                resources: {
                    primaryDocumentation: [
                        {
                            url: 'https://docs.n8n.io/integrations/builtin/cluster-nodes/sub-nodes/n8n-nodes-langchain.lmchatollama/',
                        },
                    ],
                },
            },
            inputs: [],
            outputs: ["ai_languageModel"],
            outputNames: ['Model'],
            ...description_1.ollamaDescription,
            properties: [
                (0, sharedFields_1.getConnectionHintNoticeField)(["ai_chain", "ai_agent"]),
                description_1.ollamaModel,
                description_1.ollamaOptions,
            ],
        };
    }
    async supplyData(itemIndex) {
        const credentials = await this.getCredentials('ollamaApi');
        const modelName = this.getNodeParameter('model', itemIndex);
        const options = this.getNodeParameter('options', itemIndex, {});
        const model = new ollama_1.ChatOllama({
            ...options,
            baseUrl: credentials.baseUrl,
            model: modelName,
            format: options.format === 'default' ? undefined : options.format,
            callbacks: [new N8nLlmTracing_1.N8nLlmTracing(this)],
        });
        return {
            response: model,
        };
    }
}
exports.LmChatOllama = LmChatOllama;
//# sourceMappingURL=LmChatOllama.node.js.map