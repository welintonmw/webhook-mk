"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.LmChatGroq = void 0;
const groq_1 = require("@langchain/groq");
const sharedFields_1 = require("../../../utils/sharedFields");
const N8nLlmTracing_1 = require("../N8nLlmTracing");
class LmChatGroq {
    constructor() {
        this.description = {
            displayName: 'Groq Chat Model',
            name: 'lmChatGroq',
            icon: 'file:groq.svg',
            group: ['transform'],
            version: 1,
            description: 'Language Model Groq',
            defaults: {
                name: 'Groq Chat Model',
            },
            codex: {
                categories: ['AI'],
                subcategories: {
                    AI: ['Language Models'],
                },
                resources: {
                    primaryDocumentation: [
                        {
                            url: 'https://docs.n8n.io/integrations/builtin/cluster-nodes/sub-nodes/n8n-nodes-langchain.lmchatgroq/',
                        },
                    ],
                },
            },
            inputs: [],
            outputs: ["ai_languageModel"],
            outputNames: ['Model'],
            credentials: [
                {
                    name: 'groqApi',
                    required: true,
                },
            ],
            requestDefaults: {
                baseURL: 'https://api.groq.com/openai/v1',
            },
            properties: [
                (0, sharedFields_1.getConnectionHintNoticeField)(["ai_chain", "ai_chain"]),
                {
                    displayName: 'Model',
                    name: 'model',
                    type: 'options',
                    typeOptions: {
                        loadOptions: {
                            routing: {
                                request: {
                                    method: 'GET',
                                    url: '/models',
                                },
                                output: {
                                    postReceive: [
                                        {
                                            type: 'rootProperty',
                                            properties: {
                                                property: 'data',
                                            },
                                        },
                                        {
                                            type: 'filter',
                                            properties: {
                                                pass: '={{ $responseItem.active === true && $responseItem.object === "model" }}',
                                            },
                                        },
                                        {
                                            type: 'setKeyValue',
                                            properties: {
                                                name: '={{$responseItem.id}}',
                                                value: '={{$responseItem.id}}',
                                            },
                                        },
                                    ],
                                },
                            },
                        },
                    },
                    routing: {
                        send: {
                            type: 'body',
                            property: 'model',
                        },
                    },
                    description: 'The model which will generate the completion. <a href="https://console.groq.com/docs/models">Learn more</a>.',
                    default: 'llama3-8b-8192',
                },
                {
                    displayName: 'Options',
                    name: 'options',
                    placeholder: 'Add Option',
                    description: 'Additional options to add',
                    type: 'collection',
                    default: {},
                    options: [
                        {
                            displayName: 'Maximum Number of Tokens',
                            name: 'maxTokensToSample',
                            default: 4096,
                            description: 'The maximum number of tokens to generate in the completion',
                            type: 'number',
                        },
                        {
                            displayName: 'Sampling Temperature',
                            name: 'temperature',
                            default: 0.7,
                            typeOptions: { maxValue: 1, minValue: 0, numberPrecision: 1 },
                            description: 'Controls randomness: Lowering results in less random completions. As the temperature approaches zero, the model will become deterministic and repetitive.',
                            type: 'number',
                        },
                    ],
                },
            ],
        };
    }
    async supplyData(itemIndex) {
        const credentials = await this.getCredentials('groqApi');
        const modelName = this.getNodeParameter('model', itemIndex);
        const options = this.getNodeParameter('options', itemIndex, {});
        const model = new groq_1.ChatGroq({
            apiKey: credentials.apiKey,
            modelName,
            maxTokens: options.maxTokensToSample,
            temperature: options.temperature,
            callbacks: [new N8nLlmTracing_1.N8nLlmTracing(this)],
        });
        return {
            response: model,
        };
    }
}
exports.LmChatGroq = LmChatGroq;
//# sourceMappingURL=LmChatGroq.node.js.map