"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.RetrieverMultiQuery = void 0;
const multi_query_1 = require("langchain/retrievers/multi_query");
const logWrapper_1 = require("../../../utils/logWrapper");
class RetrieverMultiQuery {
    constructor() {
        this.description = {
            displayName: 'MultiQuery Retriever',
            name: 'retrieverMultiQuery',
            icon: 'fa:box-open',
            group: ['transform'],
            version: 1,
            description: 'Automates prompt tuning, generates diverse queries and expands document pool for enhanced retrieval.',
            defaults: {
                name: 'MultiQuery Retriever',
            },
            codex: {
                categories: ['AI'],
                subcategories: {
                    AI: ['Retrievers'],
                },
                resources: {
                    primaryDocumentation: [
                        {
                            url: 'https://docs.n8n.io/integrations/builtin/cluster-nodes/sub-nodes/n8n-nodes-langchain.retrievermultiquery/',
                        },
                    ],
                },
            },
            inputs: [
                {
                    displayName: 'Model',
                    maxConnections: 1,
                    type: "ai_languageModel",
                    required: true,
                },
                {
                    displayName: 'Retriever',
                    maxConnections: 1,
                    type: "ai_retriever",
                    required: true,
                },
            ],
            outputs: [
                {
                    displayName: 'Retriever',
                    maxConnections: 1,
                    type: "ai_retriever",
                },
            ],
            properties: [
                {
                    displayName: 'Options',
                    name: 'options',
                    placeholder: 'Add Option',
                    description: 'Additional options to add',
                    type: 'collection',
                    default: {},
                    options: [
                        {
                            displayName: 'Query Count',
                            name: 'queryCount',
                            default: 3,
                            typeOptions: { minValue: 1 },
                            description: 'Number of different versions of the given question to generate',
                            type: 'number',
                        },
                    ],
                },
            ],
        };
    }
    async supplyData(itemIndex) {
        this.logger.verbose('Supplying data for MultiQuery Retriever');
        const options = this.getNodeParameter('options', itemIndex, {});
        const model = (await this.getInputConnectionData("ai_languageModel", itemIndex));
        const baseRetriever = (await this.getInputConnectionData("ai_retriever", itemIndex));
        const retriever = multi_query_1.MultiQueryRetriever.fromLLM({
            llm: model,
            retriever: baseRetriever,
            ...options,
        });
        return {
            response: (0, logWrapper_1.logWrapper)(retriever, this),
        };
    }
}
exports.RetrieverMultiQuery = RetrieverMultiQuery;
//# sourceMappingURL=RetrieverMultiQuery.node.js.map