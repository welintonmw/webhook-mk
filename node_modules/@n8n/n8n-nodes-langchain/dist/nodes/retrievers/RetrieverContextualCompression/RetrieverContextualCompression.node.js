"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.RetrieverContextualCompression = void 0;
const contextual_compression_1 = require("langchain/retrievers/contextual_compression");
const chain_extract_1 = require("langchain/retrievers/document_compressors/chain_extract");
const logWrapper_1 = require("../../../utils/logWrapper");
class RetrieverContextualCompression {
    constructor() {
        this.description = {
            displayName: 'Contextual Compression Retriever',
            name: 'retrieverContextualCompression',
            icon: 'fa:box-open',
            group: ['transform'],
            version: 1,
            description: 'Enhances document similarity search by contextual compression.',
            defaults: {
                name: 'Contextual Compression Retriever',
            },
            codex: {
                categories: ['AI'],
                subcategories: {
                    AI: ['Retrievers'],
                },
                resources: {
                    primaryDocumentation: [
                        {
                            url: 'https://docs.n8n.io/integrations/builtin/cluster-nodes/sub-nodes/n8n-nodes-langchain.retrievercontextualcompression/',
                        },
                    ],
                },
            },
            inputs: [
                {
                    displayName: 'Model',
                    maxConnections: 1,
                    type: "ai_languageModel",
                    required: true,
                },
                {
                    displayName: 'Retriever',
                    maxConnections: 1,
                    type: "ai_retriever",
                    required: true,
                },
            ],
            outputs: [
                {
                    displayName: 'Retriever',
                    maxConnections: 1,
                    type: "ai_retriever",
                },
            ],
            properties: [],
        };
    }
    async supplyData(itemIndex) {
        this.logger.verbose('Supplying data for Contextual Compression Retriever');
        const model = (await this.getInputConnectionData("ai_languageModel", itemIndex));
        const baseRetriever = (await this.getInputConnectionData("ai_retriever", itemIndex));
        const baseCompressor = chain_extract_1.LLMChainExtractor.fromLLM(model);
        const retriever = new contextual_compression_1.ContextualCompressionRetriever({
            baseCompressor,
            baseRetriever,
        });
        return {
            response: (0, logWrapper_1.logWrapper)(retriever, this),
        };
    }
}
exports.RetrieverContextualCompression = RetrieverContextualCompression;
//# sourceMappingURL=RetrieverContextualCompression.node.js.map