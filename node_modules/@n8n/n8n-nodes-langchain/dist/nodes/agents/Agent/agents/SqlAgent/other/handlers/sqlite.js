"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getSqliteDataSource = void 0;
const fs = __importStar(require("fs"));
const n8n_workflow_1 = require("n8n-workflow");
const temp = __importStar(require("temp"));
const sqlite3 = __importStar(require("sqlite3"));
const typeorm_1 = require("@n8n/typeorm");
async function getSqliteDataSource(binary, binaryPropertyName = 'data') {
    const binaryData = binary === null || binary === void 0 ? void 0 : binary[binaryPropertyName];
    if (!binaryData) {
        throw new n8n_workflow_1.NodeOperationError(this.getNode(), 'No binary data received.');
    }
    let fileBase64;
    if (binaryData.id) {
        const chunkSize = 256 * 1024;
        const stream = await this.helpers.getBinaryStream(binaryData.id, chunkSize);
        const buffer = await this.helpers.binaryToBuffer(stream);
        fileBase64 = buffer.toString('base64');
    }
    else {
        fileBase64 = binaryData.data;
    }
    const bufferString = Buffer.from(fileBase64, n8n_workflow_1.BINARY_ENCODING);
    temp.track();
    const tempDbPath = temp.path({ suffix: '.sqlite' });
    fs.writeFileSync(tempDbPath, bufferString);
    const tempDb = new sqlite3.Database(tempDbPath, (error) => {
        if (error) {
            throw new n8n_workflow_1.NodeOperationError(this.getNode(), 'Could not connect to database');
        }
    });
    tempDb.close();
    return new typeorm_1.DataSource({
        type: 'sqlite',
        database: tempDbPath,
    });
}
exports.getSqliteDataSource = getSqliteDataSource;
//# sourceMappingURL=sqlite.js.map