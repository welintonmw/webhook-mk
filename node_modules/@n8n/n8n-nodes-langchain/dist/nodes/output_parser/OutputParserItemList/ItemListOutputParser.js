"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ItemListOutputParser = void 0;
const output_parsers_1 = require("@langchain/core/output_parsers");
class ItemListOutputParser extends output_parsers_1.BaseOutputParser {
    constructor(options) {
        var _a;
        super();
        this.lc_namespace = ['n8n-nodes-langchain', 'output_parsers', 'list_items'];
        if (options.numberOfItems && options.numberOfItems > 0) {
            this.numberOfItems = options.numberOfItems;
        }
        this.separator = (_a = options.separator) !== null && _a !== void 0 ? _a : '\\n';
        if (this.separator === '\\n') {
            this.separator = '\n';
        }
    }
    async parse(text) {
        const response = text
            .split(this.separator)
            .map((item) => item.trim())
            .filter((item) => item);
        if (this.numberOfItems && response.length < this.numberOfItems) {
            throw new output_parsers_1.OutputParserException(`Wrong number of items returned. Expected ${this.numberOfItems} items but got ${response.length} items instead.`);
        }
        return response.slice(0, this.numberOfItems);
    }
    getFormatInstructions() {
        var _a;
        const instructions = `Your response should be a list of ${this.numberOfItems ? this.numberOfItems + ' ' : ''}items separated by`;
        const numberOfExamples = (_a = this.numberOfItems) !== null && _a !== void 0 ? _a : 3;
        const examples = [];
        for (let i = 1; i <= numberOfExamples; i++) {
            examples.push(`item${i}`);
        }
        return `${instructions} "${this.separator}" (for example: "${examples.join(this.separator)}")`;
    }
}
exports.ItemListOutputParser = ItemListOutputParser;
//# sourceMappingURL=ItemListOutputParser.js.map