"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.OutputParserAutofixing = void 0;
const output_parsers_1 = require("langchain/output_parsers");
const logWrapper_1 = require("../../../utils/logWrapper");
const sharedFields_1 = require("../../../utils/sharedFields");
class OutputParserAutofixing {
    constructor() {
        this.description = {
            displayName: 'Auto-fixing Output Parser',
            name: 'outputParserAutofixing',
            icon: 'fa:tools',
            group: ['transform'],
            version: 1,
            description: 'Automatically fix the output if it is not in the correct format',
            defaults: {
                name: 'Auto-fixing Output Parser',
            },
            codex: {
                categories: ['AI'],
                subcategories: {
                    AI: ['Output Parsers'],
                },
                resources: {
                    primaryDocumentation: [
                        {
                            url: 'https://docs.n8n.io/integrations/builtin/cluster-nodes/sub-nodes/n8n-nodes-langchain.outputparserautofixing/',
                        },
                    ],
                },
            },
            inputs: [
                {
                    displayName: 'Model',
                    maxConnections: 1,
                    type: "ai_languageModel",
                    required: true,
                },
                {
                    displayName: 'Output Parser',
                    maxConnections: 1,
                    required: true,
                    type: "ai_outputParser",
                },
            ],
            outputs: ["ai_outputParser"],
            outputNames: ['Output Parser'],
            properties: [
                {
                    displayName: 'This node wraps another output parser. If the first one fails it calls an LLM to fix the format',
                    name: 'info',
                    type: 'notice',
                    default: '',
                },
                (0, sharedFields_1.getConnectionHintNoticeField)(["ai_chain", "ai_agent"]),
            ],
        };
    }
    async supplyData(itemIndex) {
        const model = (await this.getInputConnectionData("ai_languageModel", itemIndex));
        const outputParser = (await this.getInputConnectionData("ai_outputParser", itemIndex));
        const parser = output_parsers_1.OutputFixingParser.fromLLM(model, outputParser);
        return {
            response: (0, logWrapper_1.logWrapper)(parser, this),
        };
    }
}
exports.OutputParserAutofixing = OutputParserAutofixing;
//# sourceMappingURL=OutputParserAutofixing.node.js.map