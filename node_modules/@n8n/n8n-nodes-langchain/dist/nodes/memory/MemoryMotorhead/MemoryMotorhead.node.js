"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.MemoryMotorhead = void 0;
const motorhead_memory_1 = require("@langchain/community/memory/motorhead_memory");
const logWrapper_1 = require("../../../utils/logWrapper");
const sharedFields_1 = require("../../../utils/sharedFields");
const descriptions_1 = require("../descriptions");
const helpers_1 = require("../../../utils/helpers");
class MemoryMotorhead {
    constructor() {
        this.description = {
            displayName: 'Motorhead',
            name: 'memoryMotorhead',
            icon: 'fa:file-export',
            group: ['transform'],
            version: [1, 1.1, 1.2],
            description: 'Use Motorhead Memory',
            defaults: {
                name: 'Motorhead',
            },
            codex: {
                categories: ['AI'],
                subcategories: {
                    AI: ['Memory'],
                },
                resources: {
                    primaryDocumentation: [
                        {
                            url: 'https://docs.n8n.io/integrations/builtin/cluster-nodes/sub-nodes/n8n-nodes-langchain.memorymotorhead/',
                        },
                    ],
                },
            },
            inputs: [],
            outputs: ["ai_memory"],
            outputNames: ['Memory'],
            credentials: [
                {
                    name: 'motorheadApi',
                    required: true,
                },
            ],
            properties: [
                (0, sharedFields_1.getConnectionHintNoticeField)(["ai_agent"]),
                {
                    displayName: 'Session ID',
                    name: 'sessionId',
                    type: 'string',
                    required: true,
                    default: '',
                    displayOptions: {
                        show: {
                            '@version': [1],
                        },
                    },
                },
                {
                    displayName: 'Session ID',
                    name: 'sessionId',
                    type: 'string',
                    default: '={{ $json.sessionId }}',
                    description: 'The key to use to store the memory',
                    displayOptions: {
                        show: {
                            '@version': [1.1],
                        },
                    },
                },
                {
                    ...descriptions_1.sessionIdOption,
                    displayOptions: {
                        show: {
                            '@version': [{ _cnd: { gte: 1.2 } }],
                        },
                    },
                },
                descriptions_1.sessionKeyProperty,
            ],
        };
    }
    async supplyData(itemIndex) {
        const credentials = await this.getCredentials('motorheadApi');
        const nodeVersion = this.getNode().typeVersion;
        let sessionId;
        if (nodeVersion >= 1.2) {
            sessionId = (0, helpers_1.getSessionId)(this, itemIndex);
        }
        else {
            sessionId = this.getNodeParameter('sessionId', itemIndex);
        }
        const memory = new motorhead_memory_1.MotorheadMemory({
            sessionId,
            url: `${credentials.host}/motorhead`,
            clientId: credentials.clientId,
            apiKey: credentials.apiKey,
            memoryKey: 'chat_history',
            returnMessages: true,
            inputKey: 'input',
            outputKey: 'output',
        });
        await memory.init();
        return {
            response: (0, logWrapper_1.logWrapper)(memory, this),
        };
    }
}
exports.MemoryMotorhead = MemoryMotorhead;
//# sourceMappingURL=MemoryMotorhead.node.js.map