"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.MemoryChatRetriever = void 0;
function simplifyMessages(messages) {
    const chunkedMessages = [];
    for (let i = 0; i < messages.length; i += 2) {
        chunkedMessages.push([messages[i], messages[i + 1]]);
    }
    const transformedMessages = chunkedMessages.map((exchange) => {
        const simplified = {
            [exchange[0]._getType()]: exchange[0].content,
        };
        if (exchange[1]) {
            simplified[exchange[1]._getType()] = exchange[1].content;
        }
        return {
            json: simplified,
        };
    });
    return transformedMessages;
}
class MemoryChatRetriever {
    constructor() {
        this.description = {
            displayName: 'Chat Messages Retriever',
            name: 'memoryChatRetriever',
            icon: 'fa:database',
            group: ['transform'],
            hidden: true,
            version: 1,
            description: 'Retrieve chat messages from memory and use them in the workflow',
            defaults: {
                name: 'Chat Messages Retriever',
            },
            codex: {
                categories: ['AI'],
                subcategories: {
                    AI: ['Miscellaneous'],
                },
                resources: {
                    primaryDocumentation: [
                        {
                            url: 'https://docs.n8n.io/integrations/builtin/cluster-nodes/sub-nodes/n8n-nodes-langchain.memorymanager/',
                        },
                    ],
                },
            },
            inputs: [
                "main",
                {
                    displayName: 'Memory',
                    maxConnections: 1,
                    type: "ai_memory",
                    required: true,
                },
            ],
            outputs: ["main"],
            properties: [
                {
                    displayName: "This node is deprecated. Use 'Chat Memory Manager' node instead.",
                    type: 'notice',
                    default: '',
                    name: 'deprecatedNotice',
                },
                {
                    displayName: 'Simplify Output',
                    name: 'simplifyOutput',
                    type: 'boolean',
                    description: 'Whether to simplify the output to only include the sender and the text',
                    default: true,
                },
            ],
        };
    }
    async execute() {
        var _a;
        this.logger.verbose('Executing Chat Memory Retriever');
        const memory = (await this.getInputConnectionData("ai_memory", 0));
        const simplifyOutput = this.getNodeParameter('simplifyOutput', 0);
        const messages = await (memory === null || memory === void 0 ? void 0 : memory.chatHistory.getMessages());
        if (simplifyOutput && messages) {
            return [simplifyMessages(messages)];
        }
        const serializedMessages = (_a = messages === null || messages === void 0 ? void 0 : messages.map((message) => {
            const serializedMessage = message.toJSON();
            return { json: serializedMessage };
        })) !== null && _a !== void 0 ? _a : [];
        return [serializedMessages];
    }
}
exports.MemoryChatRetriever = MemoryChatRetriever;
//# sourceMappingURL=MemoryChatRetriever.node.js.map