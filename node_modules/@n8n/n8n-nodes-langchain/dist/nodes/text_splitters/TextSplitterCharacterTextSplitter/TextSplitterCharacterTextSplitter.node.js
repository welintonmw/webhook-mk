"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.TextSplitterCharacterTextSplitter = void 0;
const textsplitters_1 = require("@langchain/textsplitters");
const logWrapper_1 = require("../../../utils/logWrapper");
const sharedFields_1 = require("../../../utils/sharedFields");
class TextSplitterCharacterTextSplitter {
    constructor() {
        this.description = {
            displayName: 'Character Text Splitter',
            name: 'textSplitterCharacterTextSplitter',
            icon: 'fa:grip-lines-vertical',
            group: ['transform'],
            version: 1,
            description: 'Split text into chunks by characters',
            defaults: {
                name: 'Character Text Splitter',
            },
            codex: {
                categories: ['AI'],
                subcategories: {
                    AI: ['Text Splitters'],
                },
                resources: {
                    primaryDocumentation: [
                        {
                            url: 'https://docs.n8n.io/integrations/builtin/cluster-nodes/sub-nodes/n8n-nodes-langchain.textsplittercharactertextsplitter/',
                        },
                    ],
                },
            },
            inputs: [],
            outputs: ["ai_textSplitter"],
            outputNames: ['Text Splitter'],
            properties: [
                (0, sharedFields_1.getConnectionHintNoticeField)(["ai_document"]),
                {
                    displayName: 'Separator',
                    name: 'separator',
                    type: 'string',
                    default: '',
                },
                {
                    displayName: 'Chunk Size',
                    name: 'chunkSize',
                    type: 'number',
                    default: 1000,
                },
                {
                    displayName: 'Chunk Overlap',
                    name: 'chunkOverlap',
                    type: 'number',
                    default: 0,
                },
            ],
        };
    }
    async supplyData(itemIndex) {
        this.logger.verbose('Supply Data for Text Splitter');
        const separator = this.getNodeParameter('separator', itemIndex);
        const chunkSize = this.getNodeParameter('chunkSize', itemIndex);
        const chunkOverlap = this.getNodeParameter('chunkOverlap', itemIndex);
        const params = {
            separator,
            chunkSize,
            chunkOverlap,
            keepSeparator: false,
        };
        const splitter = new textsplitters_1.CharacterTextSplitter(params);
        return {
            response: (0, logWrapper_1.logWrapper)(splitter, this),
        };
    }
}
exports.TextSplitterCharacterTextSplitter = TextSplitterCharacterTextSplitter;
//# sourceMappingURL=TextSplitterCharacterTextSplitter.node.js.map