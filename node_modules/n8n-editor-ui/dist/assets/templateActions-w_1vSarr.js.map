{"version":3,"file":"templateActions-w_1vSarr.js","sources":["../../src/utils/templates/templateActions.ts"],"sourcesContent":["import type {\n\tINodeUi,\n\tITemplatesWorkflowFull,\n\tIWorkflowData,\n\tIWorkflowTemplate,\n} from '@/Interface';\nimport { getNewWorkflow } from '@/api/workflows';\nimport { TEMPLATE_CREDENTIAL_SETUP_EXPERIMENT, VIEWS } from '@/constants';\nimport type { useRootStore } from '@/stores/root.store';\nimport type { PosthogStore } from '@/stores/posthog.store';\nimport type { useWorkflowsStore } from '@/stores/workflows.store';\nimport { getFixedNodesList } from '@/utils/nodeViewUtils';\nimport type { NodeTypeProvider } from '@/utils/nodeTypes/nodeTypeTransforms';\nimport type { TemplateCredentialKey } from '@/utils/templates/templateTransforms';\nimport { replaceAllTemplateNodeCredentials } from '@/utils/templates/templateTransforms';\nimport type { INodeCredentialsDetails } from 'n8n-workflow';\nimport type { RouteLocationRaw, Router } from 'vue-router';\nimport type { TemplatesStore } from '@/stores/templates.store';\nimport type { NodeTypesStore } from '@/stores/nodeTypes.store';\nimport type { Telemetry } from '@/plugins/telemetry';\nimport type { useExternalHooks } from '@/composables/useExternalHooks';\nimport { assert } from '@/utils/assert';\nimport { doesNodeHaveCredentialsToFill } from '@/utils/nodes/nodeTransforms';\nimport { tryToParseNumber } from '@/utils/typesUtils';\n\ntype ExternalHooks = ReturnType<typeof useExternalHooks>;\n\n/**\n * Creates a new workflow from a template\n */\nexport async function createWorkflowFromTemplate(opts: {\n\ttemplate: IWorkflowTemplate;\n\tcredentialOverrides: Record<TemplateCredentialKey, INodeCredentialsDetails>;\n\trootStore: ReturnType<typeof useRootStore>;\n\tworkflowsStore: ReturnType<typeof useWorkflowsStore>;\n\tnodeTypeProvider: NodeTypeProvider;\n}) {\n\tconst { credentialOverrides, nodeTypeProvider, rootStore, template, workflowsStore } = opts;\n\n\tconst workflowData = await getNewWorkflow(rootStore.restApiContext, { name: template.name });\n\tconst nodesWithCreds = replaceAllTemplateNodeCredentials(\n\t\tnodeTypeProvider,\n\t\ttemplate.workflow.nodes,\n\t\tcredentialOverrides,\n\t);\n\tconst nodes = getFixedNodesList(nodesWithCreds) as INodeUi[];\n\tconst connections = template.workflow.connections;\n\n\tconst workflowToCreate: IWorkflowData = {\n\t\tname: workflowData.name,\n\t\tnodes,\n\t\tconnections,\n\t\tactive: false,\n\t\tmeta: {\n\t\t\ttemplateId: template.id.toString(),\n\t\t},\n\t\t// Ignored: pinData, settings, tags, versionId\n\t};\n\n\tconst createdWorkflow = await workflowsStore.createNewWorkflow(workflowToCreate);\n\n\treturn createdWorkflow;\n}\n\n/**\n * Opens the template credential setup view\n */\nasync function openTemplateCredentialSetup(opts: {\n\ttemplateId: string;\n\trouter: Router;\n\tinNewBrowserTab?: boolean;\n\ttelemetry: Telemetry;\n\tsource: string;\n}) {\n\tconst { router, templateId, inNewBrowserTab = false, telemetry, source } = opts;\n\n\ttelemetry.track('User opened cred setup', { source }, { withPostHog: true });\n\n\tconst routeLocation: RouteLocationRaw = {\n\t\tname: VIEWS.TEMPLATE_SETUP,\n\t\tparams: { id: templateId },\n\t};\n\n\tif (inNewBrowserTab) {\n\t\tconst route = router.resolve(routeLocation);\n\t\twindow.open(route.href, '_blank');\n\t} else {\n\t\tawait router.push(routeLocation);\n\t}\n}\n\n/**\n * Opens the given template's workflow on NodeView. Fires necessary\n * telemetry events.\n */\nasync function openTemplateWorkflowOnNodeView(opts: {\n\texternalHooks: ExternalHooks;\n\ttemplateId: string;\n\ttemplatesStore: TemplatesStore;\n\trouter: Router;\n\tinNewBrowserTab?: boolean;\n}) {\n\tconst { externalHooks, templateId, templatesStore, inNewBrowserTab, router } = opts;\n\tconst routeLocation: RouteLocationRaw = {\n\t\tname: VIEWS.TEMPLATE_IMPORT,\n\t\tparams: { id: templateId },\n\t};\n\tconst telemetryPayload = {\n\t\tsource: 'workflow',\n\t\ttemplate_id: tryToParseNumber(templateId),\n\t\twf_template_repo_session_id: templatesStore.currentSessionId,\n\t};\n\n\tawait externalHooks.run('templatesWorkflowView.openWorkflow', telemetryPayload);\n\n\tif (inNewBrowserTab) {\n\t\tconst route = router.resolve(routeLocation);\n\t\twindow.open(route.href, '_blank');\n\t} else {\n\t\tawait router.push(routeLocation);\n\t}\n}\n\nfunction hasTemplateCredentials(\n\tnodeTypeProvider: NodeTypeProvider,\n\ttemplate: ITemplatesWorkflowFull,\n) {\n\treturn template.workflow.nodes.some((node) =>\n\t\tdoesNodeHaveCredentialsToFill(nodeTypeProvider, node),\n\t);\n}\n\nasync function getFullTemplate(templatesStore: TemplatesStore, templateId: string) {\n\tconst template = templatesStore.getFullTemplateById(templateId);\n\tif (template) {\n\t\treturn template;\n\t}\n\n\tawait templatesStore.fetchTemplateById(templateId);\n\treturn templatesStore.getFullTemplateById(templateId);\n}\n\n/**\n * Uses the given template by opening the template workflow on NodeView\n * or the template credential setup view. Fires necessary telemetry events.\n */\nexport async function useTemplateWorkflow(opts: {\n\texternalHooks: ExternalHooks;\n\tnodeTypesStore: NodeTypesStore;\n\tposthogStore: PosthogStore;\n\ttemplateId: string;\n\ttemplatesStore: TemplatesStore;\n\trouter: Router;\n\tinNewBrowserTab?: boolean;\n\ttelemetry: Telemetry;\n\tsource: string;\n}) {\n\tconst { nodeTypesStore, posthogStore, templateId, templatesStore } = opts;\n\n\tconst openCredentialSetup = posthogStore.isFeatureEnabled(TEMPLATE_CREDENTIAL_SETUP_EXPERIMENT);\n\tif (!openCredentialSetup) {\n\t\tawait openTemplateWorkflowOnNodeView(opts);\n\t\treturn;\n\t}\n\n\tconst [template] = await Promise.all([\n\t\tgetFullTemplate(templatesStore, templateId),\n\t\tnodeTypesStore.loadNodeTypesIfNotLoaded(),\n\t]);\n\tassert(template);\n\n\tif (hasTemplateCredentials(nodeTypesStore, template)) {\n\t\tawait openTemplateCredentialSetup(opts);\n\t} else {\n\t\tawait openTemplateWorkflowOnNodeView(opts);\n\t}\n}\n"],"names":["createWorkflowFromTemplate","opts","credentialOverrides","nodeTypeProvider","rootStore","template","workflowsStore","workflowData","getNewWorkflow","nodesWithCreds","replaceAllTemplateNodeCredentials","nodes","getFixedNodesList","connections","workflowToCreate","openTemplateCredentialSetup","router","templateId","inNewBrowserTab","telemetry","source","routeLocation","VIEWS","route","openTemplateWorkflowOnNodeView","externalHooks","templatesStore","telemetryPayload","tryToParseNumber","hasTemplateCredentials","node","doesNodeHaveCredentialsToFill","getFullTemplate","useTemplateWorkflow","nodeTypesStore","posthogStore","TEMPLATE_CREDENTIAL_SETUP_EXPERIMENT","assert"],"mappings":"gGA8BA,eAAsBA,EAA2BC,EAM9C,CACF,KAAM,CAAE,oBAAAC,EAAqB,iBAAAC,EAAkB,UAAAC,EAAW,SAAAC,EAAU,eAAAC,CAAmB,EAAAL,EAEjFM,EAAe,MAAMC,EAAeJ,EAAU,eAAgB,CAAE,KAAMC,EAAS,IAAA,CAAM,EACrFI,EAAiBC,EACtBP,EACAE,EAAS,SAAS,MAClBH,CAAA,EAEKS,EAAQC,EAAkBH,CAAc,EACxCI,EAAcR,EAAS,SAAS,YAEhCS,EAAkC,CACvC,KAAMP,EAAa,KACnB,MAAAI,EACA,YAAAE,EACA,OAAQ,GACR,KAAM,CACL,WAAYR,EAAS,GAAG,SAAS,CAClC,CAAA,EAMM,OAFiB,MAAMC,EAAe,kBAAkBQ,CAAgB,CAGhF,CAKA,eAAeC,EAA4Bd,EAMxC,CACF,KAAM,CAAE,OAAAe,EAAQ,WAAAC,EAAY,gBAAAC,EAAkB,GAAO,UAAAC,EAAW,OAAAC,CAAW,EAAAnB,EAEjEkB,EAAA,MAAM,yBAA0B,CAAE,OAAAC,GAAU,CAAE,YAAa,GAAM,EAE3E,MAAMC,EAAkC,CACvC,KAAMC,EAAM,eACZ,OAAQ,CAAE,GAAIL,CAAW,CAAA,EAG1B,GAAIC,EAAiB,CACd,MAAAK,EAAQP,EAAO,QAAQK,CAAa,EACnC,OAAA,KAAKE,EAAM,KAAM,QAAQ,CAAA,MAE1B,MAAAP,EAAO,KAAKK,CAAa,CAEjC,CAMA,eAAeG,EAA+BvB,EAM3C,CACF,KAAM,CAAE,cAAAwB,EAAe,WAAAR,EAAY,eAAAS,EAAgB,gBAAAR,EAAiB,OAAAF,CAAW,EAAAf,EACzEoB,EAAkC,CACvC,KAAMC,EAAM,gBACZ,OAAQ,CAAE,GAAIL,CAAW,CAAA,EAEpBU,EAAmB,CACxB,OAAQ,WACR,YAAaC,EAAiBX,CAAU,EACxC,4BAA6BS,EAAe,gBAAA,EAK7C,GAFM,MAAAD,EAAc,IAAI,qCAAsCE,CAAgB,EAE1ET,EAAiB,CACd,MAAAK,EAAQP,EAAO,QAAQK,CAAa,EACnC,OAAA,KAAKE,EAAM,KAAM,QAAQ,CAAA,MAE1B,MAAAP,EAAO,KAAKK,CAAa,CAEjC,CAEA,SAASQ,EACR1B,EACAE,EACC,CACM,OAAAA,EAAS,SAAS,MAAM,KAAMyB,GACpCC,EAA8B5B,EAAkB2B,CAAI,CAAA,CAEtD,CAEA,eAAeE,EAAgBN,EAAgCT,EAAoB,CAC5E,MAAAZ,EAAWqB,EAAe,oBAAoBT,CAAU,EAC9D,OAAIZ,IAIE,MAAAqB,EAAe,kBAAkBT,CAAU,EAC1CS,EAAe,oBAAoBT,CAAU,EACrD,CAMA,eAAsBgB,EAAoBhC,EAUvC,CACF,KAAM,CAAE,eAAAiC,EAAgB,aAAAC,EAAc,WAAAlB,EAAY,eAAAS,GAAmBzB,EAGrE,GAAI,CADwBkC,EAAa,iBAAiBC,CAAoC,EACpE,CACzB,MAAMZ,EAA+BvB,CAAI,EACzC,MACD,CAEA,KAAM,CAACI,CAAQ,EAAI,MAAM,QAAQ,IAAI,CACpC2B,EAAgBN,EAAgBT,CAAU,EAC1CiB,EAAe,yBAAyB,CAAA,CACxC,EACDG,EAAOhC,CAAQ,EAEXwB,EAAuBK,EAAgB7B,CAAQ,EAClD,MAAMU,EAA4Bd,CAAI,EAEtC,MAAMuB,EAA+BvB,CAAI,CAE3C"}