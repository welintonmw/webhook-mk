{"version":3,"file":"RunDataAi-C3XiqNZa.js","sources":["../../src/components/RunDataAi/useAiContentParsers.ts","../../../../node_modules/.pnpm/vue-markdown-render@2.0.1_typescript@5.4.2/node_modules/vue-markdown-render/dist/VueMarkdown.js","../../src/components/RunDataAi/AiRunContentBlock.vue","../../src/components/RunDataAi/RunDataAiContent.vue","../../src/components/RunDataAi/RunDataAi.vue"],"sourcesContent":["import type { IDataObject, INodeExecutionData } from 'n8n-workflow';\nimport { isObjectEmpty, NodeConnectionType } from 'n8n-workflow';\n\ninterface MemoryMessage {\n\tlc: number;\n\ttype: string;\n\tid: string[];\n\tkwargs: {\n\t\tcontent: unknown;\n\t\tadditional_kwargs: Record<string, unknown>;\n\t};\n}\ninterface LmGeneration {\n\ttext: string;\n\tmessage: MemoryMessage;\n}\n\ntype ExcludedKeys = NodeConnectionType.Main | NodeConnectionType.AiChain;\ntype AllowedEndpointType = Exclude<NodeConnectionType, ExcludedKeys>;\n\nconst fallbackParser = (execData: IDataObject) => ({\n\ttype: 'json' as 'json' | 'text' | 'markdown',\n\tdata: execData,\n\tparsed: false,\n});\n\nconst outputTypeParsers: {\n\t[key in AllowedEndpointType]: (execData: IDataObject) => {\n\t\ttype: 'json' | 'text' | 'markdown';\n\t\tdata: unknown;\n\t\tparsed: boolean;\n\t};\n} = {\n\t[NodeConnectionType.AiLanguageModel](execData: IDataObject) {\n\t\tconst response = (execData.response as IDataObject) ?? execData;\n\t\tif (!response) throw new Error('No response from Language Model');\n\n\t\t// Simple LLM output â€” single string message item\n\t\tif (\n\t\t\tArray.isArray(response?.messages) &&\n\t\t\tresponse?.messages.length === 1 &&\n\t\t\ttypeof response?.messages[0] === 'string'\n\t\t) {\n\t\t\treturn {\n\t\t\t\ttype: 'text',\n\t\t\t\tdata: response.messages[0],\n\t\t\t\tparsed: true,\n\t\t\t};\n\t\t}\n\t\t// Use the memory parser if the response is a memory-like(chat) object\n\t\tif (response.messages && Array.isArray(response.messages)) {\n\t\t\treturn outputTypeParsers[NodeConnectionType.AiMemory](execData);\n\t\t}\n\t\tif (response.generations) {\n\t\t\tconst generations = response.generations as LmGeneration[];\n\n\t\t\tconst content = generations.map((generation) => {\n\t\t\t\tif (generation?.text) return generation.text;\n\n\t\t\t\tif (Array.isArray(generation)) {\n\t\t\t\t\treturn generation\n\t\t\t\t\t\t.map((item: LmGeneration) => item.text ?? item)\n\t\t\t\t\t\t.join('\\n\\n')\n\t\t\t\t\t\t.trim();\n\t\t\t\t}\n\n\t\t\t\treturn generation;\n\t\t\t});\n\n\t\t\treturn {\n\t\t\t\ttype: 'json',\n\t\t\t\tdata: content,\n\t\t\t\tparsed: true,\n\t\t\t};\n\t\t}\n\n\t\treturn {\n\t\t\ttype: 'json',\n\t\t\tdata: response,\n\t\t\tparsed: true,\n\t\t};\n\t},\n\t[NodeConnectionType.AiTool]: fallbackParser,\n\t[NodeConnectionType.AiAgent]: fallbackParser,\n\t[NodeConnectionType.AiMemory](execData: IDataObject) {\n\t\tconst chatHistory =\n\t\t\texecData.chatHistory ??\n\t\t\texecData.messages ??\n\t\t\t(execData?.response as IDataObject)?.chat_history;\n\t\tif (Array.isArray(chatHistory)) {\n\t\t\tconst responseText = chatHistory\n\t\t\t\t.map((content: MemoryMessage) => {\n\t\t\t\t\tif (\n\t\t\t\t\t\tcontent.type === 'constructor' &&\n\t\t\t\t\t\tcontent.id?.includes('messages') &&\n\t\t\t\t\t\tcontent.kwargs\n\t\t\t\t\t) {\n\t\t\t\t\t\tinterface MessageContent {\n\t\t\t\t\t\t\ttype: string;\n\t\t\t\t\t\t\ttext?: string;\n\t\t\t\t\t\t\timage_url?:\n\t\t\t\t\t\t\t\t| {\n\t\t\t\t\t\t\t\t\t\turl: string;\n\t\t\t\t\t\t\t\t  }\n\t\t\t\t\t\t\t\t| string;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tlet message = content.kwargs.content;\n\t\t\t\t\t\tif (Array.isArray(message)) {\n\t\t\t\t\t\t\tmessage = (message as MessageContent[])\n\t\t\t\t\t\t\t\t.map((item) => {\n\t\t\t\t\t\t\t\t\tconst { type, image_url } = item;\n\t\t\t\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t\t\t\ttype === 'image_url' &&\n\t\t\t\t\t\t\t\t\t\ttypeof image_url === 'object' &&\n\t\t\t\t\t\t\t\t\t\ttypeof image_url.url === 'string'\n\t\t\t\t\t\t\t\t\t) {\n\t\t\t\t\t\t\t\t\t\treturn `![Input image](${image_url.url})`;\n\t\t\t\t\t\t\t\t\t} else if (typeof image_url === 'string') {\n\t\t\t\t\t\t\t\t\t\treturn `![Input image](${image_url})`;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\treturn item.text;\n\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t\t.join('\\n');\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (Object.keys(content.kwargs.additional_kwargs).length) {\n\t\t\t\t\t\t\tmessage += ` (${JSON.stringify(content.kwargs.additional_kwargs)})`;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (content.id.includes('HumanMessage')) {\n\t\t\t\t\t\t\tmessage = `**Human:** ${String(message).trim()}`;\n\t\t\t\t\t\t} else if (content.id.includes('AIMessage')) {\n\t\t\t\t\t\t\tmessage = `**AI:** ${message}`;\n\t\t\t\t\t\t} else if (content.id.includes('SystemMessage')) {\n\t\t\t\t\t\t\tmessage = `**System Message:** ${message}`;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (\n\t\t\t\t\t\t\texecData.action &&\n\t\t\t\t\t\t\ttypeof execData.action !== 'object' &&\n\t\t\t\t\t\t\texecData.action !== 'getMessages'\n\t\t\t\t\t\t) {\n\t\t\t\t\t\t\tmessage = `## Action: ${execData.action}\\n\\n${message}`;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn message;\n\t\t\t\t\t}\n\t\t\t\t\treturn '';\n\t\t\t\t})\n\t\t\t\t.join('\\n\\n');\n\n\t\t\treturn {\n\t\t\t\ttype: 'markdown',\n\t\t\t\tdata: responseText,\n\t\t\t\tparsed: true,\n\t\t\t};\n\t\t}\n\n\t\treturn fallbackParser(execData);\n\t},\n\t[NodeConnectionType.AiOutputParser]: fallbackParser,\n\t[NodeConnectionType.AiRetriever]: fallbackParser,\n\t[NodeConnectionType.AiVectorStore](execData: IDataObject) {\n\t\tif (execData.documents) {\n\t\t\treturn {\n\t\t\t\ttype: 'json',\n\t\t\t\tdata: execData.documents,\n\t\t\t\tparsed: true,\n\t\t\t};\n\t\t}\n\n\t\treturn fallbackParser(execData);\n\t},\n\t[NodeConnectionType.AiEmbedding](execData: IDataObject) {\n\t\tif (execData.documents) {\n\t\t\treturn {\n\t\t\t\ttype: 'json',\n\t\t\t\tdata: execData.documents,\n\t\t\t\tparsed: true,\n\t\t\t};\n\t\t}\n\n\t\treturn fallbackParser(execData);\n\t},\n\t[NodeConnectionType.AiDocument](execData: IDataObject) {\n\t\tif (execData.documents) {\n\t\t\treturn {\n\t\t\t\ttype: 'json',\n\t\t\t\tdata: execData.documents,\n\t\t\t\tparsed: true,\n\t\t\t};\n\t\t}\n\n\t\treturn fallbackParser(execData);\n\t},\n\t[NodeConnectionType.AiTextSplitter](execData: IDataObject) {\n\t\tconst arrayData = Array.isArray(execData.response)\n\t\t\t? execData.response\n\t\t\t: [execData.textSplitter];\n\t\treturn {\n\t\t\ttype: 'text',\n\t\t\tdata: arrayData.join('\\n\\n'),\n\t\t\tparsed: true,\n\t\t};\n\t},\n};\nexport type ParsedAiContent = Array<{\n\traw: IDataObject | IDataObject[];\n\tparsedContent: {\n\t\ttype: 'json' | 'text' | 'markdown';\n\t\tdata: unknown;\n\t\tparsed: boolean;\n\t} | null;\n}>;\n\nexport const useAiContentParsers = () => {\n\tconst parseAiRunData = (\n\t\texecutionData: INodeExecutionData[],\n\t\tendpointType: NodeConnectionType,\n\t): ParsedAiContent => {\n\t\tif ([NodeConnectionType.AiChain, NodeConnectionType.Main].includes(endpointType)) {\n\t\t\treturn executionData.map((data) => ({ raw: data.json, parsedContent: null }));\n\t\t}\n\n\t\tconst contentJson = executionData.map((node) => {\n\t\t\tconst hasBinarData = !isObjectEmpty(node.binary);\n\t\t\treturn hasBinarData ? node.binary : node.json;\n\t\t});\n\n\t\tconst parser = outputTypeParsers[endpointType as AllowedEndpointType];\n\t\tif (!parser)\n\t\t\treturn [\n\t\t\t\t{\n\t\t\t\t\traw: contentJson.filter((item): item is IDataObject => item !== undefined),\n\t\t\t\t\tparsedContent: null,\n\t\t\t\t},\n\t\t\t];\n\n\t\tconst parsedOutput = contentJson\n\t\t\t.filter((c): c is IDataObject => c !== undefined)\n\t\t\t.map((c) => ({ raw: c, parsedContent: parser(c) }));\n\t\treturn parsedOutput;\n\t};\n\n\treturn {\n\t\tparseAiRunData,\n\t};\n};\n","import { h, defineComponent } from 'vue';\nimport MarkdownIt from 'markdown-it';\nvar VueMarkdown = defineComponent({\n    name: 'VueMarkdown',\n    props: {\n        source: {\n            type: String,\n            required: true,\n        },\n        options: {\n            type: Object,\n            required: false,\n        },\n    },\n    data: function () {\n        return {\n            md: null,\n        };\n    },\n    computed: {\n        content: function () {\n            var _a;\n            var src = this.source;\n            return (_a = this.md) === null || _a === void 0 ? void 0 : _a.render(src);\n        },\n    },\n    created: function () {\n        var _a;\n        this.md = new MarkdownIt((_a = this.options) !== null && _a !== void 0 ? _a : {});\n    },\n    render: function () {\n        return h('div', { innerHTML: this.content });\n    },\n});\nexport default VueMarkdown;\n//# sourceMappingURL=VueMarkdown.js.map","<template>\n\t<div :class=\"$style.block\">\n\t\t<header :class=\"$style.blockHeader\" @click=\"onBlockHeaderClick\">\n\t\t\t<button :class=\"$style.blockToggle\">\n\t\t\t\t<font-awesome-icon :icon=\"isExpanded ? 'angle-down' : 'angle-up'\" size=\"lg\" />\n\t\t\t</button>\n\t\t\t<p :class=\"$style.blockTitle\">{{ capitalize(runData.inOut) }}</p>\n\t\t\t<!-- @click.stop to prevent event from bubbling to blockHeader and toggling expanded state when clicking on rawSwitch -->\n\t\t\t<el-switch\n\t\t\t\tv-if=\"contentParsed\"\n\t\t\t\tv-model=\"isShowRaw\"\n\t\t\t\t:class=\"$style.rawSwitch\"\n\t\t\t\tactive-text=\"RAW JSON\"\n\t\t\t\t@click.stop\n\t\t\t/>\n\t\t</header>\n\t\t<main\n\t\t\t:class=\"{\n\t\t\t\t[$style.blockContent]: true,\n\t\t\t\t[$style.blockContentExpanded]: isExpanded,\n\t\t\t}\"\n\t\t>\n\t\t\t<div\n\t\t\t\tv-for=\"({ parsedContent, raw }, index) in parsedRun\"\n\t\t\t\t:key=\"index\"\n\t\t\t\t:class=\"$style.contentText\"\n\t\t\t\t:data-content-type=\"parsedContent?.type\"\n\t\t\t>\n\t\t\t\t<template v-if=\"parsedContent && !isShowRaw\">\n\t\t\t\t\t<template v-if=\"parsedContent.type === 'json'\">\n\t\t\t\t\t\t<VueMarkdown\n\t\t\t\t\t\t\t:source=\"jsonToMarkdown(parsedContent.data as JsonMarkdown)\"\n\t\t\t\t\t\t\t:class=\"$style.markdown\"\n\t\t\t\t\t\t/>\n\t\t\t\t\t</template>\n\t\t\t\t\t<template v-if=\"parsedContent.type === 'markdown'\">\n\t\t\t\t\t\t<VueMarkdown :source=\"parsedContent.data\" :class=\"$style.markdown\" />\n\t\t\t\t\t</template>\n\t\t\t\t\t<p\n\t\t\t\t\t\tv-if=\"parsedContent.type === 'text'\"\n\t\t\t\t\t\t:class=\"$style.runText\"\n\t\t\t\t\t\tv-text=\"parsedContent.data\"\n\t\t\t\t\t/>\n\t\t\t\t</template>\n\t\t\t\t<!-- We weren't able to parse text or raw switch -->\n\t\t\t\t<template v-else>\n\t\t\t\t\t<div :class=\"$style.rawContent\">\n\t\t\t\t\t\t<n8n-icon-button\n\t\t\t\t\t\t\tsize=\"small\"\n\t\t\t\t\t\t\t:class=\"$style.copyToClipboard\"\n\t\t\t\t\t\t\ttype=\"secondary\"\n\t\t\t\t\t\t\t:title=\"$locale.baseText('nodeErrorView.copyToClipboard')\"\n\t\t\t\t\t\t\ticon=\"copy\"\n\t\t\t\t\t\t\t@click=\"onCopyToClipboard(raw)\"\n\t\t\t\t\t\t/>\n\t\t\t\t\t\t<VueMarkdown :source=\"jsonToMarkdown(raw as JsonMarkdown)\" :class=\"$style.markdown\" />\n\t\t\t\t\t</div>\n\t\t\t\t</template>\n\t\t\t</div>\n\t\t</main>\n\t</div>\n</template>\n\n<script lang=\"ts\" setup>\nimport type { IAiDataContent } from '@/Interface';\nimport { capitalize } from 'lodash-es';\nimport { ref, onMounted } from 'vue';\nimport type { ParsedAiContent } from './useAiContentParsers';\nimport { useAiContentParsers } from './useAiContentParsers';\nimport VueMarkdown from 'vue-markdown-render';\nimport { useClipboard } from '@/composables/useClipboard';\nimport { useI18n } from '@/composables/useI18n';\nimport { useToast } from '@/composables/useToast';\nimport { NodeConnectionType, type IDataObject } from 'n8n-workflow';\n\nconst props = defineProps<{\n\trunData: IAiDataContent;\n}>();\n\nconst i18n = useI18n();\nconst clipboard = useClipboard();\nconst { showMessage } = useToast();\nconst contentParsers = useAiContentParsers();\n\n// eslint-disable-next-line @typescript-eslint/no-use-before-define\nconst isExpanded = ref(getInitialExpandedState());\nconst isShowRaw = ref(false);\nconst contentParsed = ref(false);\nconst parsedRun = ref(undefined as ParsedAiContent | undefined);\nfunction getInitialExpandedState() {\n\tconst collapsedTypes = {\n\t\tinput: [NodeConnectionType.AiDocument, NodeConnectionType.AiTextSplitter],\n\t\toutput: [\n\t\t\tNodeConnectionType.AiDocument,\n\t\t\tNodeConnectionType.AiEmbedding,\n\t\t\tNodeConnectionType.AiTextSplitter,\n\t\t\tNodeConnectionType.AiVectorStore,\n\t\t],\n\t};\n\n\treturn !collapsedTypes[props.runData.inOut].includes(props.runData.type);\n}\n\nfunction parseAiRunData(run: IAiDataContent) {\n\tif (!run.data) {\n\t\treturn;\n\t}\n\tconst parsedData = contentParsers.parseAiRunData(run.data, run.type);\n\n\treturn parsedData;\n}\n\nfunction isMarkdown(content: JsonMarkdown): boolean {\n\tif (typeof content !== 'string') return false;\n\tconst markdownPatterns = [\n\t\t/^# .+/gm, // headers\n\t\t/\\*{1,2}.+\\*{1,2}/g, // emphasis and strong\n\t\t/\\[.+\\]\\(.+\\)/g, // links\n\t\t/```[\\s\\S]+```/g, // code blocks\n\t];\n\n\treturn markdownPatterns.some((pattern) => pattern.test(content));\n}\n\nfunction formatToJsonMarkdown(data: string): string {\n\treturn '```json\\n' + data + '\\n```';\n}\n\ntype JsonMarkdown = string | object | Array<string | object>;\n\nfunction jsonToMarkdown(data: JsonMarkdown): string {\n\tif (isMarkdown(data)) return data as string;\n\n\tif (Array.isArray(data) && data.length && typeof data[0] !== 'number') {\n\t\tconst markdownArray = data.map((item: JsonMarkdown) => jsonToMarkdown(item));\n\n\t\treturn markdownArray.join('\\n\\n').trim();\n\t}\n\n\tif (typeof data === 'string') {\n\t\treturn formatToJsonMarkdown(data);\n\t}\n\n\treturn formatToJsonMarkdown(JSON.stringify(data, null, 2));\n}\n\nfunction setContentParsed(content: ParsedAiContent): void {\n\tcontentParsed.value = !!content.find((item) => {\n\t\tif (item.parsedContent?.parsed === true) {\n\t\t\treturn true;\n\t\t}\n\t\treturn false;\n\t});\n}\n\nfunction onBlockHeaderClick() {\n\tisExpanded.value = !isExpanded.value;\n}\n\nfunction onCopyToClipboard(content: IDataObject | IDataObject[]) {\n\ttry {\n\t\tvoid clipboard.copy(JSON.stringify(content, undefined, 2));\n\t\tshowMessage({\n\t\t\ttitle: i18n.baseText('generic.copiedToClipboard'),\n\t\t\ttype: 'success',\n\t\t});\n\t} catch (err) {}\n}\n\nonMounted(() => {\n\tparsedRun.value = parseAiRunData(props.runData);\n\tif (parsedRun.value) {\n\t\tsetContentParsed(parsedRun.value);\n\t}\n});\n</script>\n\n<style lang=\"scss\" module>\n.copyToClipboard {\n\tposition: absolute;\n\tright: var(--spacing-s);\n\ttop: var(--spacing-s);\n}\n.rawContent {\n\tposition: relative;\n}\n.markdown {\n\t& {\n\t\twhite-space: pre-wrap;\n\n\t\th1 {\n\t\t\tfont-size: var(--font-size-xl);\n\t\t\tline-height: var(--font-line-height-xloose);\n\t\t}\n\n\t\th2 {\n\t\t\tfont-size: var(--font-size-l);\n\t\t\tline-height: var(--font-line-height-loose);\n\t\t}\n\n\t\th3 {\n\t\t\tfont-size: var(--font-size-m);\n\t\t\tline-height: var(--font-line-height-regular);\n\t\t}\n\n\t\tpre {\n\t\t\tbackground-color: var(--color-foreground-light);\n\t\t\tborder-radius: var(--border-radius-base);\n\t\t\tline-height: var(--font-line-height-xloose);\n\t\t\tpadding: var(--spacing-s);\n\t\t\tfont-size: var(--font-size-s);\n\t\t\twhite-space: pre-wrap;\n\t\t}\n\t}\n}\n.contentText {\n\tpadding-top: var(--spacing-s);\n\tfont-size: var(--font-size-xs);\n\t// max-height: 100%;\n}\n.block {\n\tborder: 1px solid var(--color-foreground-base);\n\tbackground: var(--color-background-xlight);\n\tpadding: var(--spacing-xs);\n\tborder-radius: 4px;\n\tmargin-bottom: var(--spacing-2xs);\n}\n.blockContent {\n\theight: 0;\n\toverflow: hidden;\n\n\t&.blockContentExpanded {\n\t\theight: auto;\n\t}\n}\n.runText {\n\tline-height: var(--font-line-height-regular);\n\twhite-space: pre-line;\n}\n.rawSwitch {\n\tmargin-left: auto;\n\n\t& * {\n\t\tfont-size: var(--font-size-2xs);\n\t}\n}\n.blockHeader {\n\tdisplay: flex;\n\tgap: var(--spacing-xs);\n\tcursor: pointer;\n\t/* This hack is needed to make the whole surface of header clickable  */\n\tmargin: calc(-1 * var(--spacing-xs));\n\tpadding: var(--spacing-xs);\n\n\t& * {\n\t\tuser-select: none;\n\t}\n}\n.blockTitle {\n\tfont-size: var(--font-size-2xs);\n\tcolor: var(--color-text-dark);\n}\n.blockToggle {\n\tborder: none;\n\tbackground: none;\n\tpadding: 0;\n\tcolor: var(--color-text-base);\n}\n</style>\n","<template>\n\t<div :class=\"$style.container\">\n\t\t<header :class=\"$style.header\">\n\t\t\t<NodeIcon\n\t\t\t\tv-if=\"runMeta?.node\"\n\t\t\t\t:class=\"$style.nodeIcon\"\n\t\t\t\t:node-type=\"runMeta.node\"\n\t\t\t\t:size=\"20\"\n\t\t\t/>\n\t\t\t<div :class=\"$style.headerWrap\">\n\t\t\t\t<p :class=\"$style.title\">\n\t\t\t\t\t{{ inputData.node }}\n\t\t\t\t</p>\n\t\t\t\t<ul :class=\"$style.meta\">\n\t\t\t\t\t<li v-if=\"runMeta?.startTimeMs\">{{ runMeta?.executionTimeMs }}ms</li>\n\t\t\t\t\t<li v-if=\"runMeta?.startTimeMs\">\n\t\t\t\t\t\t<n8n-tooltip>\n\t\t\t\t\t\t\t<template #content>\n\t\t\t\t\t\t\t\t{{ new Date(runMeta?.startTimeMs).toLocaleString() }}\n\t\t\t\t\t\t\t</template>\n\t\t\t\t\t\t\t{{\n\t\t\t\t\t\t\t\t$locale.baseText('runData.aiContentBlock.startedAt', {\n\t\t\t\t\t\t\t\t\tinterpolate: {\n\t\t\t\t\t\t\t\t\t\tstartTime: new Date(runMeta?.startTimeMs).toLocaleTimeString(),\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t</n8n-tooltip>\n\t\t\t\t\t</li>\n\t\t\t\t\t<li v-if=\"(consumedTokensSum?.totalTokens ?? 0) > 0\" :class=\"$style.tokensUsage\">\n\t\t\t\t\t\t{{\n\t\t\t\t\t\t\t$locale.baseText('runData.aiContentBlock.tokens', {\n\t\t\t\t\t\t\t\tinterpolate: {\n\t\t\t\t\t\t\t\t\tcount: formatTokenUsageCount(consumedTokensSum?.totalTokens ?? 0),\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t})\n\t\t\t\t\t\t}}\n\t\t\t\t\t\t<n8n-info-tip type=\"tooltip\" theme=\"info-light\" tooltip-placement=\"right\">\n\t\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t\t<n8n-text :bold=\"true\" size=\"small\">\n\t\t\t\t\t\t\t\t\t{{ $locale.baseText('runData.aiContentBlock.tokens.prompt') }}\n\t\t\t\t\t\t\t\t\t{{\n\t\t\t\t\t\t\t\t\t\t$locale.baseText('runData.aiContentBlock.tokens', {\n\t\t\t\t\t\t\t\t\t\t\tinterpolate: {\n\t\t\t\t\t\t\t\t\t\t\t\tcount: formatTokenUsageCount(consumedTokensSum?.promptTokens ?? 0),\n\t\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\t</n8n-text>\n\t\t\t\t\t\t\t\t<br />\n\t\t\t\t\t\t\t\t<n8n-text :bold=\"true\" size=\"small\">\n\t\t\t\t\t\t\t\t\t{{ $locale.baseText('runData.aiContentBlock.tokens.completion') }}\n\t\t\t\t\t\t\t\t\t{{\n\t\t\t\t\t\t\t\t\t\t$locale.baseText('runData.aiContentBlock.tokens', {\n\t\t\t\t\t\t\t\t\t\t\tinterpolate: {\n\t\t\t\t\t\t\t\t\t\t\t\tcount: formatTokenUsageCount(consumedTokensSum?.completionTokens ?? 0),\n\t\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\t</n8n-text>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</n8n-info-tip>\n\t\t\t\t\t</li>\n\t\t\t\t</ul>\n\t\t\t</div>\n\t\t</header>\n\n\t\t<main v-for=\"(run, index) in props.inputData.data\" :key=\"index\" :class=\"$style.content\">\n\t\t\t<AiRunContentBlock :run-data=\"run\" />\n\t\t</main>\n\t</div>\n</template>\n\n<script lang=\"ts\" setup>\nimport type { IAiData, IAiDataContent } from '@/Interface';\nimport { useNodeTypesStore } from '@/stores/nodeTypes.store';\nimport { useWorkflowsStore } from '@/stores/workflows.store';\nimport type { INodeExecutionData, INodeTypeDescription, NodeConnectionType } from 'n8n-workflow';\nimport { computed } from 'vue';\nimport NodeIcon from '@/components/NodeIcon.vue';\nimport AiRunContentBlock from './AiRunContentBlock.vue';\n\ninterface RunMeta {\n\tstartTimeMs: number;\n\texecutionTimeMs: number;\n\tnode: INodeTypeDescription | null;\n\ttype: 'input' | 'output';\n\tconnectionType: NodeConnectionType;\n}\nconst props = defineProps<{\n\tinputData: IAiData;\n\tcontentIndex: number;\n}>();\n\nconst nodeTypesStore = useNodeTypesStore();\nconst workflowsStore = useWorkflowsStore();\n\ntype TokenUsageData = {\n\tcompletionTokens: number;\n\tpromptTokens: number;\n\ttotalTokens: number;\n};\n\nconst consumedTokensSum = computed(() => {\n\t// eslint-disable-next-line @typescript-eslint/no-use-before-define\n\tconst tokenUsage = outputRun.value?.data?.reduce(\n\t\t(acc: TokenUsageData, curr: INodeExecutionData) => {\n\t\t\tconst tokenUsageData = (curr.json?.tokenUsage ??\n\t\t\t\tcurr.json?.tokenUsageEstimate) as TokenUsageData;\n\n\t\t\tif (!tokenUsageData) return acc;\n\n\t\t\treturn {\n\t\t\t\tcompletionTokens: acc.completionTokens + tokenUsageData.completionTokens,\n\t\t\t\tpromptTokens: acc.promptTokens + tokenUsageData.promptTokens,\n\t\t\t\ttotalTokens: acc.totalTokens + tokenUsageData.totalTokens,\n\t\t\t};\n\t\t},\n\t\t{\n\t\t\tcompletionTokens: 0,\n\t\t\tpromptTokens: 0,\n\t\t\ttotalTokens: 0,\n\t\t},\n\t);\n\n\treturn tokenUsage;\n});\n\nconst usingTokensEstimates = computed(() => {\n\treturn outputRun.value?.data?.some((d) => d.json?.tokenUsageEstimate);\n});\n\nfunction formatTokenUsageCount(count: number) {\n\treturn usingTokensEstimates.value ? `~${count}` : count.toString();\n}\nfunction extractRunMeta(run: IAiDataContent) {\n\tconst uiNode = workflowsStore.getNodeByName(props.inputData.node);\n\tconst nodeType = nodeTypesStore.getNodeType(uiNode?.type ?? '');\n\n\tconst runMeta: RunMeta = {\n\t\tstartTimeMs: run.metadata.startTime,\n\t\texecutionTimeMs: run.metadata.executionTime,\n\t\tnode: nodeType,\n\t\ttype: run.inOut,\n\t\tconnectionType: run.type,\n\t};\n\n\treturn runMeta;\n}\n\nconst outputRun = computed(() => {\n\treturn props.inputData.data.find((r) => r.inOut === 'output');\n});\n\nconst runMeta = computed(() => {\n\tif (outputRun.value === undefined) {\n\t\treturn;\n\t}\n\treturn extractRunMeta(outputRun.value);\n});\n</script>\n\n<style type=\"scss\" module>\n.container {\n\tpadding: 0 var(--spacing-s) var(--spacing-s);\n}\n.nodeIcon {\n\tmargin-top: calc(var(--spacing-3xs) * -1);\n}\n.header {\n\tdisplay: flex;\n\talign-items: center;\n\tgap: var(--spacing-3xs);\n\tmargin-bottom: var(--spacing-s);\n}\n.headerWrap {\n\tdisplay: flex;\n\tflex-direction: column;\n}\n.title {\n\tdisplay: flex;\n\talign-items: center;\n\tfont-size: var(--font-size-s);\n\tgap: var(--spacing-3xs);\n\tcolor: var(--color-text-dark);\n}\n.meta {\n\tlist-style: none;\n\tdisplay: flex;\n\talign-items: center;\n\tflex-wrap: wrap;\n\tfont-size: var(--font-size-xs);\n\n\t& > li:not(:last-child) {\n\t\tborder-right: 1px solid var(--color-text-base);\n\t\tpadding-right: var(--spacing-3xs);\n\t}\n\n\t& > li:not(:first-child) {\n\t\tpadding-left: var(--spacing-3xs);\n\t}\n}\n.tokensUsage {\n\tdisplay: flex;\n\talign-items: center;\n\tgap: var(--spacing-3xs);\n}\n</style>\n","<template>\n\t<div v-if=\"aiData\" :class=\"$style.container\">\n\t\t<div :class=\"{ [$style.tree]: true, [$style.slim]: slim }\">\n\t\t\t<ElTree\n\t\t\t\t:data=\"executionTree\"\n\t\t\t\t:props=\"{ label: 'node' }\"\n\t\t\t\tdefault-expand-all\n\t\t\t\t:indent=\"12\"\n\t\t\t\t:expand-on-click-node=\"false\"\n\t\t\t\tdata-test-id=\"lm-chat-logs-tree\"\n\t\t\t\t@node-click=\"onItemClick\"\n\t\t\t>\n\t\t\t\t<template #default=\"{ node, data }\">\n\t\t\t\t\t<div\n\t\t\t\t\t\t:class=\"{\n\t\t\t\t\t\t\t[$style.treeNode]: true,\n\t\t\t\t\t\t\t[$style.isSelected]: isTreeNodeSelected(data),\n\t\t\t\t\t\t}\"\n\t\t\t\t\t\t:data-tree-depth=\"data.depth\"\n\t\t\t\t\t\t:style=\"{ '--item-depth': data.depth }\"\n\t\t\t\t\t>\n\t\t\t\t\t\t<button\n\t\t\t\t\t\t\tv-if=\"data.children.length\"\n\t\t\t\t\t\t\t:class=\"$style.treeToggle\"\n\t\t\t\t\t\t\t@click=\"toggleTreeItem(node)\"\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t<font-awesome-icon :icon=\"node.expanded ? 'angle-down' : 'angle-up'\" />\n\t\t\t\t\t\t</button>\n\t\t\t\t\t\t<n8n-tooltip :disabled=\"!slim\" placement=\"right\">\n\t\t\t\t\t\t\t<template #content>\n\t\t\t\t\t\t\t\t{{ node.label }}\n\t\t\t\t\t\t\t</template>\n\t\t\t\t\t\t\t<span :class=\"$style.leafLabel\">\n\t\t\t\t\t\t\t\t<NodeIcon :node-type=\"getNodeType(data.node)!\" :size=\"17\" />\n\t\t\t\t\t\t\t\t<span v-if=\"!slim\" v-text=\"node.label\" />\n\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t</n8n-tooltip>\n\t\t\t\t\t</div>\n\t\t\t\t</template>\n\t\t\t</ElTree>\n\t\t</div>\n\t\t<div :class=\"$style.runData\">\n\t\t\t<div v-if=\"selectedRun.length === 0\" :class=\"$style.empty\">\n\t\t\t\t<n8n-text size=\"large\">\n\t\t\t\t\t{{\n\t\t\t\t\t\t$locale.baseText('ndv.output.ai.empty', {\n\t\t\t\t\t\t\tinterpolate: {\n\t\t\t\t\t\t\t\tnode: props.node.name,\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t})\n\t\t\t\t\t}}\n\t\t\t\t</n8n-text>\n\t\t\t</div>\n\t\t\t<div\n\t\t\t\tv-for=\"(data, index) in selectedRun\"\n\t\t\t\t:key=\"`${data.node}__${data.runIndex}__index`\"\n\t\t\t\tdata-test-id=\"lm-chat-logs-entry\"\n\t\t\t>\n\t\t\t\t<RunDataAiContent :input-data=\"data\" :content-index=\"index\" />\n\t\t\t</div>\n\t\t</div>\n\t</div>\n</template>\n\n<script lang=\"ts\" setup>\nimport type { Ref } from 'vue';\nimport { computed, ref, watch } from 'vue';\nimport type { ITaskSubRunMetadata, ITaskDataConnections } from 'n8n-workflow';\nimport { NodeConnectionType } from 'n8n-workflow';\nimport type { IAiData, IAiDataContent, INodeUi } from '@/Interface';\nimport { useNodeTypesStore } from '@/stores/nodeTypes.store';\nimport { useWorkflowsStore } from '@/stores/workflows.store';\nimport NodeIcon from '@/components/NodeIcon.vue';\nimport RunDataAiContent from './RunDataAiContent.vue';\nimport { ElTree } from 'element-plus';\n\ninterface AIResult {\n\tnode: string;\n\trunIndex: number;\n\tdata: IAiDataContent | undefined;\n}\ninterface TreeNode {\n\tnode: string;\n\tid: string;\n\tchildren: TreeNode[];\n\tdepth: number;\n\tstartTime: number;\n\trunIndex: number;\n}\nexport interface Props {\n\tnode: INodeUi;\n\trunIndex: number;\n\thideTitle?: boolean;\n\tslim?: boolean;\n}\nconst props = withDefaults(defineProps<Props>(), { runIndex: 0 });\nconst workflowsStore = useWorkflowsStore();\nconst nodeTypesStore = useNodeTypesStore();\nconst selectedRun: Ref<IAiData[]> = ref([]);\n\nfunction isTreeNodeSelected(node: TreeNode) {\n\treturn selectedRun.value.some((run) => run.node === node.node && run.runIndex === node.runIndex);\n}\n\nfunction getReferencedData(\n\treference: ITaskSubRunMetadata,\n\twithInput: boolean,\n\twithOutput: boolean,\n): IAiDataContent[] {\n\tconst resultData = workflowsStore.getWorkflowResultDataByNodeName(reference.node);\n\n\tif (!resultData?.[reference.runIndex]) {\n\t\treturn [];\n\t}\n\n\tconst taskData = resultData[reference.runIndex];\n\n\tif (!taskData) {\n\t\treturn [];\n\t}\n\n\tconst returnData: IAiDataContent[] = [];\n\n\tfunction addFunction(data: ITaskDataConnections | undefined, inOut: 'input' | 'output') {\n\t\tif (!data) {\n\t\t\treturn;\n\t\t}\n\n\t\tObject.keys(data).map((type) => {\n\t\t\treturnData.push({\n\t\t\t\tdata: data[type][0],\n\t\t\t\tinOut,\n\t\t\t\ttype: type as NodeConnectionType,\n\t\t\t\tmetadata: {\n\t\t\t\t\texecutionTime: taskData.executionTime,\n\t\t\t\t\tstartTime: taskData.startTime,\n\t\t\t\t},\n\t\t\t});\n\t\t});\n\t}\n\n\tif (withInput) {\n\t\taddFunction(taskData.inputOverride, 'input');\n\t}\n\tif (withOutput) {\n\t\taddFunction(taskData.data, 'output');\n\t}\n\n\treturn returnData;\n}\n\nfunction toggleTreeItem(node: { expanded: boolean }) {\n\tnode.expanded = !node.expanded;\n}\n\nfunction onItemClick(data: TreeNode) {\n\tconst matchingRun = aiData.value?.find(\n\t\t(run) => run.node === data.node && run.runIndex === data.runIndex,\n\t);\n\tif (!matchingRun) {\n\t\tselectedRun.value = [];\n\n\t\treturn;\n\t}\n\tselectedRun.value = [\n\t\t{\n\t\t\tnode: data.node,\n\t\t\trunIndex: data.runIndex,\n\t\t\tdata: getReferencedData(\n\t\t\t\t{\n\t\t\t\t\tnode: data.node,\n\t\t\t\t\trunIndex: data.runIndex,\n\t\t\t\t},\n\t\t\t\ttrue,\n\t\t\t\ttrue,\n\t\t\t),\n\t\t},\n\t];\n}\n\nfunction getNodeType(nodeName: string) {\n\tconst node = workflowsStore.getNodeByName(nodeName);\n\tif (!node) {\n\t\treturn null;\n\t}\n\tconst nodeType = nodeTypesStore.getNodeType(node?.type);\n\n\treturn nodeType;\n}\n\nfunction selectFirst() {\n\tif (executionTree.value.length && executionTree.value[0].children.length) {\n\t\tonItemClick(executionTree.value[0].children[0]);\n\t}\n}\n\nconst createNode = (\n\tnodeName: string,\n\tcurrentDepth: number,\n\tr?: AIResult,\n\tchildren: TreeNode[] = [],\n): TreeNode => ({\n\tnode: nodeName,\n\tid: nodeName,\n\tdepth: currentDepth,\n\tstartTime: r?.data?.metadata?.startTime ?? 0,\n\trunIndex: r?.runIndex ?? 0,\n\tchildren,\n});\n\nfunction getTreeNodeData(nodeName: string, currentDepth: number): TreeNode[] {\n\tconst { connectionsByDestinationNode } = workflowsStore.getCurrentWorkflow();\n\tconst connections = connectionsByDestinationNode[nodeName];\n\t// eslint-disable-next-line @typescript-eslint/no-use-before-define\n\tconst resultData = aiData.value?.filter((data) => data.node === nodeName) ?? [];\n\n\tif (!connections) {\n\t\treturn resultData.map((d) => createNode(nodeName, currentDepth, d));\n\t}\n\n\tconst nonMainConnectionsKeys = Object.keys(connections).filter(\n\t\t(key) => key !== NodeConnectionType.Main,\n\t);\n\tconst children = nonMainConnectionsKeys.flatMap((key) =>\n\t\tconnections[key][0].flatMap((node) => getTreeNodeData(node.node, currentDepth + 1)),\n\t);\n\n\tif (resultData.length) {\n\t\treturn resultData.map((r) => createNode(nodeName, currentDepth, r, children));\n\t}\n\n\tchildren.sort((a, b) => a.startTime - b.startTime);\n\n\treturn [createNode(nodeName, currentDepth, undefined, children)];\n}\n\nconst aiData = computed<AIResult[] | undefined>(() => {\n\tconst resultData = workflowsStore.getWorkflowResultDataByNodeName(props.node.name);\n\n\tif (!resultData || !Array.isArray(resultData)) {\n\t\treturn;\n\t}\n\n\tconst subRun = resultData[props.runIndex].metadata?.subRun;\n\tif (!Array.isArray(subRun)) {\n\t\treturn;\n\t}\n\t// Extend the subRun with the data and sort by adding execution time + startTime and comparing them\n\tconst subRunWithData = subRun.flatMap((run) =>\n\t\tgetReferencedData(run, false, true).map((data) => ({ ...run, data })),\n\t);\n\n\tsubRunWithData.sort((a, b) => {\n\t\tconst aTime = a.data?.metadata?.startTime || 0;\n\t\tconst bTime = b.data?.metadata?.startTime || 0;\n\t\treturn aTime - bTime;\n\t});\n\n\treturn subRunWithData;\n});\n\nconst executionTree = computed<TreeNode[]>(() => {\n\tconst rootNode = props.node;\n\n\tconst tree = getTreeNodeData(rootNode.name, 0);\n\treturn tree || [];\n});\n\nwatch(() => props.runIndex, selectFirst, { immediate: true });\n</script>\n\n<style lang=\"scss\" module>\n.treeToggle {\n\tborder: none;\n\tbackground-color: transparent;\n\tpadding: 0 var(--spacing-3xs);\n\tmargin: 0 calc(-1 * var(--spacing-3xs));\n\tcursor: pointer;\n}\n.leafLabel {\n\tdisplay: flex;\n\talign-items: center;\n\tgap: var(--spacing-3xs);\n}\n.empty {\n\tpadding: var(--spacing-l);\n}\n.title {\n\tfont-size: var(--font-size-s);\n\tmargin-bottom: var(--spacing-xs);\n}\n.tree {\n\tflex-shrink: 0;\n\tmin-width: 12.8rem;\n\theight: 100%;\n\tborder-right: 1px solid var(--color-foreground-base);\n\tpadding-right: var(--spacing-xs);\n\tpadding-left: var(--spacing-2xs);\n\t&.slim {\n\t\tmin-width: auto;\n\t}\n}\n.runData {\n\twidth: 100%;\n\theight: 100%;\n\toverflow: auto;\n}\n.container {\n\theight: 100%;\n\tpadding: 0 var(--spacing-xs);\n\tdisplay: flex;\n\n\t:global(.el-tree > .el-tree-node) {\n\t\tposition: relative;\n\t\t&:after {\n\t\t\tcontent: '';\n\t\t\tposition: absolute;\n\t\t\ttop: 2rem;\n\t\t\tbottom: 1.2rem;\n\t\t\tleft: 0.75rem;\n\t\t\twidth: 0.125rem;\n\t\t\tbackground-color: var(--color-foreground-base);\n\t\t}\n\t}\n\t:global(.el-tree-node__expand-icon) {\n\t\tdisplay: none;\n\t}\n\t:global(.el-tree) {\n\t\tmargin-left: calc(-1 * var(--spacing-xs));\n\t}\n\t:global(.el-tree-node__content) {\n\t\tmargin-left: var(--spacing-xs);\n\t}\n}\n.isSelected {\n\tbackground-color: var(--color-foreground-base);\n}\n.treeNode {\n\tdisplay: inline-flex;\n\tborder-radius: var(--border-radius-base);\n\talign-items: center;\n\tgap: var(--spacing-3xs);\n\tpadding: var(--spacing-4xs) var(--spacing-3xs);\n\tfont-size: var(--font-size-xs);\n\tcolor: var(--color-text-dark);\n\tmargin-bottom: var(--spacing-3xs);\n\tcursor: pointer;\n\n\t&:hover {\n\t\tbackground-color: var(--color-foreground-base);\n\t}\n\t&[data-tree-depth='0'] {\n\t\tmargin-left: calc(-1 * var(--spacing-2xs));\n\t}\n\n\t&:after {\n\t\tcontent: '';\n\t\tposition: absolute;\n\t\tmargin: auto;\n\t\tbackground-color: var(--color-foreground-base);\n\t\theight: 0.125rem;\n\t\tleft: 0.75rem;\n\t\twidth: calc(var(--item-depth) * 0.625rem);\n\t}\n}\n</style>\n"],"names":["fallbackParser","execData","outputTypeParsers","NodeConnectionType","response","generation","item","chatHistory","_a","content","message","type","image_url","useAiContentParsers","executionData","endpointType","data","contentJson","node","isObjectEmpty","parser","c","VueMarkdown","defineComponent","src","MarkdownIt","h","props","__props","i18n","useI18n","clipboard","useClipboard","showMessage","useToast","contentParsers","isExpanded","ref","getInitialExpandedState","isShowRaw","contentParsed","parsedRun","parseAiRunData","run","isMarkdown","pattern","formatToJsonMarkdown","jsonToMarkdown","setContentParsed","onBlockHeaderClick","onCopyToClipboard","onMounted","nodeTypesStore","useNodeTypesStore","workflowsStore","useWorkflowsStore","consumedTokensSum","computed","_b","outputRun","acc","curr","tokenUsageData","usingTokensEstimates","d","formatTokenUsageCount","count","extractRunMeta","uiNode","nodeType","runMeta","selectedRun","isTreeNodeSelected","getReferencedData","reference","withInput","withOutput","resultData","taskData","returnData","addFunction","inOut","toggleTreeItem","onItemClick","aiData","getNodeType","nodeName","selectFirst","executionTree","createNode","currentDepth","r","children","getTreeNodeData","connectionsByDestinationNode","connections","key","a","b","subRun","subRunWithData","aTime","bTime","_d","_c","rootNode","watch"],"mappings":"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","x_google_ignoreList":[1]}