import{c as u}from"./dateFormatter-CfbOITvW.js";import{x as l}from"./index-1OxaEeO3.js";function c(){const e=l();function r(t){const s={name:"unknown",startTime:n(t.startedAt),label:"Status unknown",runningTime:""};if(t.status==="waiting"?(s.name="waiting",s.label=e.baseText("executionsList.waiting")):t.status==="canceled"?s.label=e.baseText("executionsList.canceled"):t.status==="running"||t.status==="new"?(s.name="running",s.label=e.baseText("executionsList.running")):t.status==="success"?(s.name="success",s.label=e.baseText("executionsList.succeeded")):(t.status==="error"||t.status==="crashed")&&(s.name="error",s.label=e.baseText("executionsList.error")),t.status||(t.status="unknown"),t.startedAt&&t.stoppedAt){const a=t.stoppedAt?new Date(t.stoppedAt).getTime():Date.now();s.runningTime=e.displayTimer(a-new Date(t.startedAt).getTime(),!0)}return s}function n(t){const{date:s,time:a}=u(t);return e.baseText("executionsList.started",{interpolate:{time:a,date:s}})}function i(t){return["crashed","error"].includes(t.status)&&!t.retryOf&&!t.retrySuccessId}return{getUIDetails:r,formatDate:n,isExecutionRetriable:i}}export{c as u};
//# sourceMappingURL=useExecutionHelpers-LeKoU_T-.js.map
