import type { ExecutionError, IDeferredPromise, IExecuteResponsePromiseData, WorkflowExecuteMode, WorkflowHooks } from 'n8n-workflow';
import { ActiveExecutions } from './ActiveExecutions';
import { ExecutionRepository } from './databases/repositories/execution.repository';
import { ExternalHooks } from './ExternalHooks';
import type { IWorkflowExecutionDataProcess } from './Interfaces';
import { NodeTypes } from './NodeTypes';
import { PermissionChecker } from './UserManagement/PermissionChecker';
import { Logger } from './Logger';
import { WorkflowStaticDataService } from './workflows/workflowStaticData.service';
import { EventRelay } from './eventbus/event-relay.service';
export declare class WorkflowRunner {
    private readonly logger;
    private readonly activeExecutions;
    private readonly executionRepository;
    private readonly externalHooks;
    private readonly workflowStaticDataService;
    private readonly nodeTypes;
    private readonly permissionChecker;
    private readonly eventRelay;
    private jobQueue;
    private executionsMode;
    constructor(logger: Logger, activeExecutions: ActiveExecutions, executionRepository: ExecutionRepository, externalHooks: ExternalHooks, workflowStaticDataService: WorkflowStaticDataService, nodeTypes: NodeTypes, permissionChecker: PermissionChecker, eventRelay: EventRelay);
    processError(error: ExecutionError, startedAt: Date, executionMode: WorkflowExecuteMode, executionId: string, hooks?: WorkflowHooks): Promise<void>;
    run(data: IWorkflowExecutionDataProcess, loadStaticData?: boolean, realtime?: boolean, restartExecutionId?: string, responsePromise?: IDeferredPromise<IExecuteResponsePromiseData>): Promise<string>;
    private runMainProcess;
    private enqueueExecution;
}
