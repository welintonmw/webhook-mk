import type { User } from '../../databases/entities/User';
import type { WorkflowEntity } from '../../databases/entities/WorkflowEntity';
import { UserRepository } from '../../databases/repositories/user.repository';
import { Logger } from '../../Logger';
import { UrlService } from '../../services/url.service';
import type { InviteEmailData, PasswordResetData, SendEmailResult } from './Interfaces';
export declare class UserManagementMailer {
    private readonly userRepository;
    private readonly logger;
    private readonly urlService;
    readonly isEmailSetUp: boolean;
    private mailer;
    constructor(userRepository: UserRepository, logger: Logger, urlService: UrlService);
    verifyConnection(): Promise<void>;
    invite(inviteEmailData: InviteEmailData): Promise<SendEmailResult>;
    passwordReset(passwordResetData: PasswordResetData): Promise<SendEmailResult>;
    notifyWorkflowShared({ sharer, newShareeIds, workflow, }: {
        sharer: User;
        newShareeIds: string[];
        workflow: WorkflowEntity;
    }): Promise<SendEmailResult | undefined>;
    notifyCredentialsShared({ sharer, newShareeIds, credentialsName, }: {
        sharer: User;
        newShareeIds: string[];
        credentialsName: string;
    }): Promise<SendEmailResult | undefined>;
}
