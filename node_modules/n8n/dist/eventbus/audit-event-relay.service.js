"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.AuditEventRelay = void 0;
const typedi_1 = require("typedi");
const MessageEventBus_1 = require("./MessageEventBus/MessageEventBus");
const Redactable_1 = require("../decorators/Redactable");
const event_relay_service_1 = require("./event-relay.service");
let AuditEventRelay = class AuditEventRelay {
    constructor(eventRelay, eventBus) {
        this.eventRelay = eventRelay;
        this.eventBus = eventBus;
    }
    init() {
        this.setupHandlers();
    }
    setupHandlers() {
        this.eventRelay.on('workflow-created', (event) => this.workflowCreated(event));
        this.eventRelay.on('workflow-deleted', (event) => this.workflowDeleted(event));
        this.eventRelay.on('workflow-saved', (event) => this.workflowSaved(event));
        this.eventRelay.on('workflow-pre-execute', (event) => this.workflowPreExecute(event));
        this.eventRelay.on('workflow-post-execute', (event) => this.workflowPostExecute(event));
        this.eventRelay.on('node-pre-execute', (event) => this.nodePreExecute(event));
        this.eventRelay.on('node-post-execute', (event) => this.nodePostExecute(event));
        this.eventRelay.on('user-deleted', (event) => this.userDeleted(event));
        this.eventRelay.on('user-invited', (event) => this.userInvited(event));
        this.eventRelay.on('user-reinvited', (event) => this.userReinvited(event));
        this.eventRelay.on('user-updated', (event) => this.userUpdated(event));
        this.eventRelay.on('user-signed-up', (event) => this.userSignedUp(event));
        this.eventRelay.on('user-logged-in', (event) => this.userLoggedIn(event));
        this.eventRelay.on('user-login-failed', (event) => this.userLoginFailed(event));
        this.eventRelay.on('user-invite-email-click', (event) => this.userInviteEmailClick(event));
        this.eventRelay.on('user-password-reset-email-click', (event) => this.userPasswordResetEmailClick(event));
        this.eventRelay.on('user-password-reset-request-click', (event) => this.userPasswordResetRequestClick(event));
        this.eventRelay.on('api-key-created', (event) => this.apiKeyCreated(event));
        this.eventRelay.on('api-key-deleted', (event) => this.apiKeyDeleted(event));
        this.eventRelay.on('email-failed', (event) => this.emailFailed(event));
        this.eventRelay.on('credentials-created', (event) => this.credentialsCreated(event));
        this.eventRelay.on('credentials-deleted', (event) => this.credentialsDeleted(event));
        this.eventRelay.on('credentials-shared', (event) => this.credentialsShared(event));
        this.eventRelay.on('credentials-updated', (event) => this.credentialsUpdated(event));
        this.eventRelay.on('credentials-deleted', (event) => this.credentialsDeleted(event));
        this.eventRelay.on('community-package-installed', (event) => this.communityPackageInstalled(event));
        this.eventRelay.on('community-package-updated', (event) => this.communityPackageUpdated(event));
        this.eventRelay.on('community-package-deleted', (event) => this.communityPackageDeleted(event));
    }
    workflowCreated({ user, workflow }) {
        void this.eventBus.sendAuditEvent({
            eventName: 'n8n.audit.workflow.created',
            payload: {
                ...user,
                workflowId: workflow.id,
                workflowName: workflow.name,
            },
        });
    }
    workflowDeleted({ user, workflowId }) {
        void this.eventBus.sendAuditEvent({
            eventName: 'n8n.audit.workflow.deleted',
            payload: { ...user, workflowId },
        });
    }
    workflowSaved({ user, workflowId, workflowName }) {
        void this.eventBus.sendAuditEvent({
            eventName: 'n8n.audit.workflow.updated',
            payload: {
                ...user,
                workflowId,
                workflowName,
            },
        });
    }
    workflowPreExecute({ data, executionId }) {
        const payload = 'executionData' in data
            ? {
                executionId,
                userId: data.userId,
                workflowId: data.workflowData.id,
                isManual: data.executionMode === 'manual',
                workflowName: data.workflowData.name,
            }
            : {
                executionId,
                userId: undefined,
                workflowId: data.id,
                isManual: false,
                workflowName: data.name,
            };
        void this.eventBus.sendWorkflowEvent({
            eventName: 'n8n.workflow.started',
            payload,
        });
    }
    workflowPostExecute(event) {
        void this.eventBus.sendWorkflowEvent({
            eventName: 'n8n.workflow.success',
            payload: event,
        });
    }
    nodePreExecute({ workflow, executionId, nodeName }) {
        var _a;
        void this.eventBus.sendNodeEvent({
            eventName: 'n8n.node.started',
            payload: {
                workflowId: workflow.id,
                workflowName: workflow.name,
                executionId,
                nodeType: (_a = workflow.nodes.find((n) => n.name === nodeName)) === null || _a === void 0 ? void 0 : _a.type,
                nodeName,
            },
        });
    }
    nodePostExecute({ workflow, executionId, nodeName }) {
        var _a;
        void this.eventBus.sendNodeEvent({
            eventName: 'n8n.node.finished',
            payload: {
                workflowId: workflow.id,
                workflowName: workflow.name,
                executionId,
                nodeType: (_a = workflow.nodes.find((n) => n.name === nodeName)) === null || _a === void 0 ? void 0 : _a.type,
                nodeName,
            },
        });
    }
    userDeleted({ user }) {
        void this.eventBus.sendAuditEvent({
            eventName: 'n8n.audit.user.deleted',
            payload: user,
        });
    }
    userInvited({ user, targetUserId }) {
        void this.eventBus.sendAuditEvent({
            eventName: 'n8n.audit.user.invited',
            payload: { ...user, targetUserId },
        });
    }
    userReinvited({ user, targetUserId }) {
        void this.eventBus.sendAuditEvent({
            eventName: 'n8n.audit.user.reinvited',
            payload: { ...user, targetUserId },
        });
    }
    userUpdated({ user, fieldsChanged }) {
        void this.eventBus.sendAuditEvent({
            eventName: 'n8n.audit.user.updated',
            payload: { ...user, fieldsChanged },
        });
    }
    userSignedUp({ user }) {
        void this.eventBus.sendAuditEvent({
            eventName: 'n8n.audit.user.signedup',
            payload: user,
        });
    }
    userLoggedIn({ user, authenticationMethod }) {
        void this.eventBus.sendAuditEvent({
            eventName: 'n8n.audit.user.login.success',
            payload: { ...user, authenticationMethod },
        });
    }
    userLoginFailed(event) {
        void this.eventBus.sendAuditEvent({
            eventName: 'n8n.audit.user.login.failed',
            payload: event,
        });
    }
    userInviteEmailClick(event) {
        void this.eventBus.sendAuditEvent({
            eventName: 'n8n.audit.user.invitation.accepted',
            payload: event,
        });
    }
    userPasswordResetEmailClick({ user }) {
        void this.eventBus.sendAuditEvent({
            eventName: 'n8n.audit.user.reset',
            payload: user,
        });
    }
    userPasswordResetRequestClick({ user }) {
        void this.eventBus.sendAuditEvent({
            eventName: 'n8n.audit.user.reset.requested',
            payload: user,
        });
    }
    apiKeyCreated({ user }) {
        void this.eventBus.sendAuditEvent({
            eventName: 'n8n.audit.user.api.created',
            payload: user,
        });
    }
    apiKeyDeleted({ user }) {
        void this.eventBus.sendAuditEvent({
            eventName: 'n8n.audit.user.api.deleted',
            payload: user,
        });
    }
    emailFailed({ user, messageType }) {
        void this.eventBus.sendAuditEvent({
            eventName: 'n8n.audit.user.email.failed',
            payload: { ...user, messageType },
        });
    }
    credentialsCreated({ user, ...rest }) {
        void this.eventBus.sendAuditEvent({
            eventName: 'n8n.audit.user.credentials.created',
            payload: { ...user, ...rest },
        });
    }
    credentialsDeleted({ user, ...rest }) {
        void this.eventBus.sendAuditEvent({
            eventName: 'n8n.audit.user.credentials.deleted',
            payload: { ...user, ...rest },
        });
    }
    credentialsShared({ user, ...rest }) {
        void this.eventBus.sendAuditEvent({
            eventName: 'n8n.audit.user.credentials.shared',
            payload: { ...user, ...rest },
        });
    }
    credentialsUpdated({ user, ...rest }) {
        void this.eventBus.sendAuditEvent({
            eventName: 'n8n.audit.user.credentials.updated',
            payload: { ...user, ...rest },
        });
    }
    communityPackageInstalled({ user, ...rest }) {
        void this.eventBus.sendAuditEvent({
            eventName: 'n8n.audit.package.installed',
            payload: { ...user, ...rest },
        });
    }
    communityPackageUpdated({ user, ...rest }) {
        void this.eventBus.sendAuditEvent({
            eventName: 'n8n.audit.package.updated',
            payload: { ...user, ...rest },
        });
    }
    communityPackageDeleted({ user, ...rest }) {
        void this.eventBus.sendAuditEvent({
            eventName: 'n8n.audit.package.deleted',
            payload: { ...user, ...rest },
        });
    }
};
exports.AuditEventRelay = AuditEventRelay;
__decorate([
    (0, Redactable_1.Redactable)(),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", void 0)
], AuditEventRelay.prototype, "workflowCreated", null);
__decorate([
    (0, Redactable_1.Redactable)(),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", void 0)
], AuditEventRelay.prototype, "workflowDeleted", null);
__decorate([
    (0, Redactable_1.Redactable)(),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", void 0)
], AuditEventRelay.prototype, "workflowSaved", null);
__decorate([
    (0, Redactable_1.Redactable)(),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", void 0)
], AuditEventRelay.prototype, "userDeleted", null);
__decorate([
    (0, Redactable_1.Redactable)(),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", void 0)
], AuditEventRelay.prototype, "userInvited", null);
__decorate([
    (0, Redactable_1.Redactable)(),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", void 0)
], AuditEventRelay.prototype, "userReinvited", null);
__decorate([
    (0, Redactable_1.Redactable)(),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", void 0)
], AuditEventRelay.prototype, "userUpdated", null);
__decorate([
    (0, Redactable_1.Redactable)(),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", void 0)
], AuditEventRelay.prototype, "userSignedUp", null);
__decorate([
    (0, Redactable_1.Redactable)(),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", void 0)
], AuditEventRelay.prototype, "userLoggedIn", null);
__decorate([
    (0, Redactable_1.Redactable)('inviter'),
    (0, Redactable_1.Redactable)('invitee'),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", void 0)
], AuditEventRelay.prototype, "userInviteEmailClick", null);
__decorate([
    (0, Redactable_1.Redactable)(),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", void 0)
], AuditEventRelay.prototype, "userPasswordResetEmailClick", null);
__decorate([
    (0, Redactable_1.Redactable)(),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", void 0)
], AuditEventRelay.prototype, "userPasswordResetRequestClick", null);
__decorate([
    (0, Redactable_1.Redactable)(),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", void 0)
], AuditEventRelay.prototype, "apiKeyCreated", null);
__decorate([
    (0, Redactable_1.Redactable)(),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", void 0)
], AuditEventRelay.prototype, "apiKeyDeleted", null);
__decorate([
    (0, Redactable_1.Redactable)(),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", void 0)
], AuditEventRelay.prototype, "emailFailed", null);
__decorate([
    (0, Redactable_1.Redactable)(),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", void 0)
], AuditEventRelay.prototype, "credentialsCreated", null);
__decorate([
    (0, Redactable_1.Redactable)(),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", void 0)
], AuditEventRelay.prototype, "credentialsDeleted", null);
__decorate([
    (0, Redactable_1.Redactable)(),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", void 0)
], AuditEventRelay.prototype, "credentialsShared", null);
__decorate([
    (0, Redactable_1.Redactable)(),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", void 0)
], AuditEventRelay.prototype, "credentialsUpdated", null);
__decorate([
    (0, Redactable_1.Redactable)(),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", void 0)
], AuditEventRelay.prototype, "communityPackageInstalled", null);
__decorate([
    (0, Redactable_1.Redactable)(),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", void 0)
], AuditEventRelay.prototype, "communityPackageUpdated", null);
__decorate([
    (0, Redactable_1.Redactable)(),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", void 0)
], AuditEventRelay.prototype, "communityPackageDeleted", null);
exports.AuditEventRelay = AuditEventRelay = __decorate([
    (0, typedi_1.Service)(),
    __metadata("design:paramtypes", [event_relay_service_1.EventRelay,
        MessageEventBus_1.MessageEventBus])
], AuditEventRelay);
//# sourceMappingURL=audit-event-relay.service.js.map