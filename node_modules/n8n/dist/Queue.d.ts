import type Bull from 'bull';
import { type ExecutionError, type IExecuteResponsePromiseData } from 'n8n-workflow';
import { ActiveExecutions } from './ActiveExecutions';
export type JobId = Bull.JobId;
export type Job = Bull.Job<JobData>;
export type JobQueue = Bull.Queue<JobData>;
export interface JobData {
    executionId: string;
    loadStaticData: boolean;
}
export interface JobResponse {
    success: boolean;
    error?: ExecutionError;
}
export interface WebhookResponse {
    executionId: string;
    response: IExecuteResponsePromiseData;
}
export declare class Queue {
    private activeExecutions;
    private jobQueue;
    constructor(activeExecutions: ActiveExecutions);
    init(): Promise<void>;
    decodeWebhookResponse(response: IExecuteResponsePromiseData): IExecuteResponsePromiseData;
    add(jobData: JobData, jobOptions: object): Promise<Job>;
    getJob(jobId: JobId): Promise<Job | null>;
    getJobs(jobTypes: Bull.JobStatus[]): Promise<Job[]>;
    getInProgressExecutionIds(): Promise<Set<string>>;
    process(concurrency: number, fn: Bull.ProcessCallbackFunction<JobData>): Promise<void>;
    ping(): Promise<string>;
    pause({ isLocal, doNotWaitActive, }?: {
        isLocal?: boolean;
        doNotWaitActive?: boolean;
    }): Promise<void>;
    getBullObjectInstance(): JobQueue;
    stopJob(job: Job): Promise<boolean>;
}
