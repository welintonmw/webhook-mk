import { LoadNodesAndCredentials } from './LoadNodesAndCredentials';
import { AbstractServer } from './AbstractServer';
import { PostHogClient } from './posthog';
import { OrchestrationService } from './services/orchestration.service';
import './controllers/activeWorkflows.controller';
import './controllers/ai.controller';
import './controllers/auth.controller';
import './controllers/binaryData.controller';
import './controllers/curl.controller';
import './controllers/dynamicNodeParameters.controller';
import './controllers/invitation.controller';
import './controllers/me.controller';
import './controllers/nodeTypes.controller';
import './controllers/oauth/oAuth1Credential.controller';
import './controllers/oauth/oAuth2Credential.controller';
import './controllers/orchestration.controller';
import './controllers/owner.controller';
import './controllers/passwordReset.controller';
import './controllers/project.controller';
import './controllers/role.controller';
import './controllers/tags.controller';
import './controllers/translation.controller';
import './controllers/users.controller';
import './controllers/userSettings.controller';
import './controllers/workflowStatistics.controller';
import './credentials/credentials.controller';
import './eventbus/eventBus.controller';
import './executions/executions.controller';
import './ExternalSecrets/ExternalSecrets.controller.ee';
import './license/license.controller';
import './workflows/workflowHistory/workflowHistory.controller.ee';
import './workflows/workflows.controller';
export declare class Server extends AbstractServer {
    private readonly loadNodesAndCredentials;
    private readonly orchestrationService;
    private readonly postHogClient;
    private endpointPresetCredentials;
    private presetCredentialsLoaded;
    private frontendService?;
    constructor(loadNodesAndCredentials: LoadNodesAndCredentials, orchestrationService: OrchestrationService, postHogClient: PostHogClient);
    start(): Promise<void>;
    private registerAdditionalControllers;
    configure(): Promise<void>;
    protected setupPushServer(): void;
}
