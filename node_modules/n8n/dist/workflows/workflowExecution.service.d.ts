import type { IDeferredPromise, IExecuteResponsePromiseData, INode, INodeExecutionData, IPinData, IWorkflowExecuteAdditionalData, WorkflowExecuteMode } from 'n8n-workflow';
import type { User } from '../databases/entities/User';
import { ExecutionRepository } from '../databases/repositories/execution.repository';
import { WorkflowRepository } from '../databases/repositories/workflow.repository';
import type { WorkflowRequest } from '../workflows/workflow.request';
import type { IWorkflowDb, IWorkflowErrorData } from '../Interfaces';
import { NodeTypes } from '../NodeTypes';
import { WorkflowRunner } from '../WorkflowRunner';
import { TestWebhooks } from '../TestWebhooks';
import { Logger } from '../Logger';
import { PermissionChecker } from '../UserManagement/PermissionChecker';
import type { Project } from '../databases/entities/Project';
export declare class WorkflowExecutionService {
    private readonly logger;
    private readonly executionRepository;
    private readonly workflowRepository;
    private readonly nodeTypes;
    private readonly testWebhooks;
    private readonly permissionChecker;
    private readonly workflowRunner;
    constructor(logger: Logger, executionRepository: ExecutionRepository, workflowRepository: WorkflowRepository, nodeTypes: NodeTypes, testWebhooks: TestWebhooks, permissionChecker: PermissionChecker, workflowRunner: WorkflowRunner);
    runWorkflow(workflowData: IWorkflowDb, node: INode, data: INodeExecutionData[][], additionalData: IWorkflowExecuteAdditionalData, mode: WorkflowExecuteMode, responsePromise?: IDeferredPromise<IExecuteResponsePromiseData>): Promise<string>;
    executeManually({ workflowData, runData, startNodes, destinationNode }: WorkflowRequest.ManualRunPayload, user: User, pushRef?: string): Promise<{
        waitingForWebhook: boolean;
        executionId?: undefined;
    } | {
        executionId: string;
        waitingForWebhook?: undefined;
    }>;
    executeErrorWorkflow(workflowId: string, workflowErrorData: IWorkflowErrorData, runningProject: Project): Promise<void>;
    selectPinnedActivatorStarter(workflow: IWorkflowDb, startNodes?: string[], pinData?: IPinData): INode | null;
    private findAllPinnedActivators;
}
