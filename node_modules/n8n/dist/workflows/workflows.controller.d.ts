import express from 'express';
import type { IWorkflowResponse } from '../Interfaces';
import { SharedWorkflow } from '../databases/entities/SharedWorkflow';
import { SharedWorkflowRepository } from '../databases/repositories/sharedWorkflow.repository';
import { TagRepository } from '../databases/repositories/tag.repository';
import { WorkflowRepository } from '../databases/repositories/workflow.repository';
import { ExternalHooks } from '../ExternalHooks';
import { WorkflowService } from './workflow.service';
import { License } from '../License';
import { InternalHooks } from '../InternalHooks';
import { TagService } from '../services/tag.service';
import { WorkflowHistoryService } from './workflowHistory/workflowHistory.service.ee';
import { Logger } from '../Logger';
import { NamingService } from '../services/naming.service';
import { UserOnboardingService } from '../services/userOnboarding.service';
import { CredentialsService } from '../credentials/credentials.service';
import { WorkflowRequest } from './workflow.request';
import { EnterpriseWorkflowService } from './workflow.service.ee';
import { WorkflowExecutionService } from './workflowExecution.service';
import { UserManagementMailer } from '../UserManagement/email';
import { ProjectRepository } from '../databases/repositories/project.repository';
import { ProjectService } from '../services/project.service';
import { ProjectRelationRepository } from '../databases/repositories/projectRelation.repository';
import { EventRelay } from '../eventbus/event-relay.service';
export declare class WorkflowsController {
    private readonly logger;
    private readonly internalHooks;
    private readonly externalHooks;
    private readonly tagRepository;
    private readonly enterpriseWorkflowService;
    private readonly workflowHistoryService;
    private readonly tagService;
    private readonly namingService;
    private readonly userOnboardingService;
    private readonly workflowRepository;
    private readonly workflowService;
    private readonly workflowExecutionService;
    private readonly sharedWorkflowRepository;
    private readonly license;
    private readonly mailer;
    private readonly credentialsService;
    private readonly projectRepository;
    private readonly projectService;
    private readonly projectRelationRepository;
    private readonly eventRelay;
    constructor(logger: Logger, internalHooks: InternalHooks, externalHooks: ExternalHooks, tagRepository: TagRepository, enterpriseWorkflowService: EnterpriseWorkflowService, workflowHistoryService: WorkflowHistoryService, tagService: TagService, namingService: NamingService, userOnboardingService: UserOnboardingService, workflowRepository: WorkflowRepository, workflowService: WorkflowService, workflowExecutionService: WorkflowExecutionService, sharedWorkflowRepository: SharedWorkflowRepository, license: License, mailer: UserManagementMailer, credentialsService: CredentialsService, projectRepository: ProjectRepository, projectService: ProjectService, projectRelationRepository: ProjectRelationRepository, eventRelay: EventRelay);
    create(req: WorkflowRequest.Create): Promise<{
        scopes: import("@n8n/permissions").Scope[];
        homeProject?: import("../requests").SlimProject | null | undefined;
        sharedWithProjects: import("../requests").SlimProject[];
        usedCredentials?: import("./workflows.types").CredentialUsedByWorkflow[] | undefined;
        nodes: import("n8n-workflow").INode[];
        active: boolean;
        settings?: import("n8n-workflow").IWorkflowSettings | undefined;
        name: string;
        tagMappings: import("../databases/entities/WorkflowTagMapping").WorkflowTagMapping[];
        tags?: import("../databases/entities/TagEntity").TagEntity[] | undefined;
        id: string;
        generateId: () => void;
        createdAt: Date;
        updatedAt: Date;
        setUpdateDate: () => void;
        connections: import("n8n-workflow").IConnections;
        staticData?: import("n8n-workflow").IDataObject | undefined;
        meta?: import("n8n-workflow").WorkflowFEMeta | undefined;
        statistics: import("../databases/entities/WorkflowStatistics").WorkflowStatistics[];
        pinData: import("../databases/entities/WorkflowEntity").ISimplifiedPinData;
        versionId: string;
        triggerCount: number;
        display: () => string;
    }>;
    getAll(req: WorkflowRequest.GetMany, res: express.Response): Promise<void>;
    getNewName(req: WorkflowRequest.NewName): Promise<{
        name: string;
        onboardingFlowEnabled: boolean;
    }>;
    getFromUrl(req: WorkflowRequest.FromUrl): Promise<IWorkflowResponse>;
    getWorkflow(req: WorkflowRequest.Get): Promise<{
        scopes: import("@n8n/permissions").Scope[];
        homeProject?: import("../requests").SlimProject | null | undefined;
        sharedWithProjects: import("../requests").SlimProject[];
        usedCredentials?: import("./workflows.types").CredentialUsedByWorkflow[] | undefined;
        nodes: import("n8n-workflow").INode[];
        active: boolean;
        settings?: import("n8n-workflow").IWorkflowSettings | undefined;
        name: string;
        tagMappings: import("../databases/entities/WorkflowTagMapping").WorkflowTagMapping[];
        tags?: import("../databases/entities/TagEntity").TagEntity[] | undefined;
        id: string;
        generateId: () => void;
        createdAt: Date;
        updatedAt: Date;
        setUpdateDate: () => void;
        connections: import("n8n-workflow").IConnections;
        staticData?: import("n8n-workflow").IDataObject | undefined;
        meta?: import("n8n-workflow").WorkflowFEMeta | undefined;
        statistics: import("../databases/entities/WorkflowStatistics").WorkflowStatistics[];
        pinData: import("../databases/entities/WorkflowEntity").ISimplifiedPinData;
        versionId: string;
        triggerCount: number;
        display: () => string;
    } | {
        scopes: import("@n8n/permissions").Scope[];
        name: string;
        active: boolean;
        nodes: import("n8n-workflow").INode[];
        connections: import("n8n-workflow").IConnections;
        settings?: import("n8n-workflow").IWorkflowSettings | undefined;
        staticData?: import("n8n-workflow").IDataObject | undefined;
        meta?: import("n8n-workflow").WorkflowFEMeta | undefined;
        tags?: import("../databases/entities/TagEntity").TagEntity[] | undefined;
        tagMappings: import("../databases/entities/WorkflowTagMapping").WorkflowTagMapping[];
        shared: SharedWorkflow[];
        statistics: import("../databases/entities/WorkflowStatistics").WorkflowStatistics[];
        pinData: import("../databases/entities/WorkflowEntity").ISimplifiedPinData;
        versionId: string;
        triggerCount: number;
        id: string;
        createdAt: Date;
        updatedAt: Date;
    }>;
    update(req: WorkflowRequest.Update): Promise<{
        scopes: import("@n8n/permissions").Scope[];
        name: string;
        active: boolean;
        nodes: import("n8n-workflow").INode[];
        connections: import("n8n-workflow").IConnections;
        settings?: import("n8n-workflow").IWorkflowSettings | undefined;
        staticData?: import("n8n-workflow").IDataObject | undefined;
        meta?: import("n8n-workflow").WorkflowFEMeta | undefined;
        tags?: import("../databases/entities/TagEntity").TagEntity[] | undefined;
        tagMappings: import("../databases/entities/WorkflowTagMapping").WorkflowTagMapping[];
        shared: SharedWorkflow[];
        statistics: import("../databases/entities/WorkflowStatistics").WorkflowStatistics[];
        pinData: import("../databases/entities/WorkflowEntity").ISimplifiedPinData;
        versionId: string;
        triggerCount: number;
        id: string;
        createdAt: Date;
        updatedAt: Date;
    }>;
    delete(req: WorkflowRequest.Delete): Promise<boolean>;
    runManually(req: WorkflowRequest.ManualRun): Promise<{
        waitingForWebhook: boolean;
        executionId?: undefined;
    } | {
        executionId: string;
        waitingForWebhook?: undefined;
    }>;
    share(req: WorkflowRequest.Share): Promise<void>;
    transfer(req: WorkflowRequest.Transfer): Promise<{
        error: {
            message: string;
            lineNumber: number | undefined;
            timestamp: number;
            name: string;
            description: string | null | undefined;
            context: import("n8n-workflow").IDataObject;
            cause: Error | undefined;
        } | {
            name: string;
            message: string;
        };
    } | undefined>;
}
