"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.WorkflowSharingService = void 0;
const typedi_1 = require("typedi");
const typeorm_1 = require("@n8n/typeorm");
const sharedWorkflow_repository_1 = require("../databases/repositories/sharedWorkflow.repository");
const role_service_1 = require("../services/role.service");
let WorkflowSharingService = class WorkflowSharingService {
    constructor(sharedWorkflowRepository, roleService) {
        this.sharedWorkflowRepository = sharedWorkflowRepository;
        this.roleService = roleService;
    }
    async getSharedWorkflowIds(user, options) {
        if (user.hasGlobalScope('workflow:read')) {
            const sharedWorkflows = await this.sharedWorkflowRepository.find({ select: ['workflowId'] });
            return sharedWorkflows.map(({ workflowId }) => workflowId);
        }
        const projectRoles = 'scopes' in options
            ? this.roleService.rolesWithScope('project', options.scopes)
            : options.projectRoles;
        const workflowRoles = 'scopes' in options
            ? this.roleService.rolesWithScope('workflow', options.scopes)
            : options.workflowRoles;
        const sharedWorkflows = await this.sharedWorkflowRepository.find({
            where: {
                role: (0, typeorm_1.In)(workflowRoles),
                project: {
                    projectRelations: {
                        userId: user.id,
                        role: (0, typeorm_1.In)(projectRoles),
                    },
                },
            },
            select: ['workflowId'],
        });
        return sharedWorkflows.map(({ workflowId }) => workflowId);
    }
};
exports.WorkflowSharingService = WorkflowSharingService;
exports.WorkflowSharingService = WorkflowSharingService = __decorate([
    (0, typedi_1.Service)(),
    __metadata("design:paramtypes", [sharedWorkflow_repository_1.SharedWorkflowRepository,
        role_service_1.RoleService])
], WorkflowSharingService);
//# sourceMappingURL=workflowSharing.service.js.map