import { Push } from '../push';
import { ExecutionRepository } from '../databases/repositories/execution.repository';
import type { EventMessageTypes } from '../eventbus/EventMessageClasses';
import type { IExecutionResponse } from '../Interfaces';
import { Logger } from '../Logger';
import { OrchestrationService } from '../services/orchestration.service';
import { EventRelay } from '../eventbus/event-relay.service';
export declare class ExecutionRecoveryService {
    private readonly logger;
    private readonly push;
    private readonly executionRepository;
    private readonly orchestrationService;
    private readonly eventRelay;
    constructor(logger: Logger, push: Push, executionRepository: ExecutionRepository, orchestrationService: OrchestrationService, eventRelay: EventRelay);
    init(): void;
    private readonly queueRecoverySettings;
    private isShuttingDown;
    recoverFromLogs(executionId: string, messages: EventMessageTypes[]): Promise<IExecutionResponse | null | undefined>;
    scheduleQueueRecovery(waitMs?: number): void;
    stopQueueRecovery(): void;
    shutdown(): void;
    private recoverFromQueue;
    private amend;
    private amendWithoutLogs;
    private toRelevantMessages;
    private toStoppedAt;
    private runHooks;
    private toErrorMsg;
    private shouldScheduleQueueRecovery;
}
