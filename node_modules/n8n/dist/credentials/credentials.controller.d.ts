import { CredentialsService } from './credentials.service';
import { CredentialRequest } from '../requests';
import { InternalHooks } from '../InternalHooks';
import { Logger } from '../Logger';
import { NamingService } from '../services/naming.service';
import { License } from '../License';
import { EnterpriseCredentialsService } from './credentials.service.ee';
import { UserManagementMailer } from '../UserManagement/email';
import { SharedCredentialsRepository } from '../databases/repositories/sharedCredentials.repository';
import { SharedCredentials } from '../databases/entities/SharedCredentials';
import { ProjectRelationRepository } from '../databases/repositories/projectRelation.repository';
import { EventRelay } from '../eventbus/event-relay.service';
export declare class CredentialsController {
    private readonly credentialsService;
    private readonly enterpriseCredentialsService;
    private readonly namingService;
    private readonly license;
    private readonly logger;
    private readonly internalHooks;
    private readonly userManagementMailer;
    private readonly sharedCredentialsRepository;
    private readonly projectRelationRepository;
    private readonly eventRelay;
    constructor(credentialsService: CredentialsService, enterpriseCredentialsService: EnterpriseCredentialsService, namingService: NamingService, license: License, logger: Logger, internalHooks: InternalHooks, userManagementMailer: UserManagementMailer, sharedCredentialsRepository: SharedCredentialsRepository, projectRelationRepository: ProjectRelationRepository, eventRelay: EventRelay);
    getMany(req: CredentialRequest.GetMany): Promise<import("../databases/entities/CredentialsEntity").CredentialsEntity[]>;
    getProjectCredentials(req: CredentialRequest.ForWorkflow): Promise<{
        id: string;
        name: string;
        type: string;
        scopes: import("@n8n/permissions").Scope[];
    }[]>;
    generateUniqueName(req: CredentialRequest.NewName): Promise<{
        name: string;
    }>;
    getOne(req: CredentialRequest.Get): Promise<{
        scopes: import("@n8n/permissions").Scope[];
        name: string;
        type: string;
        shared: SharedCredentials[];
        id: string;
        createdAt: Date;
        updatedAt: Date;
        data: import("n8n-workflow").ICredentialDataDecryptedObject;
    } | {
        scopes: import("@n8n/permissions").Scope[];
        name: string;
        type: string;
        shared: SharedCredentials[];
        id: string;
        createdAt: Date;
        updatedAt: Date;
    }>;
    testCredentials(req: CredentialRequest.Test): Promise<import("n8n-workflow").INodeCredentialTestResult>;
    createCredentials(req: CredentialRequest.Create): Promise<{
        scopes: import("@n8n/permissions").Scope[];
        name: string;
        data: string;
        type: string;
        shared: SharedCredentials[];
        id: string;
        createdAt: Date;
        updatedAt: Date;
    }>;
    updateCredentials(req: CredentialRequest.Update): Promise<{
        scopes: import("@n8n/permissions").Scope[];
        name: string;
        type: string;
        shared: SharedCredentials[];
        id: string;
        createdAt: Date;
        updatedAt: Date;
    }>;
    deleteCredentials(req: CredentialRequest.Delete): Promise<boolean>;
    shareCredentials(req: CredentialRequest.Share): Promise<void>;
    transfer(req: CredentialRequest.Transfer): Promise<void>;
}
