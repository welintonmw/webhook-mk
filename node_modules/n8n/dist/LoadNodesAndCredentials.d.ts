import type { DirectoryLoader, Types } from 'n8n-core';
import { InstanceSettings, PackageDirectoryLoader } from 'n8n-core';
import type { INodeTypeData, ICredentialTypeData } from 'n8n-workflow';
import { Logger } from './Logger';
interface LoadedNodesAndCredentials {
    nodes: INodeTypeData;
    credentials: ICredentialTypeData;
}
export declare class LoadNodesAndCredentials {
    private readonly logger;
    private readonly instanceSettings;
    private known;
    loaded: LoadedNodesAndCredentials;
    types: Types;
    loaders: Record<string, DirectoryLoader>;
    excludeNodes: string[] | undefined;
    includeNodes: string[] | undefined;
    private postProcessors;
    constructor(logger: Logger, instanceSettings: InstanceSettings);
    init(): Promise<void>;
    addPostProcessor(fn: () => Promise<void>): void;
    isKnownNode(type: string): boolean;
    get loadedCredentials(): ICredentialTypeData;
    get loadedNodes(): INodeTypeData;
    get knownCredentials(): Record<string, import("n8n-workflow").CredentialLoadingDetails>;
    get knownNodes(): Record<string, import("n8n-workflow").LoadingDetails>;
    private loadNodesFromNodeModules;
    resolveIcon(packageName: string, url: string): string | undefined;
    getCustomDirectories(): string[];
    private loadNodesFromCustomDirectories;
    loadPackage(packageName: string): Promise<PackageDirectoryLoader>;
    unloadPackage(packageName: string): Promise<void>;
    private supportsProxyAuth;
    private injectCustomApiCallOptions;
    private runDirectoryLoader;
    postProcessLoaders(): Promise<void>;
    setupHotReload(): Promise<void>;
}
export {};
