import type { PullResult } from 'simple-git';
import express from 'express';
import { SourceControlService } from './sourceControl.service.ee';
import { SourceControlRequest } from './types/requests';
import { SourceControlPreferencesService } from './sourceControlPreferences.service.ee';
import type { SourceControlPreferences } from './types/sourceControlPreferences';
import type { SourceControlledFile } from './types/sourceControlledFile';
import type { ImportResult } from './types/importResult';
import { InternalHooks } from '../../InternalHooks';
export declare class SourceControlController {
    private readonly sourceControlService;
    private readonly sourceControlPreferencesService;
    private readonly internalHooks;
    constructor(sourceControlService: SourceControlService, sourceControlPreferencesService: SourceControlPreferencesService, internalHooks: InternalHooks);
    getPreferences(): Promise<SourceControlPreferences>;
    setPreferences(req: SourceControlRequest.UpdatePreferences): Promise<SourceControlPreferences>;
    updatePreferences(req: SourceControlRequest.UpdatePreferences): Promise<SourceControlPreferences>;
    disconnect(req: SourceControlRequest.Disconnect): Promise<SourceControlPreferences>;
    getBranches(): Promise<{
        branches: string[];
        currentBranch: string;
    }>;
    pushWorkfolder(req: SourceControlRequest.PushWorkFolder, res: express.Response): Promise<SourceControlledFile[]>;
    pullWorkfolder(req: SourceControlRequest.PullWorkFolder, res: express.Response): Promise<SourceControlledFile[] | ImportResult | PullResult | undefined>;
    resetWorkfolder(): Promise<ImportResult | undefined>;
    getStatus(req: SourceControlRequest.GetStatus): Promise<SourceControlledFile[]>;
    status(req: SourceControlRequest.GetStatus): Promise<SourceControlledFile[] | {
        wfRemoteVersionIds: import("./types/sourceControlWorkflowVersionId").SourceControlWorkflowVersionId[];
        wfLocalVersionIds: import("./types/sourceControlWorkflowVersionId").SourceControlWorkflowVersionId[];
        wfMissingInLocal: import("./types/sourceControlWorkflowVersionId").SourceControlWorkflowVersionId[];
        wfMissingInRemote: import("./types/sourceControlWorkflowVersionId").SourceControlWorkflowVersionId[];
        wfModifiedInEither: import("./types/sourceControlWorkflowVersionId").SourceControlWorkflowVersionId[];
        credMissingInLocal: (import("./types/exportableCredential").ExportableCredential & {
            filename: string;
        })[];
        credMissingInRemote: (import("./types/exportableCredential").ExportableCredential & {
            filename: string;
        })[];
        credModifiedInEither: (import("./types/exportableCredential").ExportableCredential & {
            filename: string;
        })[];
        varMissingInLocal: import("../../databases/entities/Variables").Variables[];
        varMissingInRemote: import("../../databases/entities/Variables").Variables[];
        varModifiedInEither: import("../../databases/entities/Variables").Variables[];
        tagsMissingInLocal: import("../../databases/entities/TagEntity").TagEntity[];
        tagsMissingInRemote: import("../../databases/entities/TagEntity").TagEntity[];
        tagsModifiedInEither: import("../../databases/entities/TagEntity").TagEntity[];
        mappingsMissingInLocal: import("../../databases/entities/WorkflowTagMapping").WorkflowTagMapping[];
        mappingsMissingInRemote: import("../../databases/entities/WorkflowTagMapping").WorkflowTagMapping[];
        sourceControlledFiles: SourceControlledFile[];
    }>;
    generateKeyPair(req: SourceControlRequest.GenerateKeyPair): Promise<SourceControlPreferences>;
}
