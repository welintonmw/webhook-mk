import { AuthIdentity } from './AuthIdentity';
import { AuthProviderSyncHistory } from './AuthProviderSyncHistory';
import { AuthUser } from './AuthUser';
import { CredentialsEntity } from './CredentialsEntity';
import { EventDestinations } from './EventDestinations';
import { ExecutionEntity } from './ExecutionEntity';
import { InstalledNodes } from './InstalledNodes';
import { InstalledPackages } from './InstalledPackages';
import { Settings } from './Settings';
import { SharedCredentials } from './SharedCredentials';
import { SharedWorkflow } from './SharedWorkflow';
import { TagEntity } from './TagEntity';
import { User } from './User';
import { Variables } from './Variables';
import { WebhookEntity } from './WebhookEntity';
import { WorkflowEntity } from './WorkflowEntity';
import { WorkflowTagMapping } from './WorkflowTagMapping';
import { WorkflowStatistics } from './WorkflowStatistics';
import { ExecutionMetadata } from './ExecutionMetadata';
import { ExecutionData } from './ExecutionData';
import { WorkflowHistory } from './WorkflowHistory';
import { Project } from './Project';
import { ProjectRelation } from './ProjectRelation';
export declare const entities: {
    AuthIdentity: typeof AuthIdentity;
    AuthProviderSyncHistory: typeof AuthProviderSyncHistory;
    AuthUser: typeof AuthUser;
    CredentialsEntity: typeof CredentialsEntity;
    EventDestinations: typeof EventDestinations;
    ExecutionEntity: typeof ExecutionEntity;
    InstalledNodes: typeof InstalledNodes;
    InstalledPackages: typeof InstalledPackages;
    Settings: typeof Settings;
    SharedCredentials: typeof SharedCredentials;
    SharedWorkflow: typeof SharedWorkflow;
    TagEntity: typeof TagEntity;
    User: typeof User;
    Variables: typeof Variables;
    WebhookEntity: typeof WebhookEntity;
    WorkflowEntity: typeof WorkflowEntity;
    WorkflowTagMapping: typeof WorkflowTagMapping;
    WorkflowStatistics: typeof WorkflowStatistics;
    ExecutionMetadata: typeof ExecutionMetadata;
    ExecutionData: typeof ExecutionData;
    WorkflowHistory: typeof WorkflowHistory;
    Project: typeof Project;
    ProjectRelation: typeof ProjectRelation;
};
