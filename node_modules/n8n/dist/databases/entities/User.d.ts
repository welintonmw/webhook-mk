import type { IUser, IUserSettings } from 'n8n-workflow';
import type { SharedWorkflow } from './SharedWorkflow';
import type { SharedCredentials } from './SharedCredentials';
import { WithTimestamps } from './AbstractEntity';
import type { IPersonalizationSurveyAnswers } from '../../Interfaces';
import type { AuthIdentity } from './AuthIdentity';
import { type ScopeOptions, type Scope } from '@n8n/permissions';
import type { ProjectRelation } from './ProjectRelation';
export type GlobalRole = 'global:owner' | 'global:admin' | 'global:member';
export type AssignableRole = Exclude<GlobalRole, 'global:owner'>;
export declare class User extends WithTimestamps implements IUser {
    id: string;
    email: string;
    firstName: string;
    lastName: string;
    password: string;
    personalizationAnswers: IPersonalizationSurveyAnswers | null;
    settings: IUserSettings | null;
    role: GlobalRole;
    authIdentities: AuthIdentity[];
    sharedWorkflows: SharedWorkflow[];
    sharedCredentials: SharedCredentials[];
    projectRelations: ProjectRelation[];
    disabled: boolean;
    preUpsertHook(): void;
    apiKey?: string | null;
    mfaEnabled: boolean;
    isPending: boolean;
    computeIsPending(): void;
    isOwner: boolean;
    computeIsOwner(): void;
    get globalScopes(): Scope[];
    hasGlobalScope(scope: Scope | Scope[], scopeOptions?: ScopeOptions): boolean;
    toJSON(): Omit<this, "password" | "apiKey" | "setUpdateDate" | "preUpsertHook" | "computeIsPending" | "computeIsOwner" | "globalScopes" | "hasGlobalScope" | "toJSON" | "createPersonalProjectName">;
    createPersonalProjectName(): string;
}
