import type express from 'express';
import type { TagRequest } from '../../../types';
declare const _default: {
    createTag: (((req: import("../../../../requests").AuthenticatedRequest<{
        id?: string | undefined;
    }>, res: express.Response<any, Record<string, any>>, next: express.NextFunction) => Promise<void | express.Response<any, Record<string, any>>>) | ((req: TagRequest.Create, res: express.Response) => Promise<express.Response>))[];
    updateTag: ((req: import("../../../../requests").AuthenticatedRequest<{
        id?: string | undefined;
    }>, res: express.Response<any, Record<string, any>>, next: express.NextFunction) => Promise<void | express.Response<any, Record<string, any>>>)[];
    deleteTag: ((req: import("../../../../requests").AuthenticatedRequest<{
        id?: string | undefined;
    }>, res: express.Response<any, Record<string, any>>, next: express.NextFunction) => Promise<void | express.Response<any, Record<string, any>>>)[];
    getTags: (((req: import("../../../types").PaginatedRequest, res: express.Response<any, Record<string, any>>, next: express.NextFunction) => void | express.Response<any, Record<string, any>>) | ((req: import("../../../../requests").AuthenticatedRequest<{
        id?: string | undefined;
    }>, res: express.Response<any, Record<string, any>>, next: express.NextFunction) => Promise<void | express.Response<any, Record<string, any>>>) | ((req: TagRequest.GetAll, res: express.Response) => Promise<express.Response>))[];
    getTag: ((req: import("../../../../requests").AuthenticatedRequest<{
        id?: string | undefined;
    }>, res: express.Response<any, Record<string, any>>, next: express.NextFunction) => Promise<void | express.Response<any, Record<string, any>>>)[];
};
export = _default;
