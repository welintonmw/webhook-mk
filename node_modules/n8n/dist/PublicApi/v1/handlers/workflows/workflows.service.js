"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.updateTags = exports.getWorkflowTags = exports.parseTagNames = exports.updateWorkflow = exports.deleteWorkflow = exports.setWorkflowAsInactive = exports.setWorkflowAsActive = exports.createWorkflow = exports.getWorkflowById = exports.getSharedWorkflow = exports.getSharedWorkflowIds = void 0;
const typedi_1 = require("typedi");
const Db = __importStar(require("../../../../Db"));
const WorkflowEntity_1 = require("../../../../databases/entities/WorkflowEntity");
const WorkflowTagMapping_1 = require("../../../../databases/entities/WorkflowTagMapping");
const SharedWorkflow_1 = require("../../../../databases/entities/SharedWorkflow");
const workflow_repository_1 = require("../../../../databases/repositories/workflow.repository");
const sharedWorkflow_repository_1 = require("../../../../databases/repositories/sharedWorkflow.repository");
const tag_repository_1 = require("../../../../databases/repositories/tag.repository");
const License_1 = require("../../../../License");
const workflowSharing_service_1 = require("../../../../workflows/workflowSharing.service");
const config_1 = __importDefault(require("../../../../config"));
function insertIf(condition, elements) {
    return condition ? elements : [];
}
async function getSharedWorkflowIds(user, scopes) {
    if (typedi_1.Container.get(License_1.License).isSharingEnabled()) {
        return await typedi_1.Container.get(workflowSharing_service_1.WorkflowSharingService).getSharedWorkflowIds(user, {
            scopes,
        });
    }
    else {
        return await typedi_1.Container.get(workflowSharing_service_1.WorkflowSharingService).getSharedWorkflowIds(user, {
            workflowRoles: ['workflow:owner'],
            projectRoles: ['project:personalOwner'],
        });
    }
}
exports.getSharedWorkflowIds = getSharedWorkflowIds;
async function getSharedWorkflow(user, workflowId) {
    return await typedi_1.Container.get(sharedWorkflow_repository_1.SharedWorkflowRepository).findOne({
        where: {
            ...(!['global:owner', 'global:admin'].includes(user.role) && { userId: user.id }),
            ...(workflowId && { workflowId }),
        },
        relations: [...insertIf(!config_1.default.getEnv('workflowTagsDisabled'), ['workflow.tags']), 'workflow'],
    });
}
exports.getSharedWorkflow = getSharedWorkflow;
async function getWorkflowById(id) {
    return await typedi_1.Container.get(workflow_repository_1.WorkflowRepository).findOne({
        where: { id },
    });
}
exports.getWorkflowById = getWorkflowById;
async function createWorkflow(workflow, user, personalProject, role) {
    return await Db.transaction(async (transactionManager) => {
        const newWorkflow = new WorkflowEntity_1.WorkflowEntity();
        Object.assign(newWorkflow, workflow);
        const savedWorkflow = await transactionManager.save(newWorkflow);
        const newSharedWorkflow = new SharedWorkflow_1.SharedWorkflow();
        Object.assign(newSharedWorkflow, {
            role,
            user,
            project: personalProject,
            workflow: savedWorkflow,
        });
        await transactionManager.save(newSharedWorkflow);
        return savedWorkflow;
    });
}
exports.createWorkflow = createWorkflow;
async function setWorkflowAsActive(workflow) {
    await typedi_1.Container.get(workflow_repository_1.WorkflowRepository).update(workflow.id, {
        active: true,
        updatedAt: new Date(),
    });
}
exports.setWorkflowAsActive = setWorkflowAsActive;
async function setWorkflowAsInactive(workflow) {
    return await typedi_1.Container.get(workflow_repository_1.WorkflowRepository).update(workflow.id, {
        active: false,
        updatedAt: new Date(),
    });
}
exports.setWorkflowAsInactive = setWorkflowAsInactive;
async function deleteWorkflow(workflow) {
    return await typedi_1.Container.get(workflow_repository_1.WorkflowRepository).remove(workflow);
}
exports.deleteWorkflow = deleteWorkflow;
async function updateWorkflow(workflowId, updateData) {
    return await typedi_1.Container.get(workflow_repository_1.WorkflowRepository).update(workflowId, updateData);
}
exports.updateWorkflow = updateWorkflow;
function parseTagNames(tags) {
    return tags.split(',').map((tag) => tag.trim());
}
exports.parseTagNames = parseTagNames;
async function getWorkflowTags(workflowId) {
    return await typedi_1.Container.get(tag_repository_1.TagRepository).find({
        select: ['id', 'name', 'createdAt', 'updatedAt'],
        where: {
            workflowMappings: {
                ...(workflowId && { workflowId }),
            },
        },
    });
}
exports.getWorkflowTags = getWorkflowTags;
async function updateTags(workflowId, newTags) {
    await Db.transaction(async (transactionManager) => {
        const oldTags = await transactionManager.findBy(WorkflowTagMapping_1.WorkflowTagMapping, { workflowId });
        if (oldTags.length > 0) {
            await transactionManager.delete(WorkflowTagMapping_1.WorkflowTagMapping, oldTags);
        }
        await transactionManager.insert(WorkflowTagMapping_1.WorkflowTagMapping, newTags.map((tagId) => ({ tagId, workflowId })));
    });
}
exports.updateTags = updateTags;
//# sourceMappingURL=workflows.service.js.map