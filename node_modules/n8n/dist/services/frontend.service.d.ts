import type { IN8nUISettings } from 'n8n-workflow';
import { InstanceSettings } from 'n8n-core';
import { CredentialsOverwrites } from '../CredentialsOverwrites';
import { CredentialTypes } from '../CredentialTypes';
import { LoadNodesAndCredentials } from '../LoadNodesAndCredentials';
import { License } from '../License';
import { UserManagementMailer } from '../UserManagement/email';
import { Logger } from '../Logger';
import { UrlService } from './url.service';
import { InternalHooks } from '../InternalHooks';
export declare class FrontendService {
    private readonly logger;
    private readonly loadNodesAndCredentials;
    private readonly credentialTypes;
    private readonly credentialsOverwrites;
    private readonly license;
    private readonly mailer;
    private readonly instanceSettings;
    private readonly urlService;
    private readonly internalHooks;
    settings: IN8nUISettings;
    private communityPackagesService?;
    constructor(logger: Logger, loadNodesAndCredentials: LoadNodesAndCredentials, credentialTypes: CredentialTypes, credentialsOverwrites: CredentialsOverwrites, license: License, mailer: UserManagementMailer, instanceSettings: InstanceSettings, urlService: UrlService, internalHooks: InternalHooks);
    private initSettings;
    generateTypes(): Promise<void>;
    getSettings(pushRef?: string): IN8nUISettings;
    addToSettings(newSettings: Record<string, unknown>): void;
    private writeStaticJSON;
    private overwriteCredentialsProperties;
}
