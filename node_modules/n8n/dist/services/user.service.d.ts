import type { IUserSettings } from 'n8n-workflow';
import type { User } from '../databases/entities/User';
import { UserRepository } from '../databases/repositories/user.repository';
import type { Invitation, PublicUser } from '../Interfaces';
import type { PostHogClient } from '../posthog';
import { Logger } from '../Logger';
import { UserManagementMailer } from '../UserManagement/email';
import { UrlService } from '../services/url.service';
import type { UserRequest } from '../requests';
import { EventRelay } from '../eventbus/event-relay.service';
export declare class UserService {
    private readonly logger;
    private readonly userRepository;
    private readonly mailer;
    private readonly urlService;
    private readonly eventRelay;
    constructor(logger: Logger, userRepository: UserRepository, mailer: UserManagementMailer, urlService: UrlService, eventRelay: EventRelay);
    update(userId: string, data: Partial<User>): Promise<void>;
    getManager(): import("@n8n/typeorm").EntityManager;
    updateSettings(userId: string, newSettings: Partial<IUserSettings>): Promise<void>;
    toPublic(user: User, options?: {
        withInviteUrl?: boolean;
        inviterId?: string;
        posthog?: PostHogClient;
        withScopes?: boolean;
    }): Promise<PublicUser>;
    private addInviteUrl;
    private addFeatureFlags;
    private sendEmails;
    inviteUsers(owner: User, invitations: Invitation[]): Promise<{
        usersInvited: UserRequest.InviteResponse[];
        usersCreated: string[];
    }>;
}
