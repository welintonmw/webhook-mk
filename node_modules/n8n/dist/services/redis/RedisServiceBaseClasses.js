"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.RedisServiceBaseReceiver = exports.RedisServiceBaseSender = void 0;
const typedi_1 = require("typedi");
const config_1 = __importDefault(require("../../config"));
const Logger_1 = require("../../Logger");
const redis_client_service_1 = require("./redis-client.service");
let RedisServiceBase = class RedisServiceBase {
    constructor(logger, redisClientService) {
        this.logger = logger;
        this.redisClientService = redisClientService;
        this.isInitialized = false;
    }
    async init(type = 'client') {
        if (this.redisClient && this.isInitialized) {
            return;
        }
        this.redisClient = this.redisClientService.createClient({ type });
        this.redisClient.on('close', () => {
            this.logger.warn('Redis unavailable - trying to reconnect...');
        });
        this.redisClient.on('error', (error) => {
            if (!String(error).includes('ECONNREFUSED')) {
                this.logger.warn('Error with Redis: ', error);
            }
        });
    }
    async destroy() {
        if (!this.redisClient) {
            return;
        }
        await this.redisClient.quit();
        this.isInitialized = false;
        this.redisClient = undefined;
    }
};
RedisServiceBase = __decorate([
    (0, typedi_1.Service)(),
    __metadata("design:paramtypes", [Logger_1.Logger,
        redis_client_service_1.RedisClientService])
], RedisServiceBase);
class RedisServiceBaseSender extends RedisServiceBase {
    async init(type = 'client') {
        await super.init(type);
        this.senderId = config_1.default.get('redis.queueModeId');
    }
}
exports.RedisServiceBaseSender = RedisServiceBaseSender;
class RedisServiceBaseReceiver extends RedisServiceBase {
    constructor() {
        super(...arguments);
        this.messageHandlers = new Map();
    }
    addMessageHandler(handlerName, handler) {
        this.messageHandlers.set(handlerName, handler);
    }
    removeMessageHandler(handlerName) {
        this.messageHandlers.delete(handlerName);
    }
}
exports.RedisServiceBaseReceiver = RedisServiceBaseReceiver;
//# sourceMappingURL=RedisServiceBaseClasses.js.map