"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getOsCpuString = exports.debounceMessageReceiver = exports.messageToRedisServiceCommandObject = void 0;
const typedi_1 = require("typedi");
const n8n_workflow_1 = require("n8n-workflow");
const Logger_1 = require("../../Logger");
const RedisConstants_1 = require("../redis/RedisConstants");
const os = __importStar(require("os"));
function messageToRedisServiceCommandObject(messageString) {
    if (!messageString)
        return;
    let message;
    try {
        message = (0, n8n_workflow_1.jsonParse)(messageString);
    }
    catch {
        typedi_1.Container.get(Logger_1.Logger).debug(`Received invalid message via channel ${RedisConstants_1.COMMAND_REDIS_CHANNEL}: "${messageString}"`);
        return;
    }
    return message;
}
exports.messageToRedisServiceCommandObject = messageToRedisServiceCommandObject;
const lastReceived = {};
function debounceMessageReceiver(message, timeout = 100) {
    const now = new Date();
    const lastReceivedDate = lastReceived[message.command];
    if (lastReceivedDate && now.getTime() - lastReceivedDate.getTime() < timeout) {
        return false;
    }
    lastReceived[message.command] = now;
    return true;
}
exports.debounceMessageReceiver = debounceMessageReceiver;
function getOsCpuString() {
    const cpus = os.cpus();
    if (cpus.length === 0)
        return 'no CPU info';
    return `${cpus.length}x ${cpus[0].model} - speed: ${cpus[0].speed}`;
}
exports.getOsCpuString = getOsCpuString;
//# sourceMappingURL=helpers.js.map