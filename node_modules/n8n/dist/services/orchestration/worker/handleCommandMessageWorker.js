"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getWorkerCommandReceivedHandler = void 0;
const n8n_workflow_1 = require("n8n-workflow");
const typedi_1 = __importDefault(require("typedi"));
const RedisConstants_1 = require("../../../services/redis/RedisConstants");
const os = __importStar(require("os"));
const License_1 = require("../../../License");
const MessageEventBus_1 = require("../../../eventbus/MessageEventBus/MessageEventBus");
const ExternalSecretsManager_ee_1 = require("../../../ExternalSecrets/ExternalSecretsManager.ee");
const helpers_1 = require("../helpers");
const Logger_1 = require("../../../Logger");
const constants_1 = require("../../../constants");
function getWorkerCommandReceivedHandler(options) {
    return async (channel, messageString) => {
        if (channel === RedisConstants_1.COMMAND_REDIS_CHANNEL) {
            if (!messageString)
                return;
            const logger = typedi_1.default.get(Logger_1.Logger);
            let message;
            try {
                message = (0, n8n_workflow_1.jsonParse)(messageString);
            }
            catch {
                logger.debug(`Received invalid message via channel ${RedisConstants_1.COMMAND_REDIS_CHANNEL}: "${messageString}"`);
                return;
            }
            if (message) {
                logger.debug(`RedisCommandHandler(worker): Received command message ${message.command} from ${message.senderId}`);
                if (message.targets && !message.targets.includes(options.queueModeId)) {
                    return;
                }
                switch (message.command) {
                    case 'getStatus':
                        if (!(0, helpers_1.debounceMessageReceiver)(message, 500))
                            return;
                        await options.redisPublisher.publishToWorkerChannel({
                            workerId: options.queueModeId,
                            command: 'getStatus',
                            payload: {
                                workerId: options.queueModeId,
                                runningJobsSummary: options.getRunningJobsSummary(),
                                freeMem: os.freemem(),
                                totalMem: os.totalmem(),
                                uptime: process.uptime(),
                                loadAvg: os.loadavg(),
                                cpus: (0, helpers_1.getOsCpuString)(),
                                arch: os.arch(),
                                platform: os.platform(),
                                hostname: os.hostname(),
                                interfaces: Object.values(os.networkInterfaces()).flatMap((interfaces) => {
                                    var _a;
                                    return (_a = (interfaces !== null && interfaces !== void 0 ? interfaces : [])) === null || _a === void 0 ? void 0 : _a.map((net) => ({
                                        family: net.family,
                                        address: net.address,
                                        internal: net.internal,
                                    }));
                                }),
                                version: constants_1.N8N_VERSION,
                            },
                        });
                        break;
                    case 'getId':
                        if (!(0, helpers_1.debounceMessageReceiver)(message, 500))
                            return;
                        await options.redisPublisher.publishToWorkerChannel({
                            workerId: options.queueModeId,
                            command: 'getId',
                        });
                        break;
                    case 'restartEventBus':
                        if (!(0, helpers_1.debounceMessageReceiver)(message, 500))
                            return;
                        try {
                            await typedi_1.default.get(MessageEventBus_1.MessageEventBus).restart();
                            await options.redisPublisher.publishToWorkerChannel({
                                workerId: options.queueModeId,
                                command: 'restartEventBus',
                                payload: {
                                    result: 'success',
                                },
                            });
                        }
                        catch (error) {
                            await options.redisPublisher.publishToWorkerChannel({
                                workerId: options.queueModeId,
                                command: 'restartEventBus',
                                payload: {
                                    result: 'error',
                                    error: error.message,
                                },
                            });
                        }
                        break;
                    case 'reloadExternalSecretsProviders':
                        if (!(0, helpers_1.debounceMessageReceiver)(message, 500))
                            return;
                        try {
                            await typedi_1.default.get(ExternalSecretsManager_ee_1.ExternalSecretsManager).reloadAllProviders();
                            await options.redisPublisher.publishToWorkerChannel({
                                workerId: options.queueModeId,
                                command: 'reloadExternalSecretsProviders',
                                payload: {
                                    result: 'success',
                                },
                            });
                        }
                        catch (error) {
                            await options.redisPublisher.publishToWorkerChannel({
                                workerId: options.queueModeId,
                                command: 'reloadExternalSecretsProviders',
                                payload: {
                                    result: 'error',
                                    error: error.message,
                                },
                            });
                        }
                        break;
                    case 'reloadLicense':
                        if (!(0, helpers_1.debounceMessageReceiver)(message, 500))
                            return;
                        await typedi_1.default.get(License_1.License).reload();
                        break;
                    case 'stopWorker':
                        if (!(0, helpers_1.debounceMessageReceiver)(message, 500))
                            return;
                        break;
                    default:
                        if (message.command === 'relay-execution-lifecycle-event' ||
                            message.command === 'clear-test-webhooks') {
                            break;
                        }
                        logger.debug(`Received unknown command via channel ${RedisConstants_1.COMMAND_REDIS_CHANNEL}: "${message.command}"`);
                        break;
                }
            }
        }
    };
}
exports.getWorkerCommandReceivedHandler = getWorkerCommandReceivedHandler;
//# sourceMappingURL=handleCommandMessageWorker.js.map