import { ChatOpenAI, OpenAIEmbeddings } from '@langchain/openai';
import type { BaseMessageChunk, BaseMessageLike } from '@langchain/core/messages';
import type { N8nAIProvider } from '../../../types/ai.types';
import type { BaseChatModelCallOptions } from '@langchain/core/language_models/chat_models';
import type { ZodSchema } from 'zod';
export declare class AIProviderOpenAI implements N8nAIProvider {
    model: ChatOpenAI;
    embeddings: OpenAIEmbeddings;
    constructor({ openAIApiKey, modelName }: {
        openAIApiKey: string;
        modelName: string;
    });
    modelWithOutputParser<T extends ZodSchema>(schema: T): import("@langchain/core/runnables").Runnable<import("@langchain/core/language_models/base").BaseLanguageModelInput, import("@langchain/core/messages").AIMessageChunk, import("@langchain/openai").ChatOpenAICallOptions>;
    mapResponse(data: BaseMessageChunk): string;
    invoke(messages: BaseMessageLike[], options?: BaseChatModelCallOptions): Promise<string>;
}
