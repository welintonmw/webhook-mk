import { type Config } from '@oclif/core';
import type PCancelable from 'p-cancelable';
import type { INodeTypes, IRun } from 'n8n-workflow';
import type { Job, JobResponse } from '../Queue';
import { Queue } from '../Queue';
import type { RedisServicePubSubSubscriber } from '../services/redis/RedisServicePubSubSubscriber';
import type { WorkerJobStatusSummary } from '../services/orchestration/worker/types';
import { BaseCommand } from './BaseCommand';
export declare class Worker extends BaseCommand {
    static description: string;
    static examples: string[];
    static flags: {
        help: import("@oclif/core/lib/interfaces").BooleanFlag<void>;
        concurrency: import("@oclif/core/lib/interfaces").OptionFlag<number, import("@oclif/core/lib/interfaces").CustomOptions>;
    };
    static runningJobs: {
        [key: string]: PCancelable<IRun>;
    };
    static runningJobsSummary: {
        [jobId: string]: WorkerJobStatusSummary;
    };
    static jobQueue: Queue;
    redisSubscriber: RedisServicePubSubSubscriber;
    stopProcess(): Promise<void>;
    runJob(job: Job, nodeTypes: INodeTypes): Promise<JobResponse>;
    constructor(argv: string[], cmdConfig: Config);
    init(): Promise<void>;
    initEventBus(): Promise<void>;
    initOrchestration(): Promise<void>;
    initQueue(): Promise<void>;
    setupHealthMonitor(): Promise<void>;
    run(): Promise<void>;
    catch(error: Error): Promise<void>;
}
