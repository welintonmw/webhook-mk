"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ImportWorkflowsCommand = void 0;
const command_1 = require("@oclif/command");
const n8n_workflow_1 = require("n8n-workflow");
const fs = require("fs");
const glob = require("fast-glob");
const n8n_core_1 = require("n8n-core");
const Logger_1 = require("../../src/Logger");
const src_1 = require("../../src");
class ImportWorkflowsCommand extends command_1.Command {
    transformCredentials(node, credentialsEntities) {
        if (node.credentials) {
            const allNodeCredentials = Object.entries(node.credentials);
            for (const [type, name] of allNodeCredentials) {
                if (typeof name === 'string') {
                    const nodeCredentials = {
                        id: null,
                        name,
                    };
                    const matchingCredentials = credentialsEntities.filter((credentials) => credentials.name === name && credentials.type === type);
                    if (matchingCredentials.length === 1) {
                        nodeCredentials.id = matchingCredentials[0].id.toString();
                    }
                    node.credentials[type] = nodeCredentials;
                }
            }
        }
    }
    async run() {
        var _a, _b;
        const logger = Logger_1.getLogger();
        n8n_workflow_1.LoggerProxy.init(logger);
        const { flags } = this.parse(ImportWorkflowsCommand);
        if (!flags.input) {
            console.info(`An input file or directory with --input must be provided`);
            return;
        }
        if (flags.separate) {
            if (fs.existsSync(flags.input)) {
                if (!fs.lstatSync(flags.input).isDirectory()) {
                    console.info(`The paramenter --input must be a directory`);
                    return;
                }
            }
        }
        try {
            await src_1.Db.init();
            await n8n_core_1.UserSettings.prepareUserSettings();
            const credentialsEntities = (_b = (await ((_a = src_1.Db.collections.Credentials) === null || _a === void 0 ? void 0 : _a.find()))) !== null && _b !== void 0 ? _b : [];
            let i;
            if (flags.separate) {
                let inputPath = flags.input;
                if (process.platform === 'win32') {
                    inputPath = inputPath.replace(/\\/g, '/');
                }
                inputPath = inputPath.replace(/\/$/g, '');
                const files = await glob(`${inputPath}/*.json`);
                for (i = 0; i < files.length; i++) {
                    const workflow = JSON.parse(fs.readFileSync(files[i], { encoding: 'utf8' }));
                    if (credentialsEntities.length > 0) {
                        workflow.nodes.forEach((node) => {
                            this.transformCredentials(node, credentialsEntities);
                        });
                    }
                    await src_1.Db.collections.Workflow.save(workflow);
                }
            }
            else {
                const fileContents = JSON.parse(fs.readFileSync(flags.input, { encoding: 'utf8' }));
                if (!Array.isArray(fileContents)) {
                    throw new Error(`File does not seem to contain workflows.`);
                }
                for (i = 0; i < fileContents.length; i++) {
                    if (credentialsEntities.length > 0) {
                        fileContents[i].nodes.forEach((node) => {
                            this.transformCredentials(node, credentialsEntities);
                        });
                    }
                    await src_1.Db.collections.Workflow.save(fileContents[i]);
                }
            }
            console.info(`Successfully imported ${i} ${i === 1 ? 'workflow.' : 'workflows.'}`);
            process.exit(0);
        }
        catch (error) {
            console.error('An error occurred while exporting workflows. See log messages for details.');
            logger.error(error.message);
            this.exit(1);
        }
    }
}
exports.ImportWorkflowsCommand = ImportWorkflowsCommand;
ImportWorkflowsCommand.description = 'Import workflows';
ImportWorkflowsCommand.examples = [
    `$ n8n import:workflow --input=file.json`,
    `$ n8n import:workflow --separate --input=backups/latest/`,
];
ImportWorkflowsCommand.flags = {
    help: command_1.flags.help({ char: 'h' }),
    input: command_1.flags.string({
        char: 'i',
        description: 'Input file name or directory if --separate is used',
    }),
    separate: command_1.flags.boolean({
        description: 'Imports *.json files from directory provided by --input',
    }),
};
//# sourceMappingURL=workflow.js.map