import 'reflect-metadata';
import { Command } from '@oclif/core';
import { InstanceSettings } from 'n8n-core';
import type { AbstractServer } from '../AbstractServer';
import { Logger } from '../Logger';
import { ExternalHooks } from '../ExternalHooks';
import { NodeTypes } from '../NodeTypes';
import type { N8nInstanceType } from '../Interfaces';
import { License } from '../License';
import { ShutdownService } from '../shutdown/Shutdown.service';
export declare abstract class BaseCommand extends Command {
    protected logger: Logger;
    protected externalHooks?: ExternalHooks;
    protected nodeTypes: NodeTypes;
    protected instanceSettings: InstanceSettings;
    private instanceType;
    queueModeId: string;
    protected server?: AbstractServer;
    protected shutdownService: ShutdownService;
    protected license: License;
    protected gracefulShutdownTimeoutInS: number;
    init(): Promise<void>;
    protected setInstanceType(instanceType: N8nInstanceType): void;
    protected setInstanceQueueModeId(): void;
    protected stopProcess(): Promise<void>;
    protected initCrashJournal(): Promise<void>;
    protected exitSuccessFully(): Promise<void>;
    protected exitWithCrash(message: string, error: unknown): Promise<void>;
    initObjectStoreService(): Promise<void>;
    private _initObjectStoreService;
    initBinaryDataService(): Promise<void>;
    initExternalHooks(): Promise<void>;
    initLicense(): Promise<void>;
    initExternalSecrets(): Promise<void>;
    initWorkflowHistory(): void;
    finally(error: Error | undefined): Promise<void>;
    private onTerminationSignal;
}
