"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.CollaborationState = void 0;
const typedi_1 = require("typedi");
let CollaborationState = class CollaborationState {
    constructor() {
        this.state = {
            activeUsersByWorkflowId: new Map(),
        };
    }
    addActiveWorkflowUser(workflowId, userId) {
        const { activeUsersByWorkflowId } = this.state;
        let activeUsers = activeUsersByWorkflowId.get(workflowId);
        if (!activeUsers) {
            activeUsers = new Map();
            activeUsersByWorkflowId.set(workflowId, activeUsers);
        }
        activeUsers.set(userId, {
            userId,
            lastSeen: new Date(),
        });
    }
    removeActiveWorkflowUser(workflowId, userId) {
        const { activeUsersByWorkflowId } = this.state;
        const activeUsers = activeUsersByWorkflowId.get(workflowId);
        if (!activeUsers) {
            return;
        }
        activeUsers.delete(userId);
        if (activeUsers.size === 0) {
            activeUsersByWorkflowId.delete(workflowId);
        }
    }
    getActiveWorkflowUsers(workflowId) {
        const workflowState = this.state.activeUsersByWorkflowId.get(workflowId);
        if (!workflowState) {
            return [];
        }
        return [...workflowState.values()];
    }
    cleanInactiveUsers(workflowId, inactivityCleanUpTimeInMs) {
        const activeUsers = this.state.activeUsersByWorkflowId.get(workflowId);
        if (!activeUsers) {
            return;
        }
        const now = Date.now();
        for (const user of activeUsers.values()) {
            if (now - user.lastSeen.getTime() > inactivityCleanUpTimeInMs) {
                activeUsers.delete(user.userId);
            }
        }
    }
};
exports.CollaborationState = CollaborationState;
exports.CollaborationState = CollaborationState = __decorate([
    (0, typedi_1.Service)()
], CollaborationState);
//# sourceMappingURL=collaboration.state.js.map