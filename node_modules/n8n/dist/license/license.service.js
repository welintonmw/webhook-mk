"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.LicenseService = exports.LicenseErrors = void 0;
const typedi_1 = require("typedi");
const axios_1 = __importDefault(require("axios"));
const Logger_1 = require("../Logger");
const License_1 = require("../License");
const InternalHooks_1 = require("../InternalHooks");
const workflow_repository_1 = require("../databases/repositories/workflow.repository");
const bad_request_error_1 = require("../errors/response-errors/bad-request.error");
const url_service_1 = require("../services/url.service");
exports.LicenseErrors = {
    SCHEMA_VALIDATION: 'Activation key is in the wrong format',
    RESERVATION_EXHAUSTED: 'Activation key has been used too many times. Please contact sales@n8n.io if you would like to extend it',
    RESERVATION_EXPIRED: 'Activation key has expired',
    NOT_FOUND: 'Activation key not found',
    RESERVATION_CONFLICT: 'Activation key not found',
    RESERVATION_DUPLICATE: 'Activation key has already been used on this instance',
};
let LicenseService = class LicenseService {
    constructor(logger, license, internalHooks, workflowRepository, urlService) {
        this.logger = logger;
        this.license = license;
        this.internalHooks = internalHooks;
        this.workflowRepository = workflowRepository;
        this.urlService = urlService;
    }
    async getLicenseData() {
        var _a;
        const triggerCount = await this.workflowRepository.getActiveTriggerCount();
        const mainPlan = this.license.getMainPlan();
        return {
            usage: {
                executions: {
                    value: triggerCount,
                    limit: this.license.getTriggerLimit(),
                    warningThreshold: 0.8,
                },
            },
            license: {
                planId: (_a = mainPlan === null || mainPlan === void 0 ? void 0 : mainPlan.productId) !== null && _a !== void 0 ? _a : '',
                planName: this.license.getPlanName(),
            },
        };
    }
    async requestEnterpriseTrial(user) {
        await axios_1.default.post('https://enterprise.n8n.io/enterprise-trial', {
            licenseType: 'enterprise',
            firstName: user.firstName,
            lastName: user.lastName,
            email: user.email,
            instanceUrl: this.urlService.getWebhookBaseUrl(),
        });
    }
    getManagementJwt() {
        return this.license.getManagementJwt();
    }
    async activateLicense(activationKey) {
        try {
            await this.license.activate(activationKey);
        }
        catch (e) {
            const message = this.mapErrorMessage(e, 'activate');
            throw new bad_request_error_1.BadRequestError(message);
        }
    }
    async renewLicense() {
        try {
            await this.license.renew();
        }
        catch (e) {
            const message = this.mapErrorMessage(e, 'renew');
            void this.internalHooks.onLicenseRenewAttempt({ success: false });
            throw new bad_request_error_1.BadRequestError(message);
        }
        void this.internalHooks.onLicenseRenewAttempt({ success: true });
    }
    mapErrorMessage(error, action) {
        var _a;
        let message = error.errorId && exports.LicenseErrors[error.errorId];
        if (!message) {
            message = `Failed to ${action} license: ${error.message}`;
            this.logger.error(message, { stack: (_a = error.stack) !== null && _a !== void 0 ? _a : 'n/a' });
        }
        return message;
    }
};
exports.LicenseService = LicenseService;
exports.LicenseService = LicenseService = __decorate([
    (0, typedi_1.Service)(),
    __metadata("design:paramtypes", [Logger_1.Logger,
        License_1.License,
        InternalHooks_1.InternalHooks,
        workflow_repository_1.WorkflowRepository,
        url_service_1.UrlService])
], LicenseService);
//# sourceMappingURL=license.service.js.map