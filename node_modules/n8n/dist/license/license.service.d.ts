import { Logger } from '../Logger';
import { License } from '../License';
import { InternalHooks } from '../InternalHooks';
import type { User } from '../databases/entities/User';
import { WorkflowRepository } from '../databases/repositories/workflow.repository';
import { UrlService } from '../services/url.service';
export declare const LicenseErrors: {
    SCHEMA_VALIDATION: string;
    RESERVATION_EXHAUSTED: string;
    RESERVATION_EXPIRED: string;
    NOT_FOUND: string;
    RESERVATION_CONFLICT: string;
    RESERVATION_DUPLICATE: string;
};
export declare class LicenseService {
    private readonly logger;
    private readonly license;
    private readonly internalHooks;
    private readonly workflowRepository;
    private readonly urlService;
    constructor(logger: Logger, license: License, internalHooks: InternalHooks, workflowRepository: WorkflowRepository, urlService: UrlService);
    getLicenseData(): Promise<{
        usage: {
            executions: {
                value: number;
                limit: number;
                warningThreshold: number;
            };
        };
        license: {
            planId: string;
            planName: string;
        };
    }>;
    requestEnterpriseTrial(user: User): Promise<void>;
    getManagementJwt(): string;
    activateLicense(activationKey: string): Promise<void>;
    renewLicense(): Promise<void>;
    private mapErrorMessage;
}
