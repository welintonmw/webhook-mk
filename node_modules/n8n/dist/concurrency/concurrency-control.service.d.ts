import { Logger } from '../Logger';
import { ExecutionRepository } from '../databases/repositories/execution.repository';
import type { WorkflowExecuteMode as ExecutionMode } from 'n8n-workflow';
import type { IExecutingWorkflowData } from '../Interfaces';
import { Telemetry } from '../telemetry';
export declare class ConcurrencyControlService {
    private readonly logger;
    private readonly executionRepository;
    private readonly telemetry;
    private readonly isEnabled;
    private readonly productionLimit;
    private readonly productionQueue;
    private readonly limitsToReport;
    constructor(logger: Logger, executionRepository: ExecutionRepository, telemetry: Telemetry);
    throttle({ mode, executionId }: {
        mode: ExecutionMode;
        executionId: string;
    }): Promise<void>;
    release({ mode }: {
        mode: ExecutionMode;
    }): void;
    remove({ mode, executionId }: {
        mode: ExecutionMode;
        executionId: string;
    }): void;
    removeAll(activeExecutions: {
        [executionId: string]: IExecutingWorkflowData;
    }): Promise<void>;
    private logInit;
    private isUnlimited;
    private log;
    private shouldReport;
}
