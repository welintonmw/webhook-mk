import type { Response } from 'express';
import type { IHttpRequestMethods } from 'n8n-workflow';
import { WorkflowRepository } from './databases/repositories/workflow.repository';
import type { IResponseCallbackData, IWebhookManager, WebhookAccessControlOptions, WebhookRequest } from './Interfaces';
import { Logger } from './Logger';
import { NodeTypes } from './NodeTypes';
import { WebhookService } from './services/webhook.service';
import { WorkflowStaticDataService } from './workflows/workflowStaticData.service';
export declare class ActiveWebhooks implements IWebhookManager {
    private readonly logger;
    private readonly nodeTypes;
    private readonly webhookService;
    private readonly workflowRepository;
    private readonly workflowStaticDataService;
    constructor(logger: Logger, nodeTypes: NodeTypes, webhookService: WebhookService, workflowRepository: WorkflowRepository, workflowStaticDataService: WorkflowStaticDataService);
    getWebhookMethods(path: string): Promise<IHttpRequestMethods[]>;
    findAccessControlOptions(path: string, httpMethod: IHttpRequestMethods): Promise<WebhookAccessControlOptions>;
    executeWebhook(request: WebhookRequest, response: Response): Promise<IResponseCallbackData>;
    private findWebhook;
}
